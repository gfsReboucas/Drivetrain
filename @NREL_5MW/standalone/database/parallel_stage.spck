!file.version=3.5! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210000
version.desc   = ''
version.build  = 101

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
glob.slv.error.mode                                                 = 2                       ! Solver termination due to errors and warnings
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 1.69511640071868896E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -1.21339952945709229E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 7.23535001277923584E-01 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.49259781837463379E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 1.42501920461654663E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 2.40029186010360718E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 7.87650227546691895E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 3.62775492668151855E+00 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved
view.stereo.active (                $V_WorkingView                ) = 0                       ! Stereo enabled
view.stereo.balance (               $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo balance
view.stereo.offset (                $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo offset

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 1.78025734424591064E+00 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -1.35237789154052734E+00 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 7.85628080368041992E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.49259781837463379E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 1.42501920461654663E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.40029186010360718E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.87650227546691895E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Ortho                      ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_Ortho                      ) = 3.80061101913452148E+00 ! Back clipping plane value
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 2 s }                 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 0                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.ev.force.handling (             $SLV_SolverSettings           ) = 1                       ! Force Elements
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_normal_module               ) = '14.0 mm'               ! Definition

subvar.str (                        $_pressure_angle              ) = '20 deg'                ! Definition

subvar.str (                        $_center_distance             ) = '861.0 mm'              ! Definition

subvar.str (                        $_helix_angle                 ) = '10.0 deg'              ! Definition

subvar.str (                        $_normal_backlash             ) = '0.40 mm'               ! Definition

subvar.str (                        $_tooth_damping               ) = '500000000'             ! Definition

subvar.str (                        $_tooth_stiffness_ratio       ) = '0.8'                   ! Definition

subvar.str (                        $_x0_full_damping             ) = '10.0e-6 m'             ! Definition

subvar.str (                        $_regularization_vel          ) = '1.0e-3 m/s'            ! Definition

subvar.str (                        $_mesh_flag                   ) = '225'                   ! Definition
subvar.discr.desc (       1 ,       $_mesh_flag                   ) = 'advanced'              ! Description of discrete values
subvar.discr.desc (       2 ,       $_mesh_flag                   ) = 'basic'                 ! Description of discrete values
subvar.discr.str (        1 ,       $_mesh_flag                   ) = '225'                   ! Discrete values
subvar.discr.str (        2 ,       $_mesh_flag                   ) = '204'                   ! Discrete values

subvar.str (                        $_use_advanced                ) = 'IF($_mesh_flag == 225)\n{\n0\n}\nELSE\n{\n1\n}' ! Definition

subvar.str (                        $_use_basic                   ) = 'IF($_mesh_flag == 204)\n{\n0\n}\nELSE\n{\n1\n}' ! Definition

subvar.str (                        $_k_PW                        ) = '1.0e9 N/m'             ! Definition

subvar.str (                        $_stage_length                ) = '$SVG_pinion.$SVG_pin.$_length + $SVG_shaft.$_length' ! Definition

subvar.str (                        $_stage_ratio                 ) = '$SVG_wheel.$_num_teeth/$SVG_pinion.$_num_teeth' ! Definition

subvar.str (                        $_switch_AIC                  ) = '0'                     ! Definition
subvar.discr.desc (       1 ,       $_switch_AIC                  ) = 'enabled'               ! Description of discrete values
subvar.discr.desc (       2 ,       $_switch_AIC                  ) = 'disabled'              ! Description of discrete values
subvar.discr.str (        1 ,       $_switch_AIC                  ) = '0'                     ! Discrete values
subvar.discr.str (        2 ,       $_switch_AIC                  ) = '1'                     ! Discrete values

subvargroup.begin (                 $SVG_pinion                   )                           ! $SVG_pinion
   subvar.str (                     $_num_teeth                   ) = '24'                    ! $SVG_pinion.$_num_teeth, Definition

   subvar.str (                     $_flank_width                 ) = '360.0 mm'              ! $SVG_pinion.$_flank_width, Definition

   subvar.str (                     $_shift_factor                ) = '0.480'                 ! $SVG_pinion.$_shift_factor, Definition

   subvar.str (                     $_bore_diameter               ) = '200.0 mm'              ! $SVG_pinion.$_bore_diameter, Definition

   subvar.str (                     $_helix_sign                  ) = '+1'                    ! $SVG_pinion.$_helix_sign, Definition

   subvar.str (                     $_x0                          ) = '$SVG_pinion.$SVG_pin.$_length/2.0' ! $SVG_pinion.$_x0, Definition

   subvar.str (                     $_angle_helix                 ) = '$SVG_pinion.$_helix_sign*$_helix_angle' ! $SVG_pinion.$_angle_helix, Definition

   subvargroup.begin (              $SVG_material                 )                           ! $SVG_pinion.$SVG_material
      subvar.str (                  $_density                     ) = '7830 kg/m^3'           ! $SVG_pinion.$SVG_material.$_density, Definition

      subvar.str (                  $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_pinion.$SVG_material.$_elasticity_modulus, Definition

      subvar.str (                  $_poissons_ratio              ) = '0.3'                   ! $SVG_pinion.$SVG_material.$_poissons_ratio, Definition

   subvargroup.end (                $SVG_material                 )                           ! $SVG_pinion.$SVG_material
   subvargroup.begin (              $SVG_bearing_A                )                           ! $SVG_pinion.$SVG_bearing_A
      subvar.str (                  $_x                           ) = '0.2*$SVG_pinion.$_flank_width' ! $SVG_pinion.$SVG_bearing_A.$_x, Definition

      subvar.str (                  $_k_x                         ) = '1.3e8 N/m'             ! $SVG_pinion.$SVG_bearing_A.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '8.2e8 N/m'             ! $SVG_pinion.$SVG_bearing_A.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '8.2e8 N/m'             ! $SVG_pinion.$SVG_bearing_A.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_pinion.$SVG_bearing_A.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.7e5 Nm/rad'          ! $SVG_pinion.$SVG_bearing_A.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '1.0e6 Nm/rad'          ! $SVG_pinion.$SVG_bearing_A.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_pinion.$SVG_bearing_A.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_A.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_A.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_pinion.$SVG_bearing_A.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_pinion.$SVG_bearing_A.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_pinion.$SVG_bearing_A.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_A                )                           ! $SVG_pinion.$SVG_bearing_A
   subvargroup.begin (              $SVG_bearing_B                )                           ! $SVG_pinion.$SVG_bearing_B
      subvar.str (                  $_x                           ) = '1.5*$SVG_pinion.$_flank_width' ! $SVG_pinion.$SVG_bearing_B.$_x, Definition

      subvar.str (                  $_k_x                         ) = '6.7e7 N/m'             ! $SVG_pinion.$SVG_bearing_B.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '8.0e8 N/m'             ! $SVG_pinion.$SVG_bearing_B.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '1.3e8 N/m'             ! $SVG_pinion.$SVG_bearing_B.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_pinion.$SVG_bearing_B.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.7e5 Nm/rad'          ! $SVG_pinion.$SVG_bearing_B.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '1.0e6 Nm/rad'          ! $SVG_pinion.$SVG_bearing_B.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_pinion.$SVG_bearing_B.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_B.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_B.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_pinion.$SVG_bearing_B.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_pinion.$SVG_bearing_B.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_pinion.$SVG_bearing_B.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_B                )                           ! $SVG_pinion.$SVG_bearing_B
   subvargroup.begin (              $SVG_bearing_C                )                           ! $SVG_pinion.$SVG_bearing_C
      subvar.str (                  $_x                           ) = '1.7*$SVG_pinion.$_flank_width' ! $SVG_pinion.$SVG_bearing_C.$_x, Definition

      subvar.str (                  $_k_x                         ) = '8.0e7 N/m'             ! $SVG_pinion.$SVG_bearing_C.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '1.0e9 N/m'             ! $SVG_pinion.$SVG_bearing_C.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '7.3e7 N/m'             ! $SVG_pinion.$SVG_bearing_C.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_pinion.$SVG_bearing_C.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.7e5 Nm/rad'          ! $SVG_pinion.$SVG_bearing_C.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '1.0e6 Nm/rad'          ! $SVG_pinion.$SVG_bearing_C.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_pinion.$SVG_bearing_C.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_C.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_pinion.$SVG_bearing_C.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_pinion.$SVG_bearing_C.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_pinion.$SVG_bearing_C.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_pinion.$SVG_bearing_C.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_C                )                           ! $SVG_pinion.$SVG_bearing_C
   subvargroup.begin (              $SVG_pin                      )                           ! $SVG_pinion.$SVG_pin
      subvar.str (                  $_length                      ) = '1.8*$SVG_pinion.$_flank_width' ! $SVG_pinion.$SVG_pin.$_length, Definition

      subvar.str (                  $_diameter                    ) = '$SVG_pinion.$_bore_diameter' ! $SVG_pinion.$SVG_pin.$_diameter, Definition

      subvar.str (                  $_x0                          ) = '$SVG_pinion.$SVG_pin.$_length/2.0' ! $SVG_pinion.$SVG_pin.$_x0, Definition

   subvargroup.end (                $SVG_pin                      )                           ! $SVG_pinion.$SVG_pin
subvargroup.end (                   $SVG_pinion                   )                           ! $SVG_pinion

subvargroup.begin (                 $SVG_wheel                    )                           ! $SVG_wheel
   subvar.str (                     $_num_teeth                   ) = '95'                    ! $SVG_wheel.$_num_teeth, Definition

   subvar.str (                     $_flank_width                 ) = '$SVG_pinion.$_flank_width' ! $SVG_wheel.$_flank_width, Definition

   subvar.str (                     $_shift_factor                ) = '0.669'                 ! $SVG_wheel.$_shift_factor, Definition

   subvar.str (                     $_bore_diameter               ) = '500.0 mm'              ! $SVG_wheel.$_bore_diameter, Definition

   subvar.str (                     $_helix_sign                  ) = '-1'                    ! $SVG_wheel.$_helix_sign, Definition

   subvar.str (                     $_x0                          ) = '$SVG_wheel.$SVG_pin.$_length/2.0' ! $SVG_wheel.$_x0, Definition

   subvar.str (                     $_angle_helix                 ) = '$SVG_wheel.$_helix_sign*$_helix_angle' ! $SVG_wheel.$_angle_helix, Definition

   subvargroup.begin (              $SVG_material                 )                           ! $SVG_wheel.$SVG_material
      subvar.str (                  $_density                     ) = '7830 kg/m^3'           ! $SVG_wheel.$SVG_material.$_density, Definition

      subvar.str (                  $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_wheel.$SVG_material.$_elasticity_modulus, Definition

      subvar.str (                  $_poissons_ratio              ) = '0.3'                   ! $SVG_wheel.$SVG_material.$_poissons_ratio, Definition

   subvargroup.end (                $SVG_material                 )                           ! $SVG_wheel.$SVG_material
   subvargroup.begin (              $SVG_bearing_A                )                           ! $SVG_wheel.$SVG_bearing_A
      subvar.str (                  $_x                           ) = '0.2*$SVG_wheel.$_flank_width' ! $SVG_wheel.$SVG_bearing_A.$_x, Definition

      subvar.str (                  $_k_x                         ) = '91016 N/m'             ! $SVG_wheel.$SVG_bearing_A.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '9.37E+9 N/m'           ! $SVG_wheel.$SVG_bearing_A.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '3.20E+9 N/m'           ! $SVG_wheel.$SVG_bearing_A.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_wheel.$SVG_bearing_A.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.39E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_A.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '4.45E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_A.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_wheel.$SVG_bearing_A.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_A.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_A.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_wheel.$SVG_bearing_A.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_wheel.$SVG_bearing_A.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_wheel.$SVG_bearing_A.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_A                )                           ! $SVG_wheel.$SVG_bearing_A
   subvargroup.begin (              $SVG_bearing_B                )                           ! $SVG_wheel.$SVG_bearing_B
      subvar.str (                  $_x                           ) = '1.5*$SVG_wheel.$_flank_width' ! $SVG_wheel.$SVG_bearing_B.$_x, Definition

      subvar.str (                  $_k_x                         ) = '91016 N/m'             ! $SVG_wheel.$SVG_bearing_B.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '9.37E+9 N/m'           ! $SVG_wheel.$SVG_bearing_B.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '3.20E+9 N/m'           ! $SVG_wheel.$SVG_bearing_B.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_wheel.$SVG_bearing_B.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.39E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_B.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '4.45E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_B.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_wheel.$SVG_bearing_B.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_B.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_B.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_wheel.$SVG_bearing_B.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_wheel.$SVG_bearing_B.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_wheel.$SVG_bearing_B.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_B                )                           ! $SVG_wheel.$SVG_bearing_B
   subvargroup.begin (              $SVG_bearing_C                )                           ! $SVG_wheel.$SVG_bearing_C
      subvar.str (                  $_x                           ) = '1.7*$SVG_wheel.$_flank_width' ! $SVG_wheel.$SVG_bearing_C.$_x, Definition

      subvar.str (                  $_k_x                         ) = '91016 N/m'             ! $SVG_wheel.$SVG_bearing_C.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '9.37E+9 N/m'           ! $SVG_wheel.$SVG_bearing_C.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '3.20E+9 N/m'           ! $SVG_wheel.$SVG_bearing_C.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_wheel.$SVG_bearing_C.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.39E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_C.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '4.45E+6 Nm/rad'        ! $SVG_wheel.$SVG_bearing_C.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_wheel.$SVG_bearing_C.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_C.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_wheel.$SVG_bearing_C.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_wheel.$SVG_bearing_C.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_wheel.$SVG_bearing_C.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_wheel.$SVG_bearing_C.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_C                )                           ! $SVG_wheel.$SVG_bearing_C
   subvargroup.begin (              $SVG_pin                      )                           ! $SVG_wheel.$SVG_pin
      subvar.str (                  $_length                      ) = '1.8*$SVG_wheel.$_flank_width' ! $SVG_wheel.$SVG_pin.$_length, Definition

      subvar.str (                  $_diameter                    ) = '$SVG_wheel.$_bore_diameter' ! $SVG_wheel.$SVG_pin.$_diameter, Definition

      subvar.str (                  $_x0                          ) = '$SVG_wheel.$SVG_pin.$_length/2.0' ! $SVG_wheel.$SVG_pin.$_x0, Definition

   subvargroup.end (                $SVG_pin                      )                           ! $SVG_wheel.$SVG_pin
subvargroup.end (                   $SVG_wheel                    )                           ! $SVG_wheel

subvargroup.begin (                 $SVG_shaft                    )                           ! $SVG_shaft
   subvar.str (                     $_length                      ) = '1000.0 mm'             ! $SVG_shaft.$_length, Definition

   subvar.str (                     $_diameter                    ) = '333.0 mm'              ! $SVG_shaft.$_diameter, Definition

   subvar.str (                     $_x0                          ) = '$SVG_shaft.$_length/2.0' ! $SVG_shaft.$_x0, Definition

   subvar.str (                     $_x_shaft                     ) = '$SVG_pinion.$SVG_pin.$_length' ! $SVG_shaft.$_x_shaft, Definition

subvargroup.end (                   $SVG_shaft                    )                           ! $SVG_shaft

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

marker.type (                       $M_Isys_input                 ) = 2                       ! Type
marker.parent (                     $M_Isys_input                 ) = $R_Isys                 ! Reference system
marker.pos (              2 ,       $M_Isys_input                 ) = $_center_distance       ! Position

marker.type (                       $M_Isys_wheel                 ) = 2                       ! Type
marker.parent (                     $M_Isys_wheel                 ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_wheel                 ) = 0.00000000000000000E+00 ! Position
marker.pos (              2 ,       $M_Isys_wheel                 ) = $_center_distance       ! Position

marker.type (                       $M_Isys_shaft                 ) = 2                       ! Type
marker.parent (                     $M_Isys_shaft                 ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_shaft                 ) = $SVG_shaft.$_x_shaft    ! Position

marker.type (                       $M_Isys_pinion_output         ) = 2                       ! Type
marker.parent (                     $M_Isys_pinion_output         ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_pinion_output         ) = $SVG_shaft.$_x0         ! Position

marker.type (                       $M_Isys_output                ) = 2                       ! Type
marker.parent (                     $M_Isys_output                ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_output                ) = $_stage_length          ! Position

marker.type (                       $M_Isys_pinion_bearing_A      ) = 2                       ! Type
marker.parent (                     $M_Isys_pinion_bearing_A      ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_pinion_bearing_A      ) = $SVG_pinion.$SVG_bearing_A.$_x ! Position

marker.type (                       $M_Isys_pinion_bearing_B      ) = 2                       ! Type
marker.parent (                     $M_Isys_pinion_bearing_B      ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_pinion_bearing_B      ) = $SVG_pinion.$SVG_bearing_B.$_x ! Position

marker.type (                       $M_Isys_pinion_bearing_C      ) = 2                       ! Type
marker.parent (                     $M_Isys_pinion_bearing_C      ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_pinion_bearing_C      ) = $SVG_pinion.$SVG_bearing_C.$_x ! Position

marker.type (                       $M_Isys_wheel_bearing_A       ) = 2                       ! Type
marker.parent (                     $M_Isys_wheel_bearing_A       ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_wheel_bearing_A       ) = $SVG_wheel.$SVG_bearing_A.$_x ! Position
marker.pos (              2 ,       $M_Isys_wheel_bearing_A       ) = $_center_distance       ! Position

marker.type (                       $M_Isys_wheel_bearing_B       ) = 2                       ! Type
marker.parent (                     $M_Isys_wheel_bearing_B       ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_wheel_bearing_B       ) = $SVG_wheel.$SVG_bearing_B.$_x ! Position
marker.pos (              2 ,       $M_Isys_wheel_bearing_B       ) = $_center_distance       ! Position

marker.type (                       $M_Isys_wheel_bearing_C       ) = 2                       ! Type
marker.parent (                     $M_Isys_wheel_bearing_C       ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_wheel_bearing_C       ) = $SVG_wheel.$SVG_bearing_C.$_x ! Position
marker.pos (              2 ,       $M_Isys_wheel_bearing_C       ) = $_center_distance       ! Position

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_shaft                      ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_shaft                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_shaft                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_shaft_BRF                  ) = 1                       ! Type
marker.parent (                     $M_shaft_BRF                  ) = $B_shaft                ! Body
marker.flx.type (                   $M_shaft_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_shaft_input                ) = 2                       ! Type
marker.parent (                     $M_shaft_input                ) = $B_shaft                ! Body

marker.type (                       $M_shaft_output               ) = 2                       ! Type
marker.parent (                     $M_shaft_output               ) = $B_shaft                ! Body
marker.pos (              1 ,       $M_shaft_output               ) = $SVG_shaft.$_length     ! Position

joint.from (                        $J_shaft                      ) = $M_Isys_shaft           ! From Marker
joint.to (                          $J_shaft                      ) = $M_shaft_BRF            ! To Marker
joint.type (                        $J_shaft                      ) = 15                      ! Type
joint.st.pos (            1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_shaft                      ) = -1.13658335554744777E-02 ! Position
joint.st.vel (            1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
joint.st.dep (            2 ,       $J_shaft                      ) = 0                       ! Dependency state
joint.st.dep (            3 ,       $J_shaft                      ) = 0                       ! Dependency state
joint.st.dep (            4 ,       $J_shaft                      ) = 0                       ! Dependency state
joint.st.dep (            5 ,       $J_shaft                      ) = 0                       ! Dependency state
joint.st.dep (            6 ,       $J_shaft                      ) = 0                       ! Dependency state
joint.st.equi (           1 ,       $J_shaft                      ) = 2                       ! Equilibrium
joint.par (               2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Rotation axis
joint.par (               3 ,       $J_shaft                      ) = $_switch_AIC            ! [-] Tilting
joint.par (               4 ,       $J_shaft                      ) = $_switch_AIC            ! [-] Translation in x
joint.par (               5 ,       $J_shaft                      ) = $_switch_AIC            ! [-] Translation in y
joint.par (               6 ,       $J_shaft                      ) = $_switch_AIC            ! [-] Translation in z

prim.type (                         $P_shaft                      ) = 2                       ! Type
prim.ref (                          $P_shaft                      ) = $M_shaft_BRF            ! Reference Marker
prim.pos (                1 ,       $P_shaft                      ) = $SVG_shaft.$_x0         ! Position
prim.ang (                3 ,       $P_shaft                      ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_shaft                      ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_shaft                      ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_shaft                      ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_shaft                      ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_shaft                      ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_shaft                      ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_shaft                      ) = $SVG_pinion.$SVG_material.$_density ! Density
prim.par (                2 ,       $P_shaft                      ) = $SVG_shaft.$_length     ! [m] Height
prim.par (                3 ,       $P_shaft                      ) = $SVG_shaft.$_diameter   ! [m] Outer diameter
prim.par (                4 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_shaft                      ) = $SVG_pinion.$_num_teeth ! [-] Number of planes
prim.par (                6 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


bodygroup.begin (                   $BG_pinion                    )                           ! $BG_pinion
   body.m (                         $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia

   marker.type (                    $M_pin_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_pin_BRF                    ) = $BG_pinion.$B_pin       ! Body
   marker.flx.type (                $M_pin_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_pin_input                  ) = 2                       ! Type
   marker.parent (                  $M_pin_input                  ) = $BG_pinion.$B_pin       ! Body

   marker.type (                    $M_pin_output                 ) = 2                       ! Type
   marker.parent (                  $M_pin_output                 ) = $BG_pinion.$B_pin       ! Body
   marker.pos (           1 ,       $M_pin_output                 ) = $SVG_pinion.$SVG_pin.$_length ! Position

   marker.type (                    $M_pin_bearing_A              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_A              ) = $BG_pinion.$B_pin       ! Body
   marker.pos (           1 ,       $M_pin_bearing_A              ) = $SVG_pinion.$SVG_bearing_A.$_x ! Position

   marker.type (                    $M_pin_bearing_B              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_B              ) = $BG_pinion.$B_pin       ! Body
   marker.pos (           1 ,       $M_pin_bearing_B              ) = $SVG_pinion.$SVG_bearing_B.$_x ! Position

   marker.type (                    $M_pin_bearing_C              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_C              ) = $BG_pinion.$B_pin       ! Body
   marker.pos (           1 ,       $M_pin_bearing_C              ) = $SVG_pinion.$SVG_bearing_C.$_x ! Position

   joint.from (                     $J_pin                        ) = $M_shaft_input          ! From Marker
   joint.to (                       $J_pin                        ) = $BG_pinion.$M_pin_output ! To Marker
   joint.type (                     $J_pin                        ) = 0                       ! Type
   joint.par (            1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_pin                        ) = 2                       ! Type
   prim.ref (                       $P_pin                        ) = $BG_pinion.$M_pin_BRF   ! Reference Marker
   prim.pos (             1 ,       $P_pin                        ) = $SVG_pinion.$_x0        ! Position
   prim.ang (             3 ,       $P_pin                        ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_pin                        ) = 2.21000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_pin                        ) = 2.48000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_pin                        ) = 2.07000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_pin                        ) = 1.42000000000000000E+02 ! Colors (green component)
   prim.color.b (         1 ,       $P_pin                        ) = 1.10000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_pin                        ) = 1.97000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.transparency (              $P_pin                        ) = 0.00000000000000000E+00 ! Transparency
   prim.mp.dens.solid (             $P_pin                        ) = $SVG_pinion.$SVG_material.$_density ! Density
   prim.par (             2 ,       $P_pin                        ) = $SVG_pinion.$SVG_pin.$_length ! [m] Height
   prim.par (             3 ,       $P_pin                        ) = $SVG_pinion.$SVG_pin.$_diameter ! [m] Outer diameter
   prim.par (             4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_pin                        ) = $SVG_pinion.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

   marker.type (                    $M_gear_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_gear_BRF                   ) = $BG_pinion.$B_gear      ! Body
   marker.flx.type (                $M_gear_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_gear_ref                   ) = 2                       ! Type
   marker.parent (                  $M_gear_ref                   ) = $BG_pinion.$B_gear      ! Body
   marker.pos (           1 ,       $M_gear_ref                   ) = $SVG_wheel.$_x0         ! Position
   marker.ang (           2 ,       $M_gear_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_gear                       ) = $BG_pinion.$M_pin_input ! From Marker
   joint.to (                       $J_gear                       ) = $BG_pinion.$M_gear_BRF  ! To Marker
   joint.type (                     $J_gear                       ) = 0                       ! Type
   joint.par (            1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_gear                       ) = 25                      ! Type
   prim.ref (                       $P_gear                       ) = $BG_pinion.$M_gear_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_gear                       ) = 2.31000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_gear                       ) = 2.48000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_gear                       ) = 4.90000000000000000E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_gear                       ) = 1.42000000000000000E+02 ! Colors (green component)
   prim.color.b (         1 ,       $P_gear                       ) = 5.10000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_gear                       ) = 1.97000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_gear                       ) = $SVG_pinion.$SVG_material.$_density ! Density
   prim.par (             2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_gear                       ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_gear                 ) = $_normal_module         ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_gear                 ) = $_pressure_angle        ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_gear                 ) = $SVG_pinion.$_shift_factor ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_gear                 ) = $SVG_pinion.$_angle_helix ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_gear           ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_gear           ) = $_normal_backlash       ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_gear                 ) = $SVG_pinion.$_num_teeth ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_gear                 ) = $SVG_pinion.$_flank_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_gear                       ) = $SVG_pinion.$_bore_diameter ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_gear                       ) = $SVG_pinion.$_num_teeth ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


bodygroup.end (                     $BG_pinion                    )                           ! $BG_pinion

bodygroup.begin (                   $BG_wheel                     )                           ! $BG_wheel
   body.m (                         $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.attr.2d.pos.x (             $B_pin                        ) = -3.00000000000000000E+01
   body.attr.2d.pos.y (             $B_pin                        ) = 3.00000000000000000E+01
   body.attr.2d.width (             $B_pin                        ) = 1.10000000000000000E+02
   body.attr.2d.height (            $B_pin                        ) = 8.00000000000000000E+01

   marker.type (                    $M_pin_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_pin_BRF                    ) = $BG_wheel.$B_pin        ! Body
   marker.flx.type (                $M_pin_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_pin_input                  ) = 2                       ! Type
   marker.parent (                  $M_pin_input                  ) = $BG_wheel.$B_pin        ! Body

   marker.type (                    $M_pin_bearing_A              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_A              ) = $BG_wheel.$B_pin        ! Body
   marker.pos (           1 ,       $M_pin_bearing_A              ) = $SVG_wheel.$SVG_bearing_A.$_x ! Position

   marker.type (                    $M_pin_bearing_B              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_B              ) = $BG_wheel.$B_pin        ! Body
   marker.pos (           1 ,       $M_pin_bearing_B              ) = $SVG_wheel.$SVG_bearing_B.$_x ! Position

   marker.type (                    $M_pin_bearing_C              ) = 2                       ! Type
   marker.parent (                  $M_pin_bearing_C              ) = $BG_wheel.$B_pin        ! Body
   marker.pos (           1 ,       $M_pin_bearing_C              ) = $SVG_wheel.$SVG_bearing_C.$_x ! Position

   joint.from (                     $J_pin                        ) = $M_Isys_wheel           ! From Marker
   joint.to (                       $J_pin                        ) = $BG_wheel.$M_pin_input  ! To Marker
   joint.type (                     $J_pin                        ) = 0                       ! Type
   joint.par (            1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_pin                        ) = 20
   joint.attr.2d.pos.y (   1 ,      $J_pin                        ) = 170
   joint.attr.2d.ori (    1 ,       $J_pin                        ) = 270
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_pin    ) = 20, 20
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_pin    ) = 210, 187
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_pin      ) = 20, 20
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_pin      ) = 110, 153

   prim.type (                      $P_pin                        ) = 2                       ! Type
   prim.ref (                       $P_pin                        ) = $BG_wheel.$M_pin_BRF    ! Reference Marker
   prim.pos (             1 ,       $P_pin                        ) = $SVG_wheel.$SVG_pin.$_x0 ! Position
   prim.ang (             3 ,       $P_pin                        ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_pin                        ) = 2.21000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_pin                        ) = 2.48000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_pin                        ) = 2.07000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_pin                        ) = 1.42000000000000000E+02 ! Colors (green component)
   prim.color.b (         1 ,       $P_pin                        ) = 1.10000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_pin                        ) = 1.97000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.transparency (              $P_pin                        ) = 0.00000000000000000E+00 ! Transparency
   prim.mp.dens.solid (             $P_pin                        ) = $SVG_wheel.$SVG_material.$_density ! Density
   prim.par (             2 ,       $P_pin                        ) = $SVG_wheel.$SVG_pin.$_length ! [m] Height
   prim.par (             3 ,       $P_pin                        ) = $SVG_wheel.$SVG_pin.$_diameter ! [m] Outer diameter
   prim.par (             4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_pin                        ) = $SVG_wheel.$_num_teeth  ! [-] Number of planes
   prim.par (             6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

   marker.type (                    $M_gear_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_gear_BRF                   ) = $BG_wheel.$B_gear       ! Body
   marker.flx.type (                $M_gear_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_gear_ref                   ) = 2                       ! Type
   marker.parent (                  $M_gear_ref                   ) = $BG_wheel.$B_gear       ! Body
   marker.pos (           1 ,       $M_gear_ref                   ) = $SVG_wheel.$_x0         ! Position
   marker.ang (           2 ,       $M_gear_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_gear                       ) = $BG_wheel.$M_pin_input  ! From Marker
   joint.to (                       $J_gear                       ) = $BG_wheel.$M_gear_BRF   ! To Marker
   joint.type (                     $J_gear                       ) = 0                       ! Type
   joint.par (            1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_gear                       ) = 25                      ! Type
   prim.ref (                       $P_gear                       ) = $BG_wheel.$M_gear_ref   ! Reference Marker
   prim.color.r (         1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
   prim.color.r (         2 ,       $P_gear                       ) = 2.48000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_gear                       ) = 1.39000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_gear                       ) = 1.42000000000000000E+02 ! Colors (green component)
   prim.color.b (         1 ,       $P_gear                       ) = 1.91000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_gear                       ) = 1.97000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_gear                       ) = $SVG_wheel.$SVG_material.$_density ! Density
   prim.par (             2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_gear                       ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_gear                 ) = $_normal_module         ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_gear                 ) = $_pressure_angle        ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_gear                 ) = $SVG_wheel.$_shift_factor ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_gear                 ) = $SVG_wheel.$_angle_helix ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_gear           ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_gear           ) = $_normal_backlash       ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_gear                 ) = $SVG_wheel.$_num_teeth  ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_gear                 ) = $SVG_wheel.$_flank_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_gear                       ) = $SVG_wheel.$_bore_diameter ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_gear                       ) = $SVG_wheel.$_num_teeth  ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


bodygroup.end (                     $BG_wheel                     )                           ! $BG_wheel

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_pinion_wheel               ) = 225                     ! Type
force.from (                        $F_pinion_wheel               ) = $M_Isys                 ! From Marker
force.to (                          $F_pinion_wheel               ) = $M_Isys                 ! To Marker
force.disabled (                    $F_pinion_wheel               ) = $_use_advanced          ! Disabled
force.par (               1 ,       $F_pinion_wheel               ) = $BG_pinion.$P_gear      ! [-] Geometry (Gear 1)
force.par (               2 ,       $F_pinion_wheel               ) = $BG_wheel.$P_gear       ! [-] Geometry (Gear 2)
force.par (               3 ,       $F_pinion_wheel               ) = 2.00000000000000000E+00 ! [-] Output
force.par (               4 ,       $F_pinion_wheel               ) = 7.00000000000000000E+00 ! [-] Advanced Output
force.par (               6 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Damping model
force.par (               7 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Friction model
force.par (               8 ,       $F_pinion_wheel               ) = 5.00000000000000000E+00 ! [-] Number of slices
force.par (              10 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Gear blank factor
force.par (              11 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
force.par (              12 ,       $F_pinion_wheel               ) = $_tooth_stiffness_ratio ! [-] Teeth stiffness ratio
force.par (              13 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
force.par (              14 ,       $F_pinion_wheel               ) = $Mat_pinion             ! [-] Material (Gear 1)
force.par (              15 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
force.par (              16 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
force.par (              17 ,       $F_pinion_wheel               ) = $Mat_wheel              ! [-] Material (Gear 2)
force.par (              18 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
force.par (              19 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
force.par (              21 ,       $F_pinion_wheel               ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
force.par (              22 ,       $F_pinion_wheel               ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
force.par (              24 ,       $F_pinion_wheel               ) = $_x0_full_damping       ! [m] Full damping starts at
force.par (              31 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Friction coefficient
force.par (              32 ,       $F_pinion_wheel               ) = $_regularization_vel    ! [m/s] Regularization velocity
force.par (              41 ,       $F_pinion_wheel               ) = ''                      ! [-] Node set (Gear 1)
force.par (              42 ,       $F_pinion_wheel               ) = ''                      ! [-] Node set (Gear 2)
force.par (              44 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
force.par (              50 ,       $F_pinion_wheel               ) = null                    ! [-] Measured stiffness (plot only)
force.par (              51 ,       $F_pinion_wheel               ) = null                    ! [-] Measured TE (plot only)
force.par (              52 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
force.par (              53 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
force.plot.par (          1 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 , $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 , $F_pinion_wheel         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   1 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   2 , $F_pinion_wheel   ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   3 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   4 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   5 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   6 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   7 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   8 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   2 ,   1 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

force.type (                        $F_pinion_wheel_basic         ) = 204                     ! Type
force.from (                        $F_pinion_wheel_basic         ) = $BG_pinion.$M_gear_ref  ! From Marker
force.to (                          $F_pinion_wheel_basic         ) = $BG_wheel.$M_gear_ref   ! To Marker
force.disabled (                    $F_pinion_wheel_basic         ) = $_use_basic             ! Disabled
force.par (               2 ,       $F_pinion_wheel_basic         ) = 0.00000000000000000E+00 ! [-] Gear type
force.par (               3 ,       $F_pinion_wheel_basic         ) = 2.00000000000000000E+00 ! [-] Modeling approach
force.par (               5 ,       $F_pinion_wheel_basic         ) = 1.00000000000000000E+00 ! [-] Geometry input mode
force.par (               6 ,       $F_pinion_wheel_basic         ) = $BG_pinion.$P_gear      ! [-] Geometry Gear 1
force.par (               7 ,       $F_pinion_wheel_basic         ) = $BG_wheel.$P_gear       ! [-] Geometry Gear 2
force.par (              31 ,       $F_pinion_wheel_basic         ) = 0.00000000000000000E+00 ! [-] Stiffness method
force.par (              32 ,       $F_pinion_wheel_basic         ) = $_k_PW                  ! [N/m] Stiffness constant
force.par (              35 ,       $F_pinion_wheel_basic         ) = $_tooth_damping         ! [Ns/m] Damping constant
force.par (              36 ,       $F_pinion_wheel_basic         ) = $_x0_full_damping       ! [m] Damping transition depth
force.par (              40 ,       $F_pinion_wheel_basic         ) = 0.00000000000000000E+00 ! [-] Power loss input mode
force.plot.par (          1 ,       $F_pinion_wheel_basic         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 , $F_pinion_wheel_basic         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 , $F_pinion_wheel_basic   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   1 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   2 , $F_pinion_wheel_basic) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   3 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   4 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   5 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   6 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   7 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   1 ,   8 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
force.plot.par (          1 ,   1 ,   2 ,   1 , $F_pinion_wheel_basic) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

forcegroup.begin (                  $FEG_pinion_bearing           )                           ! $FEG_pinion_bearing
   force.type (                     $F_A                          ) = 43                      ! Type
   force.from (                     $F_A                          ) = $M_Isys_pinion_bearing_A ! From Marker
   force.to (                       $F_A                          ) = $BG_pinion.$M_pin_bearing_A ! To Marker
   force.par (            1 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_A                          ) = $SVG_pinion.$SVG_bearing_A.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_A                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_A                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_A                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_A                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_A                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_A                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_A                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_A                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_A                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_A                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_A                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_A                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_A                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_A                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_A                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_A                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_A                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_A                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_A                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_A                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_A                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_B                          ) = 43                      ! Type
   force.from (                     $F_B                          ) = $M_Isys_pinion_bearing_B ! From Marker
   force.to (                       $F_B                          ) = $BG_pinion.$M_pin_bearing_B ! To Marker
   force.par (            1 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_B                          ) = $SVG_pinion.$SVG_bearing_B.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_B                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_B                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_B                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_B                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_B                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_B                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_B                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_B                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_B                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_B                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_B                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_B                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_B                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_B                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_B                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_B                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_B                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_B                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_B                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_B                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_B                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_C                          ) = 43                      ! Type
   force.from (                     $F_C                          ) = $M_Isys_pinion_bearing_C ! From Marker
   force.to (                       $F_C                          ) = $BG_pinion.$M_pin_bearing_C ! To Marker
   force.par (            1 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_C                          ) = $SVG_pinion.$SVG_bearing_C.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_C                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_C                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_C                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_C                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_C                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_C                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_C                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_C                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_C                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_C                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_C                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_C                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_C                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_C                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_C                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_C                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_C                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_C                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_C                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_C                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_C                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

forcegroup.end (                    $FEG_pinion_bearing           )                           ! $FEG_pinion_bearing

forcegroup.begin (                  $FEG_wheel_bearing            )                           ! $FEG_wheel_bearing
   force.type (                     $F_A                          ) = 43                      ! Type
   force.from (                     $F_A                          ) = $M_Isys_wheel_bearing_A ! From Marker
   force.to (                       $F_A                          ) = $BG_wheel.$M_pin_bearing_A ! To Marker
   force.par (            1 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_A                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_A                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_A                          ) = $SVG_wheel.$SVG_bearing_A.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_A                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_A                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_A                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_A                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_A                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_A                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_A                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_A                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_A                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_A                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_A                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_A                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_A                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_A                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_A                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_A                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_A                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_A                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_A                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_A                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_A                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_A                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_A                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_B                          ) = 43                      ! Type
   force.from (                     $F_B                          ) = $M_Isys_wheel_bearing_B ! From Marker
   force.to (                       $F_B                          ) = $BG_wheel.$M_pin_bearing_B ! To Marker
   force.par (            1 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_B                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_B                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_B                          ) = $SVG_wheel.$SVG_bearing_B.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_B                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_B                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_B                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_B                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_B                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_B                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_B                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_B                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_B                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_B                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_B                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_B                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_B                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_B                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_B                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_B                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_B                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_B                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_B                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_B                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_B                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_B                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_B                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_C                          ) = 43                      ! Type
   force.from (                     $F_C                          ) = $M_Isys_wheel_bearing_C ! From Marker
   force.to (                       $F_C                          ) = $BG_wheel.$M_pin_bearing_C ! To Marker
   force.par (            1 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_C                          ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_C                          ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_k_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_C                          ) = $SVG_wheel.$SVG_bearing_C.$_d_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_C                          ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_C                          ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_C                          ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_C                          ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_C                          ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_C                          ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_C                          ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_C                          ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_C                          ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_C                          ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_C                          ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_C                          ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_C                          ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_C                          ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_C                          ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_C                          ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_C                          ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_C                          ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_C                          ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_C                          ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_C                          ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_C                          ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_C                          ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

forcegroup.end (                    $FEG_wheel_bearing            )                           ! $FEG_wheel_bearing

!**********************************************************************
! Initial Conditions
!**********************************************************************
inicon.type (                       $IC_pinion_wheel              ) = 12                      ! Type
inicon.disabled (                   $IC_pinion_wheel              ) = $_use_advanced          ! Disabled
inicon.par (              1 ,       $IC_pinion_wheel              ) = 0.00000000000000000E+00 ! [-] General
inicon.par (              1 ,   1 ,   1 , $IC_pinion_wheel        ) = 0.00000000000000000E+00 ! [-] Interface type
inicon.par (              1 ,   1 ,   2 , $IC_pinion_wheel        ) = $F_pinion_wheel         ! [-] Gear Force Element
inicon.par (              2 ,       $IC_pinion_wheel              ) = 0.00000000000000000E+00 ! [-] Configuration
inicon.par (              2 ,   1 , $IC_pinion_wheel              ) = 0.00000000000000000E+00 ! [-] Condition
inicon.par (              2 ,   2 , $IC_pinion_wheel              ) = 1.00000000000000000E+00 ! [-] Tooth matching

!**********************************************************************
! Y Output
!**********************************************************************
yout.type (                         $Y_sigma_H_PW                 ) = 12                      ! Type
yout.par (                1 ,       $Y_sigma_H_PW                 ) = $F_pinion_wheel         ! [-] Force/Control Element
yout.par (                2 ,       $Y_sigma_H_PW                 ) = 6.00000000000000000E+01 ! [-] Output Value

yout.type (                         $Y_speed_PW                   ) = 14                      ! Type
yout.par (                1 ,       $Y_speed_PW                   ) = $J_shaft                ! [-] Connection/Joint
yout.par (                2 ,       $Y_speed_PW                   ) = 0.00000000000000000E+00 ! [-] State

youtgroup.begin (                   $YOG_pinion_bearing           )                           ! $YOG_pinion_bearing
   youtgroup.begin (                $YOG_A                        )                           ! $YOG_pinion_bearing.$YOG_A
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_pinion_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_pinion_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_pinion_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_pinion_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_A                        )                           ! $YOG_pinion_bearing.$YOG_A
   youtgroup.begin (                $YOG_B                        )                           ! $YOG_pinion_bearing.$YOG_B
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_pinion_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_pinion_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_pinion_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_pinion_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_B                        )                           ! $YOG_pinion_bearing.$YOG_B
   youtgroup.begin (                $YOG_C                        )                           ! $YOG_pinion_bearing.$YOG_C
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_pinion_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_pinion_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_pinion_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_pinion_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_C                        )                           ! $YOG_pinion_bearing.$YOG_C
youtgroup.end (                     $YOG_pinion_bearing           )                           ! $YOG_pinion_bearing

youtgroup.begin (                   $YOG_wheel_bearing            )                           ! $YOG_wheel_bearing
   youtgroup.begin (                $YOG_A                        )                           ! $YOG_wheel_bearing.$YOG_A
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_wheel_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_wheel_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_wheel_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_wheel_bearing.$F_A ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_A                        )                           ! $YOG_wheel_bearing.$YOG_A
   youtgroup.begin (                $YOG_B                        )                           ! $YOG_wheel_bearing.$YOG_B
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_wheel_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_wheel_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_wheel_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_wheel_bearing.$F_B ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_B                        )                           ! $YOG_wheel_bearing.$YOG_B
   youtgroup.begin (                $YOG_C                        )                           ! $YOG_wheel_bearing.$YOG_C
      yout.type (                   $Y_x                          ) = 12                      ! Type
      yout.disabled (               $Y_x                          ) = 0                       ! Disabled
      yout.par (          1 ,       $Y_x                          ) = $FEG_wheel_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_x                          ) = 0.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_y                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_wheel_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_z                          ) = 12                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_wheel_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Output Value

      yout.type (                   $Y_speed                      ) = 12                      ! Type
      yout.par (          1 ,       $Y_speed                      ) = $FEG_wheel_bearing.$F_C ! [-] Force/Control Element
      yout.par (          2 ,       $Y_speed                      ) = 1.70000000000000000E+01 ! [-] Output Value

   youtgroup.end (                  $YOG_C                        )                           ! $YOG_wheel_bearing.$YOG_C
youtgroup.end (                     $YOG_wheel_bearing            )                           ! $YOG_wheel_bearing

!**********************************************************************
! Result Elements
!**********************************************************************
result.container (                  $RS_pinion_wheel              ) = null                    ! Parent result element
result.type (                       $RS_pinion_wheel              ) = 22                      ! Type
result.par (              1 ,       $RS_pinion_wheel              ) = 4.00000000000000000E+00 ! [-] Number of Result channels
result.channel.indep.ele (   1 ,    $RS_pinion_wheel              ) = null                    ! Independent channel element
result.channel.par (      1 ,   1 , $RS_pinion_wheel              ) = 6.00000000000000000E+00 ! [-] Kind
result.channel.par (      2 ,   1 , $RS_pinion_wheel              ) = $F_pinion_wheel         ! [-] Force/Control Element
result.channel.par (      3 ,   1 , $RS_pinion_wheel              ) = 2.00000000000000000E+01 ! [-] Output Value
result.channel.par (      4 ,   1 , $RS_pinion_wheel              ) = 2.00000000000000000E+00 ! [-] Value selection

!**********************************************************************
! Senders
!**********************************************************************
sender.ref (                        $COM_shaft_length             ) = $SVG_shaft.$_length     ! Source object

sender.ref (                        $COM_shaft_diameter           ) = $SVG_shaft.$_diameter   ! Source object

sender.ref (                        $COM_M_Isys_shaft             ) = $M_Isys_shaft           ! Source object

sender.ref (                        $COM_stage_ratio              ) = $_stage_ratio           ! Source object

sender.ref (                        $COM_length                   ) = $_stage_length          ! Source object

!**********************************************************************
! Receivers
!**********************************************************************
receiver.ref (                      $COM_normal_module            ) = $_normal_module         ! Destination object
receiver.priolist (       1 ,       $COM_normal_module            ) = '$COM_stage_01_normal_module' ! Sender priority list
receiver.priolist (       2 ,       $COM_normal_module            ) = '$COM_stage_02_normal_module' ! Sender priority list
receiver.priolist (       3 ,       $COM_normal_module            ) = '$COM_stage_03_normal_module' ! Sender priority list
receiver.override (                 $COM_normal_module            ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_pressure_angle           ) = $_pressure_angle        ! Destination object
receiver.priolist (       1 ,       $COM_pressure_angle           ) = '$COM_stage_01_pressure_angle' ! Sender priority list
receiver.priolist (       2 ,       $COM_pressure_angle           ) = '$COM_stage_02_pressure_angle' ! Sender priority list
receiver.priolist (       3 ,       $COM_pressure_angle           ) = '$COM_stage_03_pressure_angle' ! Sender priority list
receiver.override (                 $COM_pressure_angle           ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_helix_angle              ) = $_helix_angle           ! Destination object
receiver.priolist (       1 ,       $COM_helix_angle              ) = '$COM_stage_01_helix_angle' ! Sender priority list
receiver.priolist (       2 ,       $COM_helix_angle              ) = '$COM_stage_02_helix_angle' ! Sender priority list
receiver.priolist (       3 ,       $COM_helix_angle              ) = '$COM_stage_03_helix_angle' ! Sender priority list
receiver.override (                 $COM_helix_angle              ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_normal_backlash          ) = $_normal_backlash       ! Destination object
receiver.priolist (       1 ,       $COM_normal_backlash          ) = '$COM_stage_01_normal_backlash' ! Sender priority list
receiver.priolist (       2 ,       $COM_normal_backlash          ) = '$COM_stage_02_normal_backlash' ! Sender priority list
receiver.priolist (       3 ,       $COM_normal_backlash          ) = '$COM_stage_03_normal_backlash' ! Sender priority list
receiver.override (                 $COM_normal_backlash          ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_tooth_damping            ) = $_tooth_damping         ! Destination object
receiver.priolist (       1 ,       $COM_tooth_damping            ) = '$COM_stage_01_tooth_damping' ! Sender priority list
receiver.priolist (       2 ,       $COM_tooth_damping            ) = '$COM_stage_02_tooth_damping' ! Sender priority list
receiver.priolist (       3 ,       $COM_tooth_damping            ) = '$COM_stage_03_tooth_damping' ! Sender priority list
receiver.override (                 $COM_tooth_damping            ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_tooth_stiffness_ratio    ) = $_tooth_stiffness_ratio ! Destination object
receiver.override (                 $COM_tooth_stiffness_ratio    ) = { 0 }                   ! Override index

receiver.ref (                      $COM_x0_full_damping          ) = $_x0_full_damping       ! Destination object
receiver.override (                 $COM_x0_full_damping          ) = { 0 }                   ! Override index

receiver.ref (                      $COM_regularization_vel       ) = $_regularization_vel    ! Destination object
receiver.override (                 $COM_regularization_vel       ) = { 0 }                   ! Override index

receiver.ref (                      $COM_mesh_flag                ) = $_mesh_flag             ! Destination object
receiver.override (                 $COM_mesh_flag                ) = { 0 }                   ! Override index

receiver.ref (                      $COM_k_PW                     ) = $_k_PW                  ! Destination object
receiver.priolist (       1 ,       $COM_k_PW                     ) = '$COM_stage_01_k_PW'    ! Sender priority list
receiver.priolist (       2 ,       $COM_k_PW                     ) = '$COM_stage_02_k_PW'    ! Sender priority list
receiver.priolist (       3 ,       $COM_k_PW                     ) = '$COM_stage_03_k_PW'    ! Sender priority list
receiver.override (                 $COM_k_PW                     ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_switch_AIC               ) = $_switch_AIC            ! Destination object

receivergroup.begin (               $RG_marker                    )                           ! $RG_marker
   receiver.ref (                   $COM_pinion_output            ) = $M_Isys_pinion_output   ! Destination object
   receiver.priolist (    1 ,       $COM_pinion_output            ) = '$COM_shaft_input'      ! Sender priority list

   receiver.ref (                   $COM_pinion_bearing_A         ) = $M_Isys_pinion_bearing_A ! Destination object
   receiver.priolist (    1 ,       $COM_pinion_bearing_A         ) = '$COM_stage_01_PA'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_pinion_bearing_A         ) = '$COM_stage_02_PA'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_pinion_bearing_A         ) = '$COM_stage_03_PA'      ! Sender priority list
   receiver.override (              $COM_pinion_bearing_A         ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_pinion_bearing_B         ) = $M_Isys_pinion_bearing_B ! Destination object
   receiver.priolist (    1 ,       $COM_pinion_bearing_B         ) = '$COM_stage_01_PB'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_pinion_bearing_B         ) = '$COM_stage_02_PB'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_pinion_bearing_B         ) = '$COM_stage_03_PB'      ! Sender priority list
   receiver.override (              $COM_pinion_bearing_B         ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_pinion_bearing_C         ) = $M_Isys_pinion_bearing_C ! Destination object
   receiver.priolist (    1 ,       $COM_pinion_bearing_C         ) = '$COM_stage_01_PC'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_pinion_bearing_C         ) = '$COM_stage_02_PC'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_pinion_bearing_C         ) = '$COM_stage_03_PC'      ! Sender priority list
   receiver.override (              $COM_pinion_bearing_C         ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_wheel_bearing_A          ) = $M_Isys_wheel_bearing_A ! Destination object
   receiver.priolist (    1 ,       $COM_wheel_bearing_A          ) = '$COM_stage_01_WA'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_wheel_bearing_A          ) = '$COM_stage_02_WA'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_wheel_bearing_A          ) = '$COM_stage_03_WA'      ! Sender priority list
   receiver.override (              $COM_wheel_bearing_A          ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_wheel_bearing_B          ) = $M_Isys_wheel_bearing_B ! Destination object
   receiver.priolist (    1 ,       $COM_wheel_bearing_B          ) = '$COM_stage_01_WB'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_wheel_bearing_B          ) = '$COM_stage_02_WB'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_wheel_bearing_B          ) = '$COM_stage_03_WB'      ! Sender priority list
   receiver.override (              $COM_wheel_bearing_B          ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_wheel_bearing_C          ) = $M_Isys_wheel_bearing_C ! Destination object
   receiver.priolist (    1 ,       $COM_wheel_bearing_C          ) = '$COM_stage_01_WC'      ! Sender priority list
   receiver.priolist (    2 ,       $COM_wheel_bearing_C          ) = '$COM_stage_02_WC'      ! Sender priority list
   receiver.priolist (    3 ,       $COM_wheel_bearing_C          ) = '$COM_stage_03_WC'      ! Sender priority list
   receiver.override (              $COM_wheel_bearing_C          ) = { SUBSTR_ID(1) }        ! Override index

receivergroup.end (                 $RG_marker                    )                           ! $RG_marker

receivergroup.begin (               $RG_pinion                    )                           ! $RG_pinion
   receiver.ref (                   $COM_num_teeth                ) = $SVG_pinion.$_num_teeth ! Destination object
   receiver.priolist (    1 ,       $COM_num_teeth                ) = '$COM_stage_01_pinion_num_teeth' ! Sender priority list
   receiver.priolist (    2 ,       $COM_num_teeth                ) = '$COM_stage_02_pinion_num_teeth' ! Sender priority list
   receiver.priolist (    3 ,       $COM_num_teeth                ) = '$COM_stage_03_pinion_num_teeth' ! Sender priority list
   receiver.override (              $COM_num_teeth                ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_flank_width              ) = $SVG_pinion.$_flank_width ! Destination object
   receiver.priolist (    1 ,       $COM_flank_width              ) = '$COM_stage_01_pinion_flank_width' ! Sender priority list
   receiver.priolist (    2 ,       $COM_flank_width              ) = '$COM_stage_02_pinion_flank_width' ! Sender priority list
   receiver.priolist (    3 ,       $COM_flank_width              ) = '$COM_stage_03_pinion_flank_width' ! Sender priority list
   receiver.override (              $COM_flank_width              ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_shift_factor             ) = $SVG_pinion.$_shift_factor ! Destination object
   receiver.priolist (    1 ,       $COM_shift_factor             ) = '$COM_stage_01_pinion_shift_factor' ! Sender priority list
   receiver.priolist (    2 ,       $COM_shift_factor             ) = '$COM_stage_02_pinion_shift_factor' ! Sender priority list
   receiver.priolist (    3 ,       $COM_shift_factor             ) = '$COM_stage_03_pinion_shift_factor' ! Sender priority list
   receiver.override (              $COM_shift_factor             ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_bore_diameter            ) = $SVG_pinion.$_bore_diameter ! Destination object
   receiver.priolist (    1 ,       $COM_bore_diameter            ) = '$COM_stage_01_pinion_bore_diameter' ! Sender priority list
   receiver.priolist (    2 ,       $COM_bore_diameter            ) = '$COM_stage_02_pinion_bore_diameter' ! Sender priority list
   receiver.priolist (    3 ,       $COM_bore_diameter            ) = '$COM_stage_03_pinion_bore_diameter' ! Sender priority list
   receiver.override (              $COM_bore_diameter            ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_helix_sign               ) = $SVG_pinion.$_helix_sign ! Destination object
   receiver.priolist (    1 ,       $COM_helix_sign               ) = '$COM_stage_01_pinion_helix_sign' ! Sender priority list
   receiver.priolist (    2 ,       $COM_helix_sign               ) = '$COM_stage_02_pinion_helix_sign' ! Sender priority list
   receiver.priolist (    3 ,       $COM_helix_sign               ) = '$COM_stage_03_pinion_helix_sign' ! Sender priority list
   receiver.override (              $COM_helix_sign               ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.begin (            $RG_bearing_A                 )                           ! $RG_pinion.$RG_bearing_A
      receiver.ref (                $COM_k_x                      ) = $SVG_pinion.$SVG_bearing_A.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_pinion_A_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_pinion_A_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_pinion_A_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_pinion.$SVG_bearing_A.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_pinion_A_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_pinion_A_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_pinion_A_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_pinion.$SVG_bearing_A.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_pinion_A_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_pinion_A_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_pinion_A_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_pinion.$SVG_bearing_A.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_pinion_A_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_pinion_A_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_pinion_A_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_pinion.$SVG_bearing_A.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_pinion_A_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_pinion_A_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_pinion_A_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_pinion.$SVG_bearing_A.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_pinion_A_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_pinion_A_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_pinion_A_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_pinion.$SVG_bearing_A.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_pinion_A_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_pinion_A_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_pinion_A_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_pinion.$SVG_bearing_A.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_pinion_A_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_pinion_A_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_pinion_A_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_pinion.$SVG_bearing_A.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_pinion_A_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_pinion_A_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_pinion_A_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_pinion.$SVG_bearing_A.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_pinion_A_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_pinion_A_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_pinion_A_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_pinion.$SVG_bearing_A.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_pinion_A_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_pinion_A_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_pinion_A_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_pinion.$SVG_bearing_A.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_pinion_A_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_pinion_A_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_pinion_A_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_A                 )                           ! $RG_pinion.$RG_bearing_A
   receivergroup.begin (            $RG_bearing_B                 )                           ! $RG_pinion.$RG_bearing_B
      receiver.ref (                $COM_k_x                      ) = $SVG_pinion.$SVG_bearing_B.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_pinion_B_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_pinion_B_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_pinion_B_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_pinion.$SVG_bearing_B.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_pinion_B_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_pinion_B_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_pinion_B_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_pinion.$SVG_bearing_B.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_pinion_B_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_pinion_B_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_pinion_B_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_pinion.$SVG_bearing_B.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_pinion_B_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_pinion_B_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_pinion_B_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_pinion.$SVG_bearing_B.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_pinion_B_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_pinion_B_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_pinion_B_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_pinion.$SVG_bearing_B.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_pinion_B_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_pinion_B_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_pinion_B_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_pinion.$SVG_bearing_B.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_pinion_B_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_pinion_B_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_pinion_B_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_pinion.$SVG_bearing_B.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_pinion_B_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_pinion_B_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_pinion_B_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_pinion.$SVG_bearing_B.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_pinion_B_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_pinion_B_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_pinion_B_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_pinion.$SVG_bearing_B.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_pinion_B_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_pinion_B_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_pinion_B_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_pinion.$SVG_bearing_B.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_pinion_B_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_pinion_B_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_pinion_B_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_pinion.$SVG_bearing_B.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_pinion_B_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_pinion_B_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_pinion_B_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_B                 )                           ! $RG_pinion.$RG_bearing_B
   receivergroup.begin (            $RG_bearing_C                 )                           ! $RG_pinion.$RG_bearing_C
      receiver.ref (                $COM_k_x                      ) = $SVG_pinion.$SVG_bearing_C.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_pinion_C_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_pinion_C_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_pinion_C_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_pinion.$SVG_bearing_C.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_pinion_C_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_pinion_C_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_pinion_C_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_pinion.$SVG_bearing_C.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_pinion_C_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_pinion_C_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_pinion_C_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_pinion.$SVG_bearing_C.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_pinion_C_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_pinion_C_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_pinion_C_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_pinion.$SVG_bearing_C.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_pinion_C_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_pinion_C_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_pinion_C_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_pinion.$SVG_bearing_C.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_pinion_C_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_pinion_C_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_pinion_C_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_pinion.$SVG_bearing_C.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_pinion_C_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_pinion_C_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_pinion_C_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_pinion.$SVG_bearing_C.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_pinion_C_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_pinion_C_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_pinion_C_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_pinion.$SVG_bearing_C.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_pinion_C_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_pinion_C_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_pinion_C_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_pinion.$SVG_bearing_C.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_pinion_C_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_pinion_C_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_pinion_C_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_pinion.$SVG_bearing_C.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_pinion_C_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_pinion_C_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_pinion_C_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_pinion.$SVG_bearing_C.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_pinion_C_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_pinion_C_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_pinion_C_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_C                 )                           ! $RG_pinion.$RG_bearing_C
   receivergroup.begin (            $RG_material                  )                           ! $RG_pinion.$RG_material
      receiver.ref (                $COM_density                  ) = $SVG_pinion.$SVG_material.$_density ! Destination object
      receiver.priolist (   1 ,     $COM_density                  ) = '$COM_stage_01_pinion_density' ! Sender priority list
      receiver.priolist (   2 ,     $COM_density                  ) = '$COM_stage_02_pinion_density' ! Sender priority list
      receiver.priolist (   3 ,     $COM_density                  ) = '$COM_stage_03_pinion_density' ! Sender priority list
      receiver.override (           $COM_density                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_elasticity_modulus       ) = $SVG_pinion.$SVG_material.$_elasticity_modulus ! Destination object
      receiver.priolist (   1 ,     $COM_elasticity_modulus       ) = '$COM_stage_01_pinion_elasticity_modulus' ! Sender priority list
      receiver.priolist (   2 ,     $COM_elasticity_modulus       ) = '$COM_stage_02_pinion_elasticity_modulus' ! Sender priority list
      receiver.priolist (   3 ,     $COM_elasticity_modulus       ) = '$COM_stage_03_pinion_elasticity_modulus' ! Sender priority list
      receiver.override (           $COM_elasticity_modulus       ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_poissons_ratio           ) = $SVG_pinion.$SVG_material.$_poissons_ratio ! Destination object
      receiver.priolist (   1 ,     $COM_poissons_ratio           ) = '$COM_stage_01_pinion_poissons_ratio' ! Sender priority list
      receiver.priolist (   2 ,     $COM_poissons_ratio           ) = '$COM_stage_02_pinion_poissons_ratio' ! Sender priority list
      receiver.priolist (   3 ,     $COM_poissons_ratio           ) = '$COM_stage_03_pinion_poissons_ratio' ! Sender priority list
      receiver.override (           $COM_poissons_ratio           ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_material                  )                           ! $RG_pinion.$RG_material
receivergroup.end (                 $RG_pinion                    )                           ! $RG_pinion

receivergroup.begin (               $RG_wheel                     )                           ! $RG_wheel
   receiver.ref (                   $COM_num_teeth                ) = $SVG_wheel.$_num_teeth  ! Destination object
   receiver.priolist (    1 ,       $COM_num_teeth                ) = '$COM_stage_01_wheel_num_teeth' ! Sender priority list
   receiver.priolist (    2 ,       $COM_num_teeth                ) = '$COM_stage_02_wheel_num_teeth' ! Sender priority list
   receiver.priolist (    3 ,       $COM_num_teeth                ) = '$COM_stage_03_wheel_num_teeth' ! Sender priority list
   receiver.override (              $COM_num_teeth                ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_flank_width              ) = $SVG_wheel.$_flank_width ! Destination object
   receiver.priolist (    1 ,       $COM_flank_width              ) = '$COM_stage_01_wheel_flank_width' ! Sender priority list
   receiver.priolist (    2 ,       $COM_flank_width              ) = '$COM_stage_02_wheel_flank_width' ! Sender priority list
   receiver.priolist (    3 ,       $COM_flank_width              ) = '$COM_stage_03_wheel_flank_width' ! Sender priority list
   receiver.override (              $COM_flank_width              ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_shift_factor             ) = $SVG_wheel.$_shift_factor ! Destination object
   receiver.priolist (    1 ,       $COM_shift_factor             ) = '$COM_stage_01_wheel_shift_factor' ! Sender priority list
   receiver.priolist (    2 ,       $COM_shift_factor             ) = '$COM_stage_02_wheel_shift_factor' ! Sender priority list
   receiver.priolist (    3 ,       $COM_shift_factor             ) = '$COM_stage_03_wheel_shift_factor' ! Sender priority list
   receiver.override (              $COM_shift_factor             ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_bore_diameter            ) = $SVG_wheel.$_bore_diameter ! Destination object
   receiver.priolist (    1 ,       $COM_bore_diameter            ) = '$COM_stage_01_wheel_bore_diameter' ! Sender priority list
   receiver.priolist (    2 ,       $COM_bore_diameter            ) = '$COM_stage_02_wheel_bore_diameter' ! Sender priority list
   receiver.priolist (    3 ,       $COM_bore_diameter            ) = '$COM_stage_03_wheel_bore_diameter' ! Sender priority list
   receiver.override (              $COM_bore_diameter            ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_helix_sign               ) = $SVG_wheel.$_helix_sign ! Destination object
   receiver.priolist (    1 ,       $COM_helix_sign               ) = '$COM_stage_01_wheel_helix_sign' ! Sender priority list
   receiver.priolist (    2 ,       $COM_helix_sign               ) = '$COM_stage_02_wheel_helix_sign' ! Sender priority list
   receiver.priolist (    3 ,       $COM_helix_sign               ) = '$COM_stage_03_wheel_helix_sign' ! Sender priority list
   receiver.override (              $COM_helix_sign               ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.begin (            $RG_bearing_A                 )                           ! $RG_wheel.$RG_bearing_A
      receiver.ref (                $COM_k_x                      ) = $SVG_wheel.$SVG_bearing_A.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_wheel_A_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_wheel_A_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_wheel_A_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_wheel.$SVG_bearing_A.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_wheel_A_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_wheel_A_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_wheel_A_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_wheel.$SVG_bearing_A.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_wheel_A_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_wheel_A_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_wheel_A_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_wheel.$SVG_bearing_A.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_wheel_A_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_wheel_A_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_wheel_A_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_wheel.$SVG_bearing_A.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_wheel_A_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_wheel_A_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_wheel_A_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_wheel.$SVG_bearing_A.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_wheel_A_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_wheel_A_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_wheel_A_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_wheel.$SVG_bearing_A.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_wheel_A_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_wheel_A_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_wheel_A_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_wheel.$SVG_bearing_A.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_wheel_A_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_wheel_A_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_wheel_A_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_wheel.$SVG_bearing_A.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_wheel_A_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_wheel_A_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_wheel_A_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_wheel.$SVG_bearing_A.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_wheel_A_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_wheel_A_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_wheel_A_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_wheel.$SVG_bearing_A.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_wheel_A_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_wheel_A_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_wheel_A_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_wheel.$SVG_bearing_A.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_wheel_A_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_wheel_A_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_wheel_A_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_A                 )                           ! $RG_wheel.$RG_bearing_A
   receivergroup.begin (            $RG_bearing_B                 )                           ! $RG_wheel.$RG_bearing_B
      receiver.ref (                $COM_k_x                      ) = $SVG_wheel.$SVG_bearing_B.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_wheel_B_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_wheel_B_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_wheel_B_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_wheel.$SVG_bearing_B.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_wheel_B_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_wheel_B_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_wheel_B_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_wheel.$SVG_bearing_B.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_wheel_B_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_wheel_B_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_wheel_B_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_wheel.$SVG_bearing_B.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_wheel_B_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_wheel_B_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_wheel_B_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_wheel.$SVG_bearing_B.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_wheel_B_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_wheel_B_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_wheel_B_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_wheel.$SVG_bearing_B.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_wheel_B_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_wheel_B_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_wheel_B_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_wheel.$SVG_bearing_B.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_wheel_B_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_wheel_B_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_wheel_B_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_wheel.$SVG_bearing_B.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_wheel_B_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_wheel_B_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_wheel_B_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_wheel.$SVG_bearing_B.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_wheel_B_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_wheel_B_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_wheel_B_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_wheel.$SVG_bearing_B.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_wheel_B_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_wheel_B_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_wheel_B_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_wheel.$SVG_bearing_B.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_wheel_B_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_wheel_B_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_wheel_B_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_wheel.$SVG_bearing_B.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_wheel_B_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_wheel_B_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_wheel_B_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_B                 )                           ! $RG_wheel.$RG_bearing_B
   receivergroup.begin (            $RG_bearing_C                 )                           ! $RG_wheel.$RG_bearing_C
      receiver.ref (                $COM_k_x                      ) = $SVG_wheel.$SVG_bearing_C.$_k_x ! Destination object
      receiver.priolist (   1 ,     $COM_k_x                      ) = '$COM_stage_01_wheel_C_k_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_x                      ) = '$COM_stage_02_wheel_C_k_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_x                      ) = '$COM_stage_03_wheel_C_k_x' ! Sender priority list
      receiver.override (           $COM_k_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_y                      ) = $SVG_wheel.$SVG_bearing_C.$_k_y ! Destination object
      receiver.priolist (   1 ,     $COM_k_y                      ) = '$COM_stage_01_wheel_C_k_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_y                      ) = '$COM_stage_02_wheel_C_k_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_y                      ) = '$COM_stage_03_wheel_C_k_y' ! Sender priority list
      receiver.override (           $COM_k_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_z                      ) = $SVG_wheel.$SVG_bearing_C.$_k_z ! Destination object
      receiver.priolist (   1 ,     $COM_k_z                      ) = '$COM_stage_01_wheel_C_k_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_z                      ) = '$COM_stage_02_wheel_C_k_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_z                      ) = '$COM_stage_03_wheel_C_k_z' ! Sender priority list
      receiver.override (           $COM_k_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_alpha                  ) = $SVG_wheel.$SVG_bearing_C.$_k_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_k_alpha                  ) = '$COM_stage_01_wheel_C_k_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_alpha                  ) = '$COM_stage_02_wheel_C_k_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_alpha                  ) = '$COM_stage_03_wheel_C_k_alpha' ! Sender priority list
      receiver.override (           $COM_k_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_beta                   ) = $SVG_wheel.$SVG_bearing_C.$_k_beta ! Destination object
      receiver.priolist (   1 ,     $COM_k_beta                   ) = '$COM_stage_01_wheel_C_k_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_beta                   ) = '$COM_stage_02_wheel_C_k_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_beta                   ) = '$COM_stage_03_wheel_C_k_beta' ! Sender priority list
      receiver.override (           $COM_k_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_k_gamma                  ) = $SVG_wheel.$SVG_bearing_C.$_k_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_k_gamma                  ) = '$COM_stage_01_wheel_C_k_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_k_gamma                  ) = '$COM_stage_02_wheel_C_k_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_k_gamma                  ) = '$COM_stage_03_wheel_C_k_gamma' ! Sender priority list
      receiver.override (           $COM_k_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_x                      ) = $SVG_wheel.$SVG_bearing_C.$_d_x ! Destination object
      receiver.priolist (   1 ,     $COM_d_x                      ) = '$COM_stage_01_wheel_C_d_x' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_x                      ) = '$COM_stage_02_wheel_C_d_x' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_x                      ) = '$COM_stage_03_wheel_C_d_x' ! Sender priority list
      receiver.override (           $COM_d_x                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_y                      ) = $SVG_wheel.$SVG_bearing_C.$_d_y ! Destination object
      receiver.priolist (   1 ,     $COM_d_y                      ) = '$COM_stage_01_wheel_C_d_y' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_y                      ) = '$COM_stage_02_wheel_C_d_y' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_y                      ) = '$COM_stage_03_wheel_C_d_y' ! Sender priority list
      receiver.override (           $COM_d_y                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_z                      ) = $SVG_wheel.$SVG_bearing_C.$_d_z ! Destination object
      receiver.priolist (   1 ,     $COM_d_z                      ) = '$COM_stage_01_wheel_C_d_z' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_z                      ) = '$COM_stage_02_wheel_C_d_z' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_z                      ) = '$COM_stage_03_wheel_C_d_z' ! Sender priority list
      receiver.override (           $COM_d_z                      ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_alpha                  ) = $SVG_wheel.$SVG_bearing_C.$_d_alpha ! Destination object
      receiver.priolist (   1 ,     $COM_d_alpha                  ) = '$COM_stage_01_wheel_C_d_alpha' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_alpha                  ) = '$COM_stage_02_wheel_C_d_alpha' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_alpha                  ) = '$COM_stage_03_wheel_C_d_alpha' ! Sender priority list
      receiver.override (           $COM_d_alpha                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_beta                   ) = $SVG_wheel.$SVG_bearing_C.$_d_beta ! Destination object
      receiver.priolist (   1 ,     $COM_d_beta                   ) = '$COM_stage_01_wheel_C_d_beta' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_beta                   ) = '$COM_stage_02_wheel_C_d_beta' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_beta                   ) = '$COM_stage_03_wheel_C_d_beta' ! Sender priority list
      receiver.override (           $COM_d_beta                   ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_d_gamma                  ) = $SVG_wheel.$SVG_bearing_C.$_d_gamma ! Destination object
      receiver.priolist (   1 ,     $COM_d_gamma                  ) = '$COM_stage_01_wheel_C_d_gamma' ! Sender priority list
      receiver.priolist (   2 ,     $COM_d_gamma                  ) = '$COM_stage_02_wheel_C_d_gamma' ! Sender priority list
      receiver.priolist (   3 ,     $COM_d_gamma                  ) = '$COM_stage_03_wheel_C_d_gamma' ! Sender priority list
      receiver.override (           $COM_d_gamma                  ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_bearing_C                 )                           ! $RG_wheel.$RG_bearing_C
   receivergroup.begin (            $RG_material                  )                           ! $RG_wheel.$RG_material
      receiver.ref (                $COM_density                  ) = $SVG_wheel.$SVG_material.$_density ! Destination object
      receiver.priolist (   1 ,     $COM_density                  ) = '$COM_stage_01_wheel_density' ! Sender priority list
      receiver.priolist (   2 ,     $COM_density                  ) = '$COM_stage_02_wheel_density' ! Sender priority list
      receiver.priolist (   3 ,     $COM_density                  ) = '$COM_stage_03_wheel_density' ! Sender priority list
      receiver.override (           $COM_density                  ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_elasticity_modulus       ) = $SVG_wheel.$SVG_material.$_elasticity_modulus ! Destination object
      receiver.priolist (   1 ,     $COM_elasticity_modulus       ) = '$COM_stage_01_wheel_elasticity_modulus' ! Sender priority list
      receiver.priolist (   2 ,     $COM_elasticity_modulus       ) = '$COM_stage_02_wheel_elasticity_modulus' ! Sender priority list
      receiver.priolist (   3 ,     $COM_elasticity_modulus       ) = '$COM_stage_03_wheel_elasticity_modulus' ! Sender priority list
      receiver.override (           $COM_elasticity_modulus       ) = { SUBSTR_ID(1) }        ! Override index

      receiver.ref (                $COM_poissons_ratio           ) = $SVG_wheel.$SVG_material.$_poissons_ratio ! Destination object
      receiver.priolist (   1 ,     $COM_poissons_ratio           ) = '$COM_stage_01_wheel_poissons_ratio' ! Sender priority list
      receiver.priolist (   2 ,     $COM_poissons_ratio           ) = '$COM_stage_02_wheel_poissons_ratio' ! Sender priority list
      receiver.priolist (   3 ,     $COM_poissons_ratio           ) = '$COM_stage_03_wheel_poissons_ratio' ! Sender priority list
      receiver.override (           $COM_poissons_ratio           ) = { SUBSTR_ID(1) }        ! Override index

   receivergroup.end (              $RG_material                  )                           ! $RG_wheel.$RG_material
receivergroup.end (                 $RG_wheel                     )                           ! $RG_wheel

receivergroup.begin (               $RG_shaft                     )                           ! $RG_shaft
   receiver.ref (                   $COM_length                   ) = $SVG_shaft.$_length     ! Destination object
   receiver.priolist (    1 ,       $COM_length                   ) = '$COM_stage_01_shaft_length' ! Sender priority list
   receiver.priolist (    2 ,       $COM_length                   ) = '$COM_stage_02_shaft_length' ! Sender priority list
   receiver.priolist (    3 ,       $COM_length                   ) = '$COM_stage_03_shaft_length' ! Sender priority list
   receiver.override (              $COM_length                   ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_diameter                 ) = $SVG_shaft.$_diameter   ! Destination object
   receiver.priolist (    1 ,       $COM_diameter                 ) = '$COM_stage_01_shaft_diameter' ! Sender priority list
   receiver.priolist (    2 ,       $COM_diameter                 ) = '$COM_stage_02_shaft_diameter' ! Sender priority list
   receiver.priolist (    3 ,       $COM_diameter                 ) = '$COM_stage_03_shaft_diameter' ! Sender priority list
   receiver.override (              $COM_diameter                 ) = { SUBSTR_ID(1) }        ! Override index

receivergroup.end (                 $RG_shaft                     )                           ! $RG_shaft

!**********************************************************************
! Materials
!**********************************************************************
material.type (                     $Mat_pinion                   ) = 1                       ! Type
material.par (            2 ,       $Mat_pinion                   ) = $SVG_pinion.$SVG_material.$_density ! [kg/m³] Density
material.par (            3 ,       $Mat_pinion                   ) = 0.00000000000000000E+00 ! [-] Input mode
material.par (            4 ,       $Mat_pinion                   ) = $SVG_pinion.$SVG_material.$_elasticity_modulus ! [Pa] Young's modulus
material.par (            5 ,       $Mat_pinion                   ) = $SVG_pinion.$SVG_material.$_poissons_ratio ! [-] Poisson's ratio
material.par (            6 ,       $Mat_pinion                   ) = 8.07692307692307739E+10 ! [Pa] Shear modulus

material.type (                     $Mat_wheel                    ) = 1                       ! Type
material.par (            2 ,       $Mat_wheel                    ) = $SVG_wheel.$SVG_material.$_density ! [kg/m³] Density
material.par (            3 ,       $Mat_wheel                    ) = 0.00000000000000000E+00 ! [-] Input mode
material.par (            4 ,       $Mat_wheel                    ) = $SVG_wheel.$SVG_material.$_elasticity_modulus ! [Pa] Young's modulus
material.par (            5 ,       $Mat_wheel                    ) = $SVG_wheel.$SVG_material.$_poissons_ratio ! [-] Poisson's ratio
material.par (            6 ,       $Mat_wheel                    ) = 8.07692307692307739E+10 ! [Pa] Shear modulus

                                                                                                                                                                    
