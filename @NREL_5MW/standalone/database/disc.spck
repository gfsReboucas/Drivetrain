!file.version=3.5! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210000
version.desc   = ''
version.build  = 101

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
glob.slv.error.mode                                                 = 2                       ! Solver termination due to errors and warnings
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 4.26511001586914063E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -2.86668491363525391E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 2.70119047164916992E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.00578582286834717E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = -1.63600016385316849E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 1.88090875744819641E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 8.44852149486541748E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 5.12937736511230469E+00 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 9.11822700500488281E+00 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -5.98319292068481445E+00 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 5.31449127197265625E+00 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 4.65368509292602539E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.09595575928688049E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.64639437198638916E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 8.18210124969482422E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Ortho                      ) = 1.37513680383563042E-02 ! Front clipping plane value
view.bclip.value (                  $V_Ortho                      ) = 1.37513675689697266E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = 5.00000000000000000E+01 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.atol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 0                       ! OUTPUT_PATH_PAR_TYPE
slv.output.mat.enabled (            $SLV_SolverSettings           ) = 1                       ! mat file generation 0 = disable; 1 = enable
slv.output.eva.enabled (            $SLV_SolverSettings           ) = 1                       ! eva file generation 0 = disable; 1 = enable
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.output.fileinlining.enabled (   $SLV_SolverSettings           ) = 0                       ! file inlining 0 = disable; 1 = enable
slv.compat.solver (                 $SLV_SolverSettings           ) = 1                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.ev.force.handling (             $SLV_SolverSettings           ) = 1                       ! Force Elements
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvargroup.begin (                 $SVG_disc                     )                           ! $SVG_disc
   subvar.str (                     $_mass                        ) = '110.0e3 kg\n'          ! $SVG_disc.$_mass, Definition

   subvar.str (                     $_mass_mom_inertia            ) = '57231535.0 kg m^2\n'   ! $SVG_disc.$_mass_mom_inertia, Definition

   subvar.str (                     $_diameter                    ) = '840.0 mm'              ! $SVG_disc.$_diameter, Definition

   subvar.str (                     $_length                      ) = '250.0 mm'              ! $SVG_disc.$_length, Definition

subvargroup.end (                   $SVG_disc                     )                           ! $SVG_disc

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_disc                       ) = $SVG_disc.$_mass        ! Mass of the Body
body.cg.pos (             1 ,       $B_disc                       ) = { $SVG_disc.$_length/2.0 } ! Center of gravity
body.I.tens (             1 ,   1 , $B_disc                       ) = $SVG_disc.$_mass_mom_inertia ! Moments of inertia
body.I.tens (             2 ,   2 , $B_disc                       ) = { $SVG_disc.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.tens (             3 ,   3 , $B_disc                       ) = { $SVG_disc.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.kind (                       $B_disc                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_disc                       ) = -2.00000000000000000E+02
body.attr.2d.pos.y (                $B_disc                       ) = -2.40000000000000000E+02
body.attr.2d.width (                $B_disc                       ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_disc                       ) = 3.00000000000000000E+01

marker.type (                       $M_disc_BRF                   ) = 1                       ! Type
marker.parent (                     $M_disc_BRF                   ) = $B_disc                 ! Body
marker.flx.type (                   $M_disc_BRF                   ) = 4                       ! Flexible type

marker.type (                       $M_disc_input                 ) = 1                       ! Type
marker.parent (                     $M_disc_input                 ) = $B_disc                 ! Body
marker.flx.type (                   $M_disc_input                 ) = 4                       ! Flexible type

marker.type (                       $M_disc_output                ) = 2                       ! Type
marker.parent (                     $M_disc_output                ) = $B_disc                 ! Body
marker.pos (              1 ,       $M_disc_output                ) = $SVG_disc.$_length      ! Position

joint.from (                        $J_disc                       ) = $M_Isys                 ! From Marker
joint.to (                          $J_disc                       ) = $M_disc_output          ! To Marker
joint.type (                        $J_disc                       ) = 0                       ! Type
joint.par (               1 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_disc                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_disc                       ) = -70
joint.attr.2d.pos.y (     1 ,       $J_disc                       ) = -230
joint.attr.2d.ori (       1 ,       $J_disc                       ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_disc      ) = 340, 340, 330, 320, 310, 300, 300, 300, 300, 300, 300, 300, 300, -53
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_disc      ) = 180, -65, -65, -65, -65, -65, -75, -85, -95, -105, -115, -125, -230, -230
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_disc        ) = -150, -87
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_disc        ) = -230, -230

prim.type (                         $P_disc                       ) = 2                       ! Type
prim.ref (                          $P_disc                       ) = $M_disc_BRF             ! Reference Marker
prim.pos (                1 ,       $P_disc                       ) = { $SVG_disc.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_disc                       ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_disc                       ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_disc                       ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_disc                       ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_disc                       ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_disc                       ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_disc                       ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_disc                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_disc                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_disc                       ) = $SVG_disc.$_length      ! [m] Height
prim.par (                3 ,       $P_disc                       ) = $SVG_disc.$_diameter    ! [m] Outer diameter
prim.par (                4 ,       $P_disc                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_disc                       ) = 3.00000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_disc                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_disc                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_disc                       ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_disc                       ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_disc                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_disc                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


!**********************************************************************
! Receivers
!**********************************************************************
receiver.ref (                      $COM_mass                     ) = $SVG_disc.$_mass        ! Destination object
receiver.priolist (       1 ,       $COM_mass                     ) = '$COM_rotor_mass'       ! Sender priority list
receiver.priolist (       2 ,       $COM_mass                     ) = '$COM_generator_mass'   ! Sender priority list
receiver.override (                 $COM_mass                     ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_mass_mom_inertia         ) = $SVG_disc.$_mass_mom_inertia ! Destination object
receiver.priolist (       1 ,       $COM_mass_mom_inertia         ) = '$COM_rotor_mass_mom_inertia' ! Sender priority list
receiver.priolist (       2 ,       $COM_mass_mom_inertia         ) = '$COM_generator_mass_mom_inertia' ! Sender priority list
receiver.override (                 $COM_mass_mom_inertia         ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_diameter                 ) = $SVG_disc.$_diameter    ! Destination object
receiver.priolist (       1 ,       $COM_diameter                 ) = '$COM_rotor_diameter'   ! Sender priority list
receiver.priolist (       2 ,       $COM_diameter                 ) = '$COM_generator_diameter' ! Sender priority list
receiver.override (                 $COM_diameter                 ) = { SUBSTR_ID(1) }        ! Override index

receiver.ref (                      $COM_length                   ) = $SVG_disc.$_length      ! Destination object
receiver.priolist (       1 ,       $COM_length                   ) = '$COM_rotor_length'     ! Sender priority list
receiver.priolist (       2 ,       $COM_length                   ) = '$COM_generator_length' ! Sender priority list
receiver.override (                 $COM_length                   ) = { SUBSTR_ID(1) }        ! Override index

                                                                                                                                                                    
