!file.version=3.5! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210000
version.desc   = ''
version.build  = 101

!**********************************************************************
!  Global parameters
!**********************************************************************
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
glob.slv.error.mode                                                 = 2                       ! Solver termination due to errors and warnings
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 6.98273241519927979E-01 ! Position
view.pos (                2 ,       $V_WorkingView                ) = 1.77867519855499268E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 1.65950047969818115E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = -3.88093054294586182E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 1.50307267904281616E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = -8.12297090888023376E-02 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 9.05645191669464111E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 3.20163536071777344E+00 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 2 s }                 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.ev.force.handling (             $SLV_SolverSettings           ) = 1                       ! Force Elements
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_normal_module               ) = '45.0 mm'               ! Definition

subvar.str (                        $_pressure_angle              ) = '20.0 deg'              ! Definition

subvar.str (                        $_helix_angle                 ) = '0.0 deg'               ! Definition

subvar.str (                        $_normal_backlash             ) = '0.40 mm'               ! Definition

subvargroup.begin (                 $SVG_sun                      )                           ! $SVG_sun
   subvar.str (                     $_num_teeth                   ) = '19'                    ! $SVG_sun.$_num_teeth, Definition

   subvar.str (                     $_flank_width                 ) = '491.0 mm'              ! $SVG_sun.$_flank_width, Definition

   subvar.str (                     $_shift_factor                ) = '0.617'                 ! $SVG_sun.$_shift_factor, Definition

   subvar.str (                     $_bore_diameter               ) = '400.0 mm'              ! $SVG_sun.$_bore_diameter, Definition

   subvar.str (                     $_helix_sign                  ) = '+1'                    ! $SVG_sun.$_helix_sign, Definition

   subvar.str (                     $_addendum_type               ) = '0'                     ! $SVG_sun.$_addendum_type, Definition
   subvar.discr.desc (    1 ,       $_addendum_type               ) = 'coefficient'           ! Description of discrete values
   subvar.discr.desc (    2 ,       $_addendum_type               ) = 'height'                ! Description of discrete values
   subvar.discr.desc (    3 ,       $_addendum_type               ) = 'diameter'              ! Description of discrete values
   subvar.discr.str (     1 ,       $_addendum_type               ) = '0'                     ! Discrete values
   subvar.discr.str (     2 ,       $_addendum_type               ) = '1'                     ! Discrete values
   subvar.discr.str (     3 ,       $_addendum_type               ) = '2'                     ! Discrete values

   subvar.str (                     $_addendum_val                ) = '1.0'                   ! $SVG_sun.$_addendum_val, Definition

   subvar.str (                     $_dedendum_val                ) = '1.25'                  ! $SVG_sun.$_dedendum_val, Definition

   subvar.str (                     $_angle_helix                 ) = '$_helix_angle*$SVG_sun.$_helix_sign' ! $SVG_sun.$_angle_helix, Definition

   subvar.str (                     $_x0                          ) = '$SVG_sun.$_flank_width/2.0' ! $SVG_sun.$_x0, Definition

subvargroup.end (                   $SVG_sun                      )                           ! $SVG_sun

subvargroup.begin (                 $SVG_material                 )                           ! $SVG_material
   subvar.str (                     $_density                     ) = '7830 kg/m^3'           ! $SVG_material.$_density, Definition

   subvar.str (                     $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_material.$_elasticity_modulus, Definition

   subvar.str (                     $_poissons_ratio              ) = '0.3'                   ! $SVG_material.$_poissons_ratio, Definition

subvargroup.end (                   $SVG_material                 )                           ! $SVG_material

subvargroup.begin (                 $SVG_pin                      )                           ! $SVG_pin
   subvar.str (                     $_length                      ) = '2.0*$SVG_sun.$_flank_width - 0.6*$SVG_planet.$_width' ! $SVG_pin.$_length, Definition

   subvar.str (                     $_diameter                    ) = '$SVG_sun.$_bore_diameter' ! $SVG_pin.$_diameter, Definition

   subvar.str (                     $_x0                          ) = '$SVG_pin.$_length/2.0' ! $SVG_pin.$_x0, Definition

subvargroup.end (                   $SVG_pin                      )                           ! $SVG_pin

subvargroup.begin (                 $SVG_planet                   )                           ! $SVG_planet
   subvar.str (                     $_width                       ) = '491.0 mm'              ! $SVG_planet.$_width, Definition

subvargroup.end (                   $SVG_planet                   )                           ! $SVG_planet

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

marker.type (                       $M_Isys_shaft                 ) = 2                       ! Type
marker.parent (                     $M_Isys_shaft                 ) = $R_Isys                 ! Reference system
marker.pos (              1 ,       $M_Isys_shaft                 ) = $SVG_pin.$_length       ! Position
marker.ang (              2 ,       $M_Isys_shaft                 ) = 0.00000000000000000E+00 ! Angles
marker.txt (                        $M_Isys_shaft                 ) = 'Created because the BRF marker of any Body including Isys may not be altered by Communicators.[br]See: Tutorials and Examples \\> Communicators \\> Communicating markers \\> Communication via Explicit Name of Sender and Receiver[br][br]' ! Comment

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_sun                        ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_sun_BRF                    ) = 1                       ! Type
marker.parent (                     $M_sun_BRF                    ) = $B_sun                  ! Body
marker.flx.type (                   $M_sun_BRF                    ) = 4                       ! Flexible type

marker.type (                       $M_sun_ref                    ) = 2                       ! Type
marker.parent (                     $M_sun_ref                    ) = $B_sun                  ! Body
marker.pos (              1 ,       $M_sun_ref                    ) = $SVG_sun.$_x0           ! Position
marker.ang (              2 ,       $M_sun_ref                    ) = { 90 deg }              ! Angles

marker.type (                       $M_sun_pin                    ) = 2                       ! Type
marker.parent (                     $M_sun_pin                    ) = $B_sun                  ! Body

joint.from (                        $J_sun                        ) = $M_pin_sun              ! From Marker
joint.to (                          $J_sun                        ) = $M_sun_pin              ! To Marker
joint.type (                        $J_sun                        ) = 0                       ! Type
joint.par (               1 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_sun                        ) = 25                      ! Type
prim.ref (                          $P_sun                        ) = $M_sun_ref              ! Reference Marker
prim.color.r (            1 ,       $P_sun                        ) = 2.31000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_sun                        ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_sun                        ) = 4.90000000000000000E+01 ! Colors (green component)
prim.color.g (            2 ,       $P_sun                        ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_sun                        ) = 5.10000000000000000E+01 ! Colors (blue component)
prim.color.b (            2 ,       $P_sun                        ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_sun                        ) = $SVG_material.$_density ! Density
prim.par (                2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
prim.par (                2 ,   1 , $P_sun                        ) = 3.00000000000000000E+00 ! [-] Type
prim.par (                2 ,   2 , $P_sun                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
prim.par (                2 ,   3 ,   1 , $P_sun                  ) = $_normal_module         ! [m] Normal module
prim.par (                2 ,   3 ,   2 , $P_sun                  ) = $_pressure_angle        ! [rad] Normal pressure angle
prim.par (                2 ,   3 ,   3 , $P_sun                  ) = $SVG_sun.$_shift_factor ! [-] Shift factor
prim.par (                2 ,   3 ,   4 , $P_sun                  ) = $SVG_sun.$_angle_helix  ! [rad] Helix angle
prim.par (                2 ,   3 ,   5 , $P_sun                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
prim.par (                2 ,   3 ,   6 ,   1 , $P_sun            ) = $SVG_sun.$_addendum_type ! [-] Type
prim.par (                2 ,   3 ,   6 ,   2 , $P_sun            ) = $SVG_sun.$_addendum_val ! [-] Addendum value
prim.par (                2 ,   3 ,   6 ,   3 , $P_sun            ) = $SVG_sun.$_dedendum_val ! [-] Dedendum value
prim.par (                2 ,   3 ,   7 ,   1 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Type
prim.par (                2 ,   3 ,   7 ,   2 , $P_sun            ) = $_normal_backlash       ! [m] Value
prim.par (                2 ,   3 ,   8 , $P_sun                  ) = $SVG_sun.$_num_teeth    ! [-] Number of teeth
prim.par (                2 ,   3 ,   9 , $P_sun                  ) = $SVG_sun.$_flank_width  ! [m] Flank width
prim.par (                2 ,   4 ,   1 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Method
prim.par (                2 ,   4 ,   1 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
prim.par (                2 ,   4 ,   1 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
prim.par (                2 ,   4 ,   1 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
prim.par (                2 ,   4 ,   1 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
prim.par (                2 ,   4 ,   1 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
prim.par (                2 ,   4 ,   1 ,   9 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Wheel face width
prim.par (                2 ,   4 ,   1 ,  11 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
prim.par (                2 ,   4 ,   1 ,  12 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Cutter radius
prim.par (                2 ,   4 ,   2 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
prim.par (                2 ,   4 ,   2 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
prim.par (                2 ,   4 ,   2 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
prim.par (                2 ,   4 ,   2 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
prim.par (                2 ,   4 ,   2 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
prim.par (                2 ,   4 ,   2 ,   7 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
prim.par (                2 ,   4 ,   2 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
prim.par (                2 ,   4 ,   2 ,  13 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Backlash
prim.par (                2 ,   4 ,   2 ,  13 ,   1 , $P_sun      ) = 0.00000000000000000E+00 ! [-] Type
prim.par (                2 ,   4 ,   2 ,  13 ,   2 , $P_sun      ) = 0.00000000000000000E+00 ! [m] Value
prim.par (                2 ,   4 ,   2 ,  14 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
prim.par (                2 ,   4 ,   2 ,  15 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
prim.par (                3 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Graphical representation
prim.par (                3 ,   1 , $P_sun                        ) = $SVG_sun.$_bore_diameter ! [m] Bore Diameter
prim.par (                3 ,   3 , $P_sun                        ) = $SVG_sun.$_num_teeth    ! [-] Number of visible teeth
prim.par (                3 ,   4 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
prim.par (                3 ,   5 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Tip discretisation
prim.par (                3 ,   6 , $P_sun                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
prim.par (                3 ,   7 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
prim.par (                3 ,   8 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
prim.par (                3 ,   9 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
prim.par (                4 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile modification
prim.par (                4 ,   1 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Scale factor
prim.par (                4 ,   2 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   2 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   3 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
prim.par (                4 ,   4 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
prim.par (                4 ,   4 ,   2 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
prim.par (                5 ,   1 , $P_sun                        ) = 0.00000000000000000E+00 ! [-] Type


body.m (                            $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_pin_BRF                    ) = 1                       ! Type
marker.parent (                     $M_pin_BRF                    ) = $B_pin                  ! Body
marker.flx.type (                   $M_pin_BRF                    ) = 4                       ! Flexible type

marker.type (                       $M_pin_sun                    ) = 2                       ! Type
marker.parent (                     $M_pin_sun                    ) = $B_pin                  ! Body

marker.type (                       $M_pin_shaft                  ) = 2                       ! Type
marker.parent (                     $M_pin_shaft                  ) = $B_pin                  ! Body
marker.pos (              1 ,       $M_pin_shaft                  ) = $SVG_pin.$_length       ! Position

joint.from (                        $J_pin                        ) = $M_Isys_shaft           ! From Marker
joint.to (                          $J_pin                        ) = $M_pin_shaft            ! To Marker
joint.type (                        $J_pin                        ) = 0                       ! Type
joint.par (               1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_pin                        ) = 2                       ! Type
prim.ref (                          $P_pin                        ) = $M_pin_BRF              ! Reference Marker
prim.pos (                1 ,       $P_pin                        ) = $SVG_pin.$_x0           ! Position
prim.ang (                3 ,       $P_pin                        ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_pin                        ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_pin                        ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_pin                        ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_pin                        ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_pin                        ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_pin                        ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_pin                        ) = $SVG_material.$_density ! Density
prim.par (                2 ,       $P_pin                        ) = $SVG_pin.$_length       ! [m] Height
prim.par (                3 ,       $P_pin                        ) = $SVG_pin.$_diameter     ! [m] Outer diameter
prim.par (                4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_pin                        ) = $SVG_sun.$_num_teeth    ! [-] Number of planes
prim.par (                6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


!**********************************************************************
! Receivers
!**********************************************************************
receiver.ref (                      $COM_normal_module            ) = $_normal_module         ! Destination object
receiver.priolist (       1 ,       $COM_normal_module            ) = '$COM_stage_01_normal_module' ! Sender priority list
receiver.priolist (       2 ,       $COM_normal_module            ) = '$COM_stage_02_normal_module' ! Sender priority list
receiver.priolist (       3 ,       $COM_normal_module            ) = '$COM_stage_03_normal_module' ! Sender priority list
receiver.override (                 $COM_normal_module            ) = { SUBSTR_ID(3) }        ! Override index

receiver.ref (                      $COM_pressure_angle           ) = $_pressure_angle        ! Destination object
receiver.priolist (       1 ,       $COM_pressure_angle           ) = '$COM_stage_01_pressure_angle' ! Sender priority list
receiver.priolist (       2 ,       $COM_pressure_angle           ) = '$COM_stage_02_pressure_angle' ! Sender priority list
receiver.priolist (       3 ,       $COM_pressure_angle           ) = '$COM_stage_03_pressure_angle' ! Sender priority list
receiver.override (                 $COM_pressure_angle           ) = { SUBSTR_ID(3) }        ! Override index

receiver.ref (                      $COM_helix_angle              ) = $_helix_angle           ! Destination object
receiver.priolist (       1 ,       $COM_helix_angle              ) = '$COM_stage_01_helix_angle' ! Sender priority list
receiver.priolist (       2 ,       $COM_helix_angle              ) = '$COM_stage_02_helix_angle' ! Sender priority list
receiver.priolist (       3 ,       $COM_helix_angle              ) = '$COM_stage_03_helix_angle' ! Sender priority list
receiver.override (                 $COM_helix_angle              ) = { SUBSTR_ID(3) }        ! Override index

receiver.ref (                      $COM_normal_backlash          ) = $_normal_backlash       ! Destination object
receiver.priolist (       1 ,       $COM_normal_backlash          ) = '$COM_stage_01_normal_backlash' ! Sender priority list
receiver.priolist (       2 ,       $COM_normal_backlash          ) = '$COM_stage_02_normal_backlash' ! Sender priority list
receiver.priolist (       3 ,       $COM_normal_backlash          ) = '$COM_stage_03_normal_backlash' ! Sender priority list
receiver.override (                 $COM_normal_backlash          ) = { SUBSTR_ID(3) }        ! Override index

receivergroup.begin (               $RG_sun                       )                           ! $RG_sun
   receiver.ref (                   $COM_num_teeth                ) = $SVG_sun.$_num_teeth    ! Destination object
   receiver.priolist (    1 ,       $COM_num_teeth                ) = '$COM_stage_01_sun_num_teeth' ! Sender priority list
   receiver.priolist (    2 ,       $COM_num_teeth                ) = '$COM_stage_02_sun_num_teeth' ! Sender priority list
   receiver.priolist (    3 ,       $COM_num_teeth                ) = '$COM_stage_03_sun_num_teeth' ! Sender priority list
   receiver.override (              $COM_num_teeth                ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_flank_width              ) = $SVG_sun.$_flank_width  ! Destination object
   receiver.priolist (    1 ,       $COM_flank_width              ) = '$COM_stage_01_sun_flank_width' ! Sender priority list
   receiver.priolist (    2 ,       $COM_flank_width              ) = '$COM_stage_02_sun_flank_width' ! Sender priority list
   receiver.priolist (    3 ,       $COM_flank_width              ) = '$COM_stage_03_sun_flank_width' ! Sender priority list
   receiver.override (              $COM_flank_width              ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_shift_factor             ) = $SVG_sun.$_shift_factor ! Destination object
   receiver.priolist (    1 ,       $COM_shift_factor             ) = '$COM_stage_01_sun_shift_factor' ! Sender priority list
   receiver.priolist (    2 ,       $COM_shift_factor             ) = '$COM_stage_02_sun_shift_factor' ! Sender priority list
   receiver.priolist (    3 ,       $COM_shift_factor             ) = '$COM_stage_03_sun_shift_factor' ! Sender priority list
   receiver.override (              $COM_shift_factor             ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_bore_diameter            ) = $SVG_sun.$_bore_diameter ! Destination object
   receiver.priolist (    1 ,       $COM_bore_diameter            ) = '$COM_stage_01_sun_bore_diameter' ! Sender priority list
   receiver.priolist (    2 ,       $COM_bore_diameter            ) = '$COM_stage_02_sun_bore_diameter' ! Sender priority list
   receiver.priolist (    3 ,       $COM_bore_diameter            ) = '$COM_stage_03_sun_bore_diameter' ! Sender priority list
   receiver.override (              $COM_bore_diameter            ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_helix_sign               ) = $SVG_sun.$_helix_sign   ! Destination object
   receiver.priolist (    1 ,       $COM_helix_sign               ) = '$COM_stage_01_sun_helix_sign' ! Sender priority list
   receiver.priolist (    2 ,       $COM_helix_sign               ) = '$COM_stage_02_sun_helix_sign' ! Sender priority list
   receiver.priolist (    3 ,       $COM_helix_sign               ) = '$COM_stage_03_sun_helix_sign' ! Sender priority list
   receiver.override (              $COM_helix_sign               ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_addendum_type            ) = $SVG_sun.$_addendum_type ! Destination object
   receiver.priolist (    1 ,       $COM_addendum_type            ) = '$COM_addendum_type'    ! Sender priority list
   receiver.override (              $COM_addendum_type            ) = 1                       ! Override index

   receiver.ref (                   $COM_addendum_val             ) = $SVG_sun.$_addendum_val ! Destination object
   receiver.priolist (    1 ,       $COM_addendum_val             ) = '$COM_addendum_val'     ! Sender priority list
   receiver.override (              $COM_addendum_val             ) = 1                       ! Override index

   receiver.ref (                   $COM_dedendum_val             ) = $SVG_sun.$_dedendum_val ! Destination object
   receiver.priolist (    1 ,       $COM_dedendum_val             ) = '$COM_dedendum_val'     ! Sender priority list
   receiver.override (              $COM_dedendum_val             ) = 1                       ! Override index

receivergroup.end (                 $RG_sun                       )                           ! $RG_sun

receivergroup.begin (               $RG_marker                    )                           ! $RG_marker
   receiver.ref (                   $COM_shaft                    ) = $M_Isys_shaft           ! Destination object
   receiver.priolist (    1 ,       $COM_shaft                    ) = '$COM_shaft_sun'        ! Sender priority list
   receiver.override (              $COM_shaft                    ) = 0                       ! Override index
   receiver.txt (                   $COM_shaft                    ) = 'It is necesary to make sure that the Senders that are specified in the \'Priority list\' of the Receiver exist and have the same name in the model that holds the Senders.' ! Comment

receivergroup.end (                 $RG_marker                    )                           ! $RG_marker

receivergroup.begin (               $RG_material                  )                           ! $RG_material
   receiver.ref (                   $COM_density                  ) = $SVG_material.$_density ! Destination object
   receiver.priolist (    1 ,       $COM_density                  ) = '$COM_stage_01_sun_material_density' ! Sender priority list
   receiver.priolist (    2 ,       $COM_density                  ) = '$COM_stage_02_sun_material_density' ! Sender priority list
   receiver.priolist (    3 ,       $COM_density                  ) = '$COM_stage_03_sun_material_density' ! Sender priority list
   receiver.override (              $COM_density                  ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_elasticity_modulus       ) = $SVG_material.$_elasticity_modulus ! Destination object
   receiver.priolist (    1 ,       $COM_elasticity_modulus       ) = '$COM_stage_01_sun_material_elasticity_modulus' ! Sender priority list
   receiver.priolist (    2 ,       $COM_elasticity_modulus       ) = '$COM_stage_02_sun_material_elasticity_modulus' ! Sender priority list
   receiver.priolist (    3 ,       $COM_elasticity_modulus       ) = '$COM_stage_03_sun_material_elasticity_modulus' ! Sender priority list
   receiver.override (              $COM_elasticity_modulus       ) = { SUBSTR_ID(3) }        ! Override index

   receiver.ref (                   $COM_poissons_ratio           ) = $SVG_material.$_poissons_ratio ! Destination object
   receiver.priolist (    1 ,       $COM_poissons_ratio           ) = '$COM_stage_01_sun_material_poissons_ratio' ! Sender priority list
   receiver.priolist (    2 ,       $COM_poissons_ratio           ) = '$COM_stage_02_sun_material_poissons_ratio' ! Sender priority list
   receiver.priolist (    3 ,       $COM_poissons_ratio           ) = '$COM_stage_03_sun_material_poissons_ratio' ! Sender priority list
   receiver.override (              $COM_poissons_ratio           ) = { SUBSTR_ID(3) }        ! Override index

receivergroup.end (                 $RG_material                  )                           ! $RG_material

receivergroup.begin (               $RG_planet                    )                           ! $RG_planet
   receiver.ref (                   $COM_width                    ) = $SVG_planet.$_width     ! Destination object
   receiver.priolist (    1 ,       $COM_width                    ) = '$COM_stage_01_planet_flank_width' ! Sender priority list
   receiver.priolist (    2 ,       $COM_width                    ) = '$COM_stage_02_planet_flank_width' ! Sender priority list
   receiver.priolist (    3 ,       $COM_width                    ) = '$COM_stage_03_planet_flank_width' ! Sender priority list
   receiver.override (              $COM_width                    ) = { SUBSTR_ID(3) }        ! Override index

receivergroup.end (                 $RG_planet                    )                           ! $RG_planet

!**********************************************************************
! Materials
!**********************************************************************
material.type (                     $Mat_sun                      ) = 1                       ! Type
material.par (            2 ,       $Mat_sun                      ) = $SVG_material.$_density ! [kg/m³] Density
material.par (            3 ,       $Mat_sun                      ) = 0.00000000000000000E+00 ! [-] Input mode
material.par (            4 ,       $Mat_sun                      ) = $SVG_material.$_elasticity_modulus ! [Pa] Young's modulus
material.par (            5 ,       $Mat_sun                      ) = $SVG_material.$_poissons_ratio ! [-] Poisson's ratio
material.par (            6 ,       $Mat_sun                      ) = 7.50000000000000000E+10 ! [Pa] Shear modulus

                                                                                                                                                                    
