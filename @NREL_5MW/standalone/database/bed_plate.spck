!file.version=3.5! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20210000
version.desc   = ''
version.build  = 101

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
glob.slv.error.mode                                                 = 2                       ! Solver termination due to errors and warnings
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 3.63818860054016113E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -1.12120656967163086E+01 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 5.76573801040649414E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.32356321811676025E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 5.49614727497100830E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 1.33694142103195190E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 8.34087431430816650E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.76997445523738861E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.76997432708740234E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 2 s }                 ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 0                       ! OUTPUT_PATH_PAR_TYPE
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.ev.force.handling (             $SLV_SolverSettings           ) = 1                       ! Force Elements
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_base_excitation_flag        ) = '1'                     ! Definition
subvar.discr.desc (       1 ,       $_base_excitation_flag        ) = 'ON'                    ! Description of discrete values
subvar.discr.desc (       2 ,       $_base_excitation_flag        ) = 'OFF'                   ! Description of discrete values
subvar.discr.str (        1 ,       $_base_excitation_flag        ) = '1'                     ! Discrete values
subvar.discr.str (        2 ,       $_base_excitation_flag        ) = '0'                     ! Discrete values

subvar.str (                        $_excitation_ON               ) = 'IF($_base_excitation_flag== 1)\n{\n0\n}\nELSE\n{\n1\n}' ! Definition

subvar.str (                        $_excitation_OFF              ) = 'IF($_base_excitation_flag== 0)\n{\n0\n}\nELSE\n{\n1\n}' ! Definition

subvar.str (                        $_housing_width               ) = '3.0 m'                 ! Definition

subvar.str (                        $_gamma_Disp                  ) = '1.0'                   ! Definition

subvargroup.begin (                 $SVG_bed_plate                )                           ! $SVG_bed_plate
   subvar.str (                     $_length                      ) = '7.0 m'                 ! $SVG_bed_plate.$_length, Definition

   subvar.str (                     $_width                       ) = '1.2*$_housing_width'   ! $SVG_bed_plate.$_width, Definition

   subvar.str (                     $_thickness                   ) = '$SVG_bed_plate.$_width/10.0' ! $SVG_bed_plate.$_thickness, Definition

   subvar.str (                     $_x_main_shaft                ) = '-$SVG_bed_plate.$_length/2.0' ! $SVG_bed_plate.$_x_main_shaft, Definition

   subvar.str (                     $_x0                          ) = '$SVG_bed_plate.$_length/2.0' ! $SVG_bed_plate.$_x0, Definition

   subvar.str (                     $_x0_housing                  ) = '2.0*$SVG_rotor.$_length + ($SVG_main_shaft.$_length + $SVG_main_shaft.$_x_B)/2.0' ! $SVG_bed_plate.$_x0_housing, Definition

   subvar.str (                     $_z0                          ) = '($_housing_width + $SVG_bed_plate.$_thickness)/2.0' ! $SVG_bed_plate.$_z0, Definition

subvargroup.end (                   $SVG_bed_plate                )                           ! $SVG_bed_plate

subvargroup.begin (                 $SVG_main_shaft               )                           ! $SVG_main_shaft
   subvar.str (                     $_x0                          ) = '2.0*$SVG_rotor.$_length' ! $SVG_main_shaft.$_x0, Definition

   subvar.str (                     $_x_A                         ) = '333.0 mm'              ! $SVG_main_shaft.$_x_A, Definition

   subvar.str (                     $_x_B                         ) = '1166.0 mm'             ! $SVG_main_shaft.$_x_B, Definition

   subvar.str (                     $_length                      ) = '2.0 m'                 ! $SVG_main_shaft.$_length, Definition

subvargroup.end (                   $SVG_main_shaft               )                           ! $SVG_main_shaft

subvargroup.begin (                 $SVG_rotor                    )                           ! $SVG_rotor
   subvar.str (                     $_length                      ) = '250.0 mm'              ! $SVG_rotor.$_length, Definition

subvargroup.end (                   $SVG_rotor                    )                           ! $SVG_rotor

subvargroup.begin (                 $SVG_material                 )                           ! $SVG_material
   subvar.str (                     $_density                     ) = '7830.0 kg/m^3'         ! $SVG_material.$_density, Definition

subvargroup.end (                   $SVG_material                 )                           ! $SVG_material

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_bed_plate                  ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_bed_plate                  ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_bed_plate                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.brf.st.pos (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_bed_plate                  ) = -0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_bed_plate                  ) = -0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga

marker.type (                       $M_bed_plate_BRF              ) = 1                       ! Type
marker.parent (                     $M_bed_plate_BRF              ) = $B_bed_plate            ! Body
marker.flx.type (                   $M_bed_plate_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_bed_plate_housing          ) = 2                       ! Type
marker.parent (                     $M_bed_plate_housing          ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_housing          ) = $SVG_bed_plate.$_x0_housing ! Position
marker.pos (              3 ,       $M_bed_plate_housing          ) = $SVG_bed_plate.$_z0     ! Position

marker.type (                       $M_bed_plate_main_shaft       ) = 2                       ! Type
marker.parent (                     $M_bed_plate_main_shaft       ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_main_shaft       ) = $SVG_main_shaft.$_x0    ! Position
marker.pos (              3 ,       $M_bed_plate_main_shaft       ) = $SVG_bed_plate.$_z0     ! Position

marker.type (                       $M_bed_plate_INP_A            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_INP_A            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_A            ) = { $SVG_main_shaft.$_x0 + $SVG_main_shaft.$_x_A } ! Position
marker.pos (              3 ,       $M_bed_plate_INP_A            ) = $SVG_bed_plate.$_z0     ! Position

marker.type (                       $M_bed_plate_INP_B            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_INP_B            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_B            ) = { $SVG_main_shaft.$_x0 + $SVG_main_shaft.$_x_B } ! Position
marker.pos (              3 ,       $M_bed_plate_INP_B            ) = $SVG_bed_plate.$_z0     ! Position

marker.type (                       $M_bed_plate_excitation       ) = -70                     ! Type
marker.parent (                     $M_bed_plate_excitation       ) = $B_bed_plate            ! Body
marker.par (              2 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [-] Input mode
marker.par (              3 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [-] Velocity & acceleration mode
marker.par (              5 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [m] Offset for x-position
marker.par (              6 ,       $M_bed_plate_excitation       ) = $UE_x                   ! [-] u-Element for x-position
marker.par (              7 ,       $M_bed_plate_excitation       ) = $UE_x_1st_deriv         ! [-] u-Element for x-velocity
marker.par (              8 ,       $M_bed_plate_excitation       ) = $UE_x_2nd_deriv         ! [-] u-Element for x-acceleration
marker.par (             11 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [m] Offset for y-position
marker.par (             12 ,       $M_bed_plate_excitation       ) = $UE_y                   ! [-] u-Element for y-position
marker.par (             13 ,       $M_bed_plate_excitation       ) = $UE_y_1st_deriv         ! [-] u-Element for y-velocity
marker.par (             14 ,       $M_bed_plate_excitation       ) = $UE_y_2nd_deriv         ! [-] u-Element for y-acceleration
marker.par (             17 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [m] Offset for z-position
marker.par (             18 ,       $M_bed_plate_excitation       ) = $UE_z                   ! [-] u-Element for z-position
marker.par (             19 ,       $M_bed_plate_excitation       ) = $UE_z_1st_deriv         ! [-] u-Element for z-velocity
marker.par (             20 ,       $M_bed_plate_excitation       ) = $UE_z_2nd_deriv         ! [-] u-Element for z-acceleration
marker.par (             23 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [rad] Offset for al-position
marker.par (             24 ,       $M_bed_plate_excitation       ) = $UE_alpha               ! [-] u-Element for al-position
marker.par (             25 ,       $M_bed_plate_excitation       ) = $UE_alpha_1st_deriv     ! [-] u-Element for al-velocity
marker.par (             26 ,       $M_bed_plate_excitation       ) = $UE_alpha_2nd_deriv     ! [-] u-Element for al-acceleration
marker.par (             29 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [rad] Offset for be-position
marker.par (             30 ,       $M_bed_plate_excitation       ) = $UE_beta                ! [-] u-Element for be-position
marker.par (             31 ,       $M_bed_plate_excitation       ) = $UE_beta_1st_deriv      ! [-] u-Element for be-velocity
marker.par (             32 ,       $M_bed_plate_excitation       ) = $UE_beta_2nd_deriv      ! [-] u-Element for be-acceleration
marker.par (             35 ,       $M_bed_plate_excitation       ) = 0.00000000000000000E+00 ! [rad] Offset for ga-position
marker.par (             36 ,       $M_bed_plate_excitation       ) = $UE_gamma               ! [-] u-Element for ga-position
marker.par (             37 ,       $M_bed_plate_excitation       ) = $UE_gamma_1st_deriv     ! [-] u-Element for ga-velocity
marker.par (             38 ,       $M_bed_plate_excitation       ) = $UE_gamma_2nd_deriv     ! [-] u-Element for ga-acceleration

joint.from (                        $J_bed_plate                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_bed_plate                  ) = $M_bed_plate_BRF        ! To Marker
joint.type (                        $J_bed_plate                  ) = 20                      ! Type
joint.st.dep (            1 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.dep (            2 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.dep (            3 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.dep (            4 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.dep (            5 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.dep (            6 ,       $J_bed_plate                  ) = 1                       ! Dependency state
joint.st.jac.skip (       3 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       4 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       5 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.disabled (                    $J_bed_plate                  ) = $_excitation_ON         ! Disabled
joint.par (               5 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven rotation about al
joint.par (               6 ,       $J_bed_plate                  ) = $I_gamma                ! [rad] Time Excitation angle al(t)
joint.par (               7 ,       $J_bed_plate                  ) = $I_x_dot                ! [rad] Offset in al
joint.par (              10 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven rotation about be
joint.par (              11 ,       $J_bed_plate                  ) = $I_beta_dot             ! [rad] Time Excitation angle be(t)
joint.par (              12 ,       $J_bed_plate                  ) = $I_gamma_dot            ! [rad] Offset in be
joint.par (              15 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven rotation about ga
joint.par (              16 ,       $J_bed_plate                  ) = $I_alpha_ddot           ! [rad] Time Excitation angle ga(t)
joint.par (              17 ,       $J_bed_plate                  ) = $I_beta_ddot            ! [rad] Offset in ga
joint.par (              20 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven translation in x
joint.par (              25 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven translation in y
joint.par (              30 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! [-] Driven translation in z

prim.type (                         $P_bed_plate                  ) = 1                       ! Type
prim.ref (                          $P_bed_plate                  ) = $M_bed_plate_BRF        ! Reference Marker
prim.pos (                1 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_x0     ! Position
prim.color.r (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_bed_plate                  ) = $SVG_material.$_density ! Density
prim.par (                2 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_length ! [m] Length in X
prim.par (                3 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_width  ! [m] Length in Y
prim.par (                4 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_thickness ! [m] Length in Z


!**********************************************************************
! Constraints
!**********************************************************************
constr.from (                       $L_bed_plate                  ) = $M_Isys                 ! From Marker
constr.to (                         $L_bed_plate                  ) = $M_bed_plate_excitation ! To Marker
constr.type (                       $L_bed_plate                  ) = 25                      ! Type
constr.par (              1 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k

!**********************************************************************
! Connection Elements
!**********************************************************************
connect.type (                      $CTN_fixed                    ) = 2                       ! Type
connect.st.force (        1 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        2 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        3 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        4 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        5 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        6 ,       $CTN_fixed                    ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.intern (                 $CTN_fixed                    ) = ''                      ! Internal state
connect.disabled (                  $CTN_fixed                    ) = $_excitation_OFF        ! Disabled
connect.par (             2 ,       $CTN_fixed                    ) = 0.00000000000000000E+00 ! [-] Interface
connect.par (             2 ,   2 , $CTN_fixed                    ) = $M_Isys                 ! [-] From Marker
connect.par (             2 ,   3 , $CTN_fixed                    ) = $M_bed_plate_BRF        ! [-] To Marker
connect.par (             3 ,       $CTN_fixed                    ) = 0.00000000000000000E+00 ! [-] Kinematic parameters
connect.par (             3 ,   3 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [m] Translation in x
connect.par (             3 ,   4 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [m] Translation in y
connect.par (             3 ,   5 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [m] Translation in z
connect.par (             3 ,   6 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [-] Rotation sequence
connect.par (             3 ,   7 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [rad] Rotation alpha
connect.par (             3 ,   8 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [rad] Rotation beta
connect.par (             3 ,   9 , $CTN_fixed                    ) = 0.00000000000000000E+00 ! [rad] Rotation gamma

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.file (                        $I_x                          ) = '../ref_files/EC4_s01_X.if2' ! File or URI
ifctn.scal.z (                      $I_x                          ) = $_gamma_Disp            ! Scaling factor
ifctn.offset.z (                    $I_x                          ) = 0.00000000000000000E+00 ! Offset value
ifctn.range.handling (              $I_x                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_x                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_x                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_y                          ) = '../ref_files/EC4_s01_Y.if2' ! File or URI
ifctn.scal.z (                      $I_y                          ) = $_gamma_Disp            ! Scaling factor
ifctn.offset.z (                    $I_y                          ) = 0.00000000000000000E+00 ! Offset value
ifctn.range.handling (              $I_y                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_y                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_y                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_z                          ) = '../ref_files/EC4_s01_Z.if2' ! File or URI
ifctn.scal.z (                      $I_z                          ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_z                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_z                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_z                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_alpha                      ) = '../ref_files/EC4_s01_X_rot.if2' ! File or URI
ifctn.range.handling (              $I_alpha                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_alpha                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_alpha                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_beta                       ) = '../ref_files/EC4_s01_Y_rot.if2' ! File or URI
ifctn.range.handling (              $I_beta                       ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_beta                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_beta                       ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_gamma                      ) = '../ref_files/EC4_s01_Z_rot.if2' ! File or URI
ifctn.range.handling (              $I_gamma                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_gamma                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_gamma                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_x_dot                      ) = '../ref_files/EC4_s01_XD.if2' ! File or URI
ifctn.x (                 1 ,       $I_x_dot                      ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_x_dot                      ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_x_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_x_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_x_dot                      ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_x_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_x_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_x_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_x_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_y_dot                      ) = '../ref_files/EC4_s01_YD.if2' ! File or URI
ifctn.x (                 1 ,       $I_y_dot                      ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_y_dot                      ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_y_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_y_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_y_dot                      ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_y_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_y_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_y_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_y_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_z_dot                      ) = '../ref_files/EC4_s01_ZD.if2' ! File or URI
ifctn.x (                 1 ,       $I_z_dot                      ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_z_dot                      ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_z_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_z_dot                      ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_z_dot                      ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_z_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_z_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_z_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_z_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_alpha_dot                  ) = '../ref_files/EC4_s01_X_rotD.if2' ! File or URI
ifctn.range.handling (              $I_alpha_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_alpha_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_alpha_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_alpha_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_beta_dot                   ) = '../ref_files/EC4_s01_Y_rotD.if2' ! File or URI
ifctn.range.handling (              $I_beta_dot                   ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_beta_dot                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_beta_dot                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_beta_dot             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_gamma_dot                  ) = '../ref_files/EC4_s01_Z_rotD.if2' ! File or URI
ifctn.range.handling (              $I_gamma_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_gamma_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_gamma_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_gamma_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_x_ddot                     ) = '../ref_files/EC4_s01_XDD.if2' ! File or URI
ifctn.x (                 1 ,       $I_x_ddot                     ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_x_ddot                     ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_x_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_x_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_x_ddot                     ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_x_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_x_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_x_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_x_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_y_ddot                     ) = '../ref_files/EC4_s01_YDD.if2' ! File or URI
ifctn.x (                 1 ,       $I_y_ddot                     ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_y_ddot                     ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_y_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_y_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_y_ddot                     ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_y_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_y_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_y_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_y_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_z_ddot                     ) = '../ref_files/EC4_s01_ZDD.if2' ! File or URI
ifctn.x (                 1 ,       $I_z_ddot                     ) = 0.00000000000000000E+00 ! X values
ifctn.x (                 2 ,       $I_z_ddot                     ) = 1.00000000000000000E+00 ! X values
ifctn.y (                 1 ,       $I_z_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.y (                 2 ,       $I_z_ddot                     ) = 0.00000000000000000E+00 ! Y values
ifctn.scal.z (                      $I_z_ddot                     ) = $_gamma_Disp            ! Scaling factor
ifctn.range.handling (              $I_z_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_z_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_z_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_z_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_alpha_ddot                 ) = '../ref_files/EC4_s01_X_rotDD.if2' ! File or URI
ifctn.range.handling (              $I_alpha_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_alpha_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_alpha_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_beta_ddot                  ) = '../ref_files/EC4_s01_Y_rotDD.if2' ! File or URI
ifctn.range.handling (              $I_beta_ddot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_beta_ddot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_beta_ddot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_beta_ddot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_gamma_ddot                 ) = '../ref_files/EC4_s01_Z_rotDD.if2' ! File or URI
ifctn.range.handling (              $I_gamma_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_gamma_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_gamma_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_x                          ) = 2                       ! Type
excit.par (               1 ,       $E_x                          ) = $I_x                    ! [-] Input Function f(t)
excit.par (               2 ,       $E_x                          ) = $I_x_dot                ! [-] Input Function fd(t)
excit.par (               3 ,       $E_x                          ) = $I_x_ddot               ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_x                          ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_x                          ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_x                          ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_x                          ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_x                          ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_x                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_x                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_x                          ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_y                          ) = 2                       ! Type
excit.par (               1 ,       $E_y                          ) = $I_y                    ! [-] Input Function f(t)
excit.par (               2 ,       $E_y                          ) = $I_y_dot                ! [-] Input Function fd(t)
excit.par (               3 ,       $E_y                          ) = $I_y_ddot               ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_y                          ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_y                          ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_y                          ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_y                          ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_y                          ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_y                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_y                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_y                          ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_z                          ) = 2                       ! Type
excit.par (               1 ,       $E_z                          ) = $I_z                    ! [-] Input Function f(t)
excit.par (               2 ,       $E_z                          ) = $I_z_dot                ! [-] Input Function fd(t)
excit.par (               3 ,       $E_z                          ) = $I_z_ddot               ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_z                          ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_z                          ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_z                          ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_z                          ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_z                          ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_z                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_z                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_z                          ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_alpha                      ) = 2                       ! Type
excit.par (               1 ,       $E_alpha                      ) = $I_alpha                ! [-] Input Function f(t)
excit.par (               2 ,       $E_alpha                      ) = $I_alpha_dot            ! [-] Input Function fd(t)
excit.par (               3 ,       $E_alpha                      ) = $I_alpha_ddot           ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_alpha                      ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_alpha                      ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_alpha                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_alpha                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_alpha                      ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_beta                       ) = 2                       ! Type
excit.par (               1 ,       $E_beta                       ) = $I_beta                 ! [-] Input Function f(t)
excit.par (               2 ,       $E_beta                       ) = $I_beta_dot             ! [-] Input Function fd(t)
excit.par (               3 ,       $E_beta                       ) = $I_beta_ddot            ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_beta                       ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_beta                       ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_beta                       ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_beta                       ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_beta                       ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_beta                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_beta                       ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_beta                       ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_gamma                      ) = 2                       ! Type
excit.par (               1 ,       $E_gamma                      ) = $I_gamma                ! [-] Input Function f(t)
excit.par (               2 ,       $E_gamma                      ) = $I_gamma_dot            ! [-] Input Function fd(t)
excit.par (               3 ,       $E_gamma                      ) = $I_gamma_ddot           ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_gamma                      ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_gamma                      ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_gamma                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_gamma                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_gamma                      ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_x                         ) = 1                       ! Type
uele.excit (                        $UE_x                         ) = $E_x                    ! Referenced Excitation

uele.type (                         $UE_x_1st_deriv               ) = 1                       ! Type
uele.excit (                        $UE_x_1st_deriv               ) = $E_x                    ! Referenced Excitation
uele.index (                        $UE_x_1st_deriv               ) = 1                       ! Index

uele.type (                         $UE_x_2nd_deriv               ) = 1                       ! Type
uele.excit (                        $UE_x_2nd_deriv               ) = $E_x                    ! Referenced Excitation
uele.index (                        $UE_x_2nd_deriv               ) = 2                       ! Index

uele.type (                         $UE_y                         ) = 1                       ! Type
uele.excit (                        $UE_y                         ) = $E_y                    ! Referenced Excitation
uele.index (                        $UE_y                         ) = 0                       ! Index

uele.type (                         $UE_y_1st_deriv               ) = 1                       ! Type
uele.excit (                        $UE_y_1st_deriv               ) = $E_y                    ! Referenced Excitation
uele.index (                        $UE_y_1st_deriv               ) = 1                       ! Index

uele.type (                         $UE_y_2nd_deriv               ) = 1                       ! Type
uele.excit (                        $UE_y_2nd_deriv               ) = $E_y                    ! Referenced Excitation
uele.index (                        $UE_y_2nd_deriv               ) = 2                       ! Index

uele.type (                         $UE_z                         ) = 1                       ! Type
uele.excit (                        $UE_z                         ) = $E_z                    ! Referenced Excitation
uele.index (                        $UE_z                         ) = 0                       ! Index

uele.type (                         $UE_z_1st_deriv               ) = 1                       ! Type
uele.excit (                        $UE_z_1st_deriv               ) = $E_z                    ! Referenced Excitation
uele.index (                        $UE_z_1st_deriv               ) = 1                       ! Index

uele.type (                         $UE_z_2nd_deriv               ) = 1                       ! Type
uele.excit (                        $UE_z_2nd_deriv               ) = $E_z                    ! Referenced Excitation
uele.index (                        $UE_z_2nd_deriv               ) = 2                       ! Index

uele.type (                         $UE_alpha                     ) = 1                       ! Type
uele.excit (                        $UE_alpha                     ) = $E_alpha                ! Referenced Excitation
uele.index (                        $UE_alpha                     ) = 0                       ! Index

uele.type (                         $UE_alpha_1st_deriv           ) = 1                       ! Type
uele.excit (                        $UE_alpha_1st_deriv           ) = $E_alpha                ! Referenced Excitation
uele.index (                        $UE_alpha_1st_deriv           ) = 1                       ! Index

uele.type (                         $UE_alpha_2nd_deriv           ) = 1                       ! Type
uele.excit (                        $UE_alpha_2nd_deriv           ) = $E_alpha                ! Referenced Excitation
uele.index (                        $UE_alpha_2nd_deriv           ) = 2                       ! Index

uele.type (                         $UE_beta                      ) = 1                       ! Type
uele.excit (                        $UE_beta                      ) = $E_beta                 ! Referenced Excitation
uele.index (                        $UE_beta                      ) = 0                       ! Index

uele.type (                         $UE_beta_1st_deriv            ) = 1                       ! Type
uele.excit (                        $UE_beta_1st_deriv            ) = $E_beta                 ! Referenced Excitation
uele.index (                        $UE_beta_1st_deriv            ) = 1                       ! Index

uele.type (                         $UE_beta_2nd_deriv            ) = 1                       ! Type
uele.excit (                        $UE_beta_2nd_deriv            ) = $E_beta                 ! Referenced Excitation
uele.index (                        $UE_beta_2nd_deriv            ) = 2                       ! Index

uele.type (                         $UE_gamma                     ) = 1                       ! Type
uele.excit (                        $UE_gamma                     ) = $E_gamma                ! Referenced Excitation

uele.type (                         $UE_gamma_1st_deriv           ) = 1                       ! Type
uele.excit (                        $UE_gamma_1st_deriv           ) = $E_gamma                ! Referenced Excitation
uele.index (                        $UE_gamma_1st_deriv           ) = 1                       ! Index

uele.type (                         $UE_gamma_2nd_deriv           ) = 1                       ! Type
uele.excit (                        $UE_gamma_2nd_deriv           ) = $E_gamma                ! Referenced Excitation
uele.index (                        $UE_gamma_2nd_deriv           ) = 2                       ! Index

!**********************************************************************
! Senders
!**********************************************************************
sendergroup.begin (                 $SG_marker                    )                           ! $SG_marker
   sender.ref (                     $COM_bed_plate_main_shaft     ) = $M_bed_plate_main_shaft ! Source object
   sender.alias (                   $COM_bed_plate_main_shaft     ) = '$COM_shaft_input'      ! Alias

   sender.ref (                     $COM_bed_plate_INP_A          ) = $M_bed_plate_INP_A      ! Source object
   sender.alias (                   $COM_bed_plate_INP_A          ) = '$COM_shaft_bearing_A'  ! Alias

   sender.ref (                     $COM_bed_plate_INP_B          ) = $M_bed_plate_INP_B      ! Source object
   sender.alias (                   $COM_bed_plate_INP_B          ) = '$COM_shaft_bearing_B'  ! Alias

   sender.ref (                     $COM_bed_plate_housing        ) = $M_bed_plate_housing    ! Source object

sendergroup.end (                   $SG_marker                    )                           ! $SG_marker

!**********************************************************************
! Receivers
!**********************************************************************
receiver.ref (                      $COM_base_excitation_flag     ) = $_base_excitation_flag  ! Destination object

receiver.ref (                      $COM_rotor_length             ) = $SVG_rotor.$_length     ! Destination object
receiver.priolist (       1 ,       $COM_rotor_length             ) = '$COM_rotor_length'     ! Sender priority list

receiver.ref (                      $COM_housing_width            ) = $_housing_width         ! Destination object

receiver.ref (                      $COM_gamma_Disp               ) = $_gamma_Disp            ! Destination object

receivergroup.begin (               $RG_bed_plate                 )                           ! $RG_bed_plate
   receiver.ref (                   $COM_length                   ) = $SVG_bed_plate.$_length ! Destination object
   receiver.priolist (    1 ,       $COM_length                   ) = '$COM_bed_plate_length' ! Sender priority list

   receiver.ref (                   $COM_z0                       ) = $SVG_bed_plate.$_z0     ! Destination object
   receiver.priolist (    1 ,       $COM_z0                       ) = '$COM_bed_plate_z0'     ! Sender priority list

receivergroup.end (                 $RG_bed_plate                 )                           ! $RG_bed_plate

receivergroup.begin (               $RG_main_shaft                )                           ! $RG_main_shaft
   receiver.ref (                   $COM_length                   ) = $SVG_main_shaft.$_length ! Destination object
   receiver.priolist (    1 ,       $COM_length                   ) = '$COM_shaft_length'     ! Sender priority list
   receiver.override (              $COM_length                   ) = { SUBSTR_ID(1) }        ! Override index

   receiver.ref (                   $COM_x_A                      ) = $SVG_main_shaft.$_x_A   ! Destination object
   receiver.priolist (    1 ,       $COM_x_A                      ) = '$COM_shaft_bearing_A_x' ! Sender priority list

   receiver.ref (                   $COM_x_B                      ) = $SVG_main_shaft.$_x_B   ! Destination object
   receiver.priolist (    1 ,       $COM_x_B                      ) = '$COM_shaft_bearing_B_x' ! Sender priority list

receivergroup.end (                 $RG_main_shaft                )                           ! $RG_main_shaft

                                                                                                                                                                    
