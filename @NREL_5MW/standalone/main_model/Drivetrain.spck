!file.version=3.4! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20200100
version.desc   = ''
version.build  = 82

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '../database'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Substructures
!**********************************************************************
substr.file (                       $S_main_shaft                 ) = 'shaft.par.spck'        ! Filename
substr.id (                         $S_main_shaft                 ) = '1'                     ! Substructure Id
substr.attr.2d.pos.x (              $S_main_shaft                 ) = 3.10000000000000000E+02
substr.attr.2d.pos.y (              $S_main_shaft                 ) = 1.80000000000000000E+02
substr.attr.2d.width (              $S_main_shaft                 ) = 1.00000000000000000E+02
substr.attr.2d.height (             $S_main_shaft                 ) = 4.00000000000000000E+01

substr.file (                       $S_stage_01                   ) = 'planetary_stage.par.spck' ! Filename
substr.id (                         $S_stage_01                   ) = '1'                     ! Substructure Id
substr.attr.2d.pos.x (              $S_stage_01                   ) = 4.60000000000000000E+02
substr.attr.2d.pos.y (              $S_stage_01                   ) = 0.00000000000000000E+00
substr.attr.2d.width (              $S_stage_01                   ) = 1.50000000000000000E+02
substr.attr.2d.height (             $S_stage_01                   ) = 1.00000000000000000E+02

substr.file (                       $S_stage_02                   ) = 'planetary_stage.par.spck' ! Filename
substr.id (                         $S_stage_02                   ) = '2'                     ! Substructure Id
substr.attr.2d.pos.x (              $S_stage_02                   ) = 6.50000000000000000E+02
substr.attr.2d.pos.y (              $S_stage_02                   ) = 0.00000000000000000E+00
substr.attr.2d.width (              $S_stage_02                   ) = 1.50000000000000000E+02
substr.attr.2d.height (             $S_stage_02                   ) = 1.00000000000000000E+02

substr.file (                       $S_stage_03                   ) = 'parallel_stage.par.spck' ! Filename
substr.id (                         $S_stage_03                   ) = '3'                     ! Substructure Id
substr.attr.2d.pos.x (              $S_stage_03                   ) = 1.31000000000000000E+03
substr.attr.2d.pos.y (              $S_stage_03                   ) = 3.00000000000000000E+01
substr.attr.2d.width (              $S_stage_03                   ) = 1.30000000000000000E+02
substr.attr.2d.height (             $S_stage_03                   ) = 5.00000000000000000E+01

!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 5.30241060256958008E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -8.36734485626220703E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 5.91840457916259766E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.00578582286834717E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = -1.63600016385316849E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 1.88090875744819641E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 8.44852149486541748E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.62876117974519730E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.62876110076904297E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 9.11822700500488281E+00 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -5.98319292068481445E+00 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 5.31449127197265625E+00 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 4.65368509292602539E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.09595575928688049E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.64639437198638916E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 8.18210124969482422E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Ortho                      ) = 1.37513680383563042E-02 ! Front clipping plane value
view.bclip.value (                  $V_Ortho                      ) = 1.37513675689697266E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = $_simulation_time       ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.atol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.mat.enabled (            $SLV_SolverSettings           ) = 1                       ! mat file generation 0 = disable; 1 = enable
slv.output.eva.enabled (            $SLV_SolverSettings           ) = 1                       ! eva file generation 0 = disable; 1 = enable
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.output.fileinlining.enabled (   $SLV_SolverSettings           ) = 0                       ! file inlining 0 = disable; 1 = enable
slv.compat.solver (                 $SLV_SolverSettings           ) = 1                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_rated_power                 ) = '5.0e3 kW'              ! Definition

subvar.str (                        $_drive_ratio                 ) = '$SVG_stage_01.$_gear_ratio*$SVG_stage_02.$_gear_ratio*$SVG_stage_03.$_gear_ratio' ! Definition

subvar.str (                        $_simulation_time             ) = '50 s'                  ! Definition

subvar.str (                        $_inertia_flag                ) = '0'                     ! Definition
subvar.discr.desc (       1 ,       $_inertia_flag                ) = 'yes (value)'           ! Description of discrete values
subvar.discr.desc (       2 ,       $_inertia_flag                ) = 'no (unit)'             ! Description of discrete values
subvar.discr.str (        1 ,       $_inertia_flag                ) = '1'                     ! Discrete values
subvar.discr.str (        2 ,       $_inertia_flag                ) = '0'                     ! Discrete values

subvar.str (                        $_time_step                   ) = '0.005 s'               ! Definition

subvargroup.begin (                 $SVG_rotor                    )                           ! $SVG_rotor
   subvar.str (                     $_mass                        ) = 'IF($_inertia_flag == 1)\n{\n110.0e3 kg\n}\nELSE\n{\n1.0 kg\n}' ! $SVG_rotor.$_mass, Definition

   subvar.str (                     $_mass_mom_inertia            ) = 'IF($_inertia_flag == 1)\n{\n57231535.0 kg m^2\n}\nELSE\n{\n1.0 kg m^2\n}' ! $SVG_rotor.$_mass_mom_inertia, Definition

   subvar.str (                     $_diameter                    ) = '1.2*$SVG_main_shaft.$_diameter' ! $SVG_rotor.$_diameter, Definition

   subvar.str (                     $_length                      ) = '250.0 mm'              ! $SVG_rotor.$_length, Definition

   subvar.str (                     $_rated_speed                 ) = '12.1 rpm'              ! $SVG_rotor.$_rated_speed, Definition

subvargroup.end (                   $SVG_rotor                    )                           ! $SVG_rotor

subvargroup.begin (                 $SVG_main_shaft               )                           ! $SVG_main_shaft
   subvar.str (                     $_length                      ) = '2000.0 mm'             ! $SVG_main_shaft.$_length, Definition

   subvar.str (                     $_diameter                    ) = '700.0 mm'              ! $SVG_main_shaft.$_diameter, Definition

   subvar.str (                     $_x0                          ) = '2.0*$SVG_rotor.$_length' ! $SVG_main_shaft.$_x0, Definition

   subvargroup.begin (              $SVG_bearing_A                )                           ! $SVG_main_shaft.$SVG_bearing_A
      subvar.str (                  $_x                           ) = '333.0 mm'              ! $SVG_main_shaft.$SVG_bearing_A.$_x, Definition

      subvar.str (                  $_k_x                         ) = '0.0 N/m'               ! $SVG_main_shaft.$SVG_bearing_A.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '15.0e9 N/m'            ! $SVG_main_shaft.$SVG_bearing_A.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '15.0e9 N/m'            ! $SVG_main_shaft.$SVG_bearing_A.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_main_shaft.$SVG_bearing_A.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '5.0e6 Nm/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '5.0e6 Nm/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '0.0 Ns/m'              ! $SVG_main_shaft.$SVG_bearing_A.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_A                )                           ! $SVG_main_shaft.$SVG_bearing_A
   subvargroup.begin (              $SVG_bearing_B                )                           ! $SVG_main_shaft.$SVG_bearing_B
      subvar.str (                  $_x                           ) = '1166.0 mm'             ! $SVG_main_shaft.$SVG_bearing_B.$_x, Definition

      subvar.str (                  $_k_x                         ) = '406.0e6 N/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '15.4e9 N/m'            ! $SVG_main_shaft.$SVG_bearing_B.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '15.4e9 N/m'            ! $SVG_main_shaft.$SVG_bearing_B.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_main_shaft.$SVG_bearing_B.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '97.6375e3 Nm/rad'      ! $SVG_main_shaft.$SVG_bearing_B.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '97.6375e3 Nm/rad'      ! $SVG_main_shaft.$SVG_bearing_B.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '453.0 Ns/m'            ! $SVG_main_shaft.$SVG_bearing_B.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_B.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_B.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_B                )                           ! $SVG_main_shaft.$SVG_bearing_B
subvargroup.end (                   $SVG_main_shaft               )                           ! $SVG_main_shaft

subvargroup.begin (                 $SVG_stage_01                 )                           ! $SVG_stage_01
   subvar.str (                     $_normal_module               ) = '45 mm'                 ! $SVG_stage_01.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_01.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '863.0 mm'              ! $SVG_stage_01.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '0.0 deg'               ! $SVG_stage_01.$_helix_angle, Definition

   subvar.str (                     $_num_planets                 ) = '3'                     ! $SVG_stage_01.$_num_planets, Definition

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_01.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '5.0e8 Ns/m'            ! $SVG_stage_01.$_tooth_damping, Definition

   subvar.str (                     $_k_SP                        ) = '1.0e9 N/m'             ! $SVG_stage_01.$_k_SP, Definition

   subvar.str (                     $_k_RP                        ) = '1.0e9 N/m'             ! $SVG_stage_01.$_k_RP, Definition

   subvar.str (                     $_gear_ratio                  ) = '1.0 + $SVG_stage_01.$SVG_ring.$_num_teeth/$SVG_stage_01.$SVG_sun.$_num_teeth' ! $SVG_stage_01.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
      subvar.str (                  $_num_teeth                   ) = '19'                    ! $SVG_stage_01.$SVG_sun.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '491.0 mm'              ! $SVG_stage_01.$SVG_sun.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.617'                 ! $SVG_stage_01.$SVG_sun.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_sun.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_sun.$_helix_sign, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_sun.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_sun.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_01.$SVG_sun.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_sun.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_sun.$SVG_material
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
      subvar.str (                  $_num_teeth                   ) = '17'                    ! $SVG_stage_01.$SVG_planet.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_01.$SVG_sun.$_flank_width' ! $SVG_stage_01.$SVG_planet.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.802'                 ! $SVG_stage_01.$SVG_planet.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_planet.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_planet.$_helix_sign, Definition

      subvargroup.begin (           $SVG_AB                       )                           ! $SVG_stage_01.$SVG_planet.$SVG_AB
         subvar.str (               $_k_x                         ) = '91.0e3 N/m'            ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '9.4e9 N/m'             ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '3.2e9 N/m'             ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.4e6 Nm/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '4.5e6 Nm/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_gamma, Definition

      subvargroup.end (             $SVG_AB                       )                           ! $SVG_stage_01.$SVG_planet.$SVG_AB
      subvargroup.begin (           $SVG_pin                      )                           ! $SVG_stage_01.$SVG_planet.$SVG_pin
         subvar.str (               $_length                      ) = '1.6*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_planet.$SVG_pin.$_length, Definition

         subvar.str (               $_diameter                    ) = '$SVG_stage_01.$SVG_planet.$_bore_diameter' ! $SVG_stage_01.$SVG_planet.$SVG_pin.$_diameter, Definition

      subvargroup.end (             $SVG_pin                      )                           ! $SVG_stage_01.$SVG_planet.$SVG_pin
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_planet.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_planet.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_01.$SVG_planet.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_planet.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_planet.$SVG_material
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
      subvar.str (                  $_num_teeth                   ) = '56'                    ! $SVG_stage_01.$SVG_ring.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_01.$SVG_sun.$_flank_width' ! $SVG_stage_01.$SVG_ring.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '-0.501'                ! $SVG_stage_01.$SVG_ring.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_ring.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_ring.$_helix_sign, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_ring.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_ring.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_01.$SVG_ring.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_ring.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_ring.$SVG_material
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
      subvar.str (                  $_width                       ) = '1.8*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_carrier.$_width, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
         subvar.str (               $_k_x                         ) = '66.0e3 N/m'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.7e9 N/m'             ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.7e9 N/m'             ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.39e6 Nm/rad'         ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.39e6 Nm/rad'         ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '420.0 Ns/m'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
         subvar.str (               $_k_x                         ) = '66.0e6 N/m'            ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_y' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_z' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_alpha' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_beta' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_gamma' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_x' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_y' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_z' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_alpha' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_beta' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_gamma' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_carrier.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_carrier.$SVG_material
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
      subvar.str (                  $_length                      ) = '500.0 mm'              ! $SVG_stage_01.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '533.0 mm'              ! $SVG_stage_01.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
subvargroup.end (                   $SVG_stage_01                 )                           ! $SVG_stage_01

subvargroup.begin (                 $SVG_stage_02                 )                           ! $SVG_stage_02
   subvar.str (                     $_normal_module               ) = '21 mm'                 ! $SVG_stage_02.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_02.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '584.0 mm'              ! $SVG_stage_02.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '0.0 deg'               ! $SVG_stage_02.$_helix_angle, Definition

   subvar.str (                     $_num_planets                 ) = '3'                     ! $SVG_stage_02.$_num_planets, Definition

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_02.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '5.0e7 Ns/m'            ! $SVG_stage_02.$_tooth_damping, Definition

   subvar.str (                     $_k_SP                        ) = '1.0e9 N/m'             ! $SVG_stage_02.$_k_SP, Definition

   subvar.str (                     $_k_RP                        ) = '1.0e9 N/m'             ! $SVG_stage_02.$_k_RP, Definition

   subvar.str (                     $_gear_ratio                  ) = '1.0 + $SVG_stage_02.$SVG_ring.$_num_teeth/$SVG_stage_02.$SVG_sun.$_num_teeth' ! $SVG_stage_02.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
      subvar.str (                  $_num_teeth                   ) = '18'                    ! $SVG_stage_02.$SVG_sun.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '550.0 mm'              ! $SVG_stage_02.$SVG_sun.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.389'                 ! $SVG_stage_02.$SVG_sun.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '200.0 mm'              ! $SVG_stage_02.$SVG_sun.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_sun.$_helix_sign, Definition

      subvar.str (                  $_x_input                     ) = '$SVG_stage_02.$SVG_sun.$_flank_width/2.0' ! $SVG_stage_02.$SVG_sun.$_x_input, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_sun.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_sun.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_02.$SVG_sun.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_sun.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_sun.$SVG_material
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
      subvar.str (                  $_num_teeth                   ) = '36'                    ! $SVG_stage_02.$SVG_planet.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_02.$SVG_sun.$_flank_width' ! $SVG_stage_02.$SVG_planet.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.504'                 ! $SVG_stage_02.$SVG_planet.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '380.0 mm'              ! $SVG_stage_02.$SVG_planet.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_planet.$_helix_sign, Definition

      subvargroup.begin (           $SVG_AB                       )                           ! $SVG_stage_02.$SVG_planet.$SVG_AB
         subvar.str (               $_k_x                         ) = '91.0e3 N/m'            ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '60.0e6 N/m'            ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.2e9 N/m'             ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '75.0e3 Nm/rad'         ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '75.0e3 Nm/rad'         ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_gamma, Definition

      subvargroup.end (             $SVG_AB                       )                           ! $SVG_stage_02.$SVG_planet.$SVG_AB
      subvargroup.begin (           $SVG_pin                      )                           ! $SVG_stage_02.$SVG_planet.$SVG_pin
         subvar.str (               $_length                      ) = '1.6*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_planet.$SVG_pin.$_length, Definition

         subvar.str (               $_diameter                    ) = '$SVG_stage_02.$SVG_planet.$_bore_diameter' ! $SVG_stage_02.$SVG_planet.$SVG_pin.$_diameter, Definition

      subvargroup.end (             $SVG_pin                      )                           ! $SVG_stage_02.$SVG_planet.$SVG_pin
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_planet.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_planet.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_02.$SVG_planet.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_planet.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_planet.$SVG_material
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
      subvar.str (                  $_num_teeth                   ) = '93'                    ! $SVG_stage_02.$SVG_ring.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_02.$SVG_sun.$_flank_width' ! $SVG_stage_02.$SVG_ring.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.117'                 ! $SVG_stage_02.$SVG_ring.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_02.$SVG_ring.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_ring.$_helix_sign, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_ring.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_ring.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_02.$SVG_ring.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_ring.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_ring.$SVG_material
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
      subvar.str (                  $_width                       ) = '1.8*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_carrier.$_width, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
         subvar.str (               $_k_x                         ) = '91.0e3 N/m'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '60.0e6 N/m'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.2e9 N/m'             ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '75.0e3 Nm/rad'         ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '3.2398e3 Nm/rad'       ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
         subvar.str (               $_k_x                         ) = '91.0e6 N/m'            ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_y' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_z' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_alpha' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_beta' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_gamma' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_x' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_y' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_z' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_alpha' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_beta' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_gamma' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_carrier.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_carrier.$SVG_material
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
      subvar.str (                  $_length                      ) = '666.0 mm'              ! $SVG_stage_02.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '333.0 mm'              ! $SVG_stage_02.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
subvargroup.end (                   $SVG_stage_02                 )                           ! $SVG_stage_02

subvargroup.begin (                 $SVG_stage_03                 )                           ! $SVG_stage_03
   subvar.str (                     $_normal_module               ) = '14 mm'                 ! $SVG_stage_03.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_03.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '861.0 mm'              ! $SVG_stage_03.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '10.0 deg'              ! $SVG_stage_03.$_helix_angle, Definition

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_03.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '5.0e6 Ns/m'            ! $SVG_stage_03.$_tooth_damping, Definition

   subvar.str (                     $_k_PW                        ) = '1.0e9 N/m'             ! $SVG_stage_03.$_k_PW, Definition

   subvar.str (                     $_gear_ratio                  ) = '$SVG_stage_03.$SVG_wheel.$_num_teeth/$SVG_stage_03.$SVG_pinion.$_num_teeth' ! $SVG_stage_03.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
      subvar.str (                  $_num_teeth                   ) = '24'                    ! $SVG_stage_03.$SVG_pinion.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '360.0 mm'              ! $SVG_stage_03.$SVG_pinion.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.48'                  ! $SVG_stage_03.$SVG_pinion.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '200.0 mm'              ! $SVG_stage_03.$SVG_pinion.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_03.$SVG_pinion.$_helix_sign, Definition

      subvar.str (                  $_x_input                     ) = '$SVG_stage_03.$SVG_pinion.$_flank_width/2.0' ! $SVG_stage_03.$SVG_pinion.$_x_input, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
         subvar.str (               $_k_x                         ) = '130.0e6 N/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '820.0e6 N/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '820.0e6 N/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.1234e6 Nm/rad'       ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '2.539e6 Nm/rad'        ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
         subvar.str (               $_k_x                         ) = '6.7e6 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '800.0e6 N/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '130.0e6 N/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '170.0e3 Nm/rad'        ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.0e6 Nm/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
         subvar.str (               $_k_x                         ) = '80.0e6 N/m'            ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.0e9 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '73.0e6 N/m'            ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '97637.5 Nm/rad'        ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.0e6 Nm/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_gamma, Definition

      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_pinion.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_pinion.$SVG_material
   subvargroup.end (                $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
   subvargroup.begin (              $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
      subvar.str (                  $_num_teeth                   ) = '95'                    ! $SVG_stage_03.$SVG_wheel.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_03.$SVG_pinion.$_flank_width' ! $SVG_stage_03.$SVG_wheel.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.669'                 ! $SVG_stage_03.$SVG_wheel.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_03.$SVG_wheel.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '-1'                    ! $SVG_stage_03.$SVG_wheel.$_helix_sign, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
         subvar.str (               $_k_x                         ) = '0.0 N/m'               ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '60.0e6 N/m'            ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.2e9 N/m'             ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '75.0e3 Nm/rad'         ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '3239.8 Nm/rad'         ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '453.0 Ns/m'            ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '42.0e3 Ns/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '30.6e3 Ns/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
         subvar.str (               $_k_x                         ) = '74.0e6 N/m'            ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '500.0e6 N/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '500.0e6 N/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.6e6 Nm/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.8e6 Nm/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
         subvar.str (               $_k_x                         ) = '78.0e6 N/m'            ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '740.0e6 N/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '330.0e6 N/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.1e6 Nm/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '2.5e6 Nm/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_gamma, Definition

      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_wheel.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_wheel.$SVG_material
   subvargroup.end (                $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
      subvar.str (                  $_length                      ) = '1000.0 mm'             ! $SVG_stage_03.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '333.0 mm'              ! $SVG_stage_03.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_stage_03.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0e3 N/mm^2'        ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
subvargroup.end (                   $SVG_stage_03                 )                           ! $SVG_stage_03

subvargroup.begin (                 $SVG_generator                )                           ! $SVG_generator
   subvar.str (                     $_mass                        ) = 'IF($_inertia_flag == 1)\n{\n1900.0 kg\n}\nELSE\n{\n1.0 kg\n}' ! $SVG_generator.$_mass, Definition

   subvar.str (                     $_mass_mom_inertia            ) = 'IF($_inertia_flag == 1)\n{\n534.116 kg m^2\n}\nELSE\n{\n1.0 kg m^2\n}' ! $SVG_generator.$_mass_mom_inertia, Definition

   subvar.str (                     $_diameter                    ) = '1.2*$SVG_main_shaft.$_diameter' ! $SVG_generator.$_diameter, Definition

   subvar.str (                     $_length                      ) = '$SVG_rotor.$_length'   ! $SVG_generator.$_length, Definition

   subvar.str (                     $_rated_speed                 ) = '$_drive_ratio*$SVG_rotor.$_rated_speed' ! $SVG_generator.$_rated_speed, Definition

   subvar.str (                     $_K_P                         ) = '2200.0'                ! $SVG_generator.$_K_P, Definition
   subvar.desc (          1 ,       $_K_P                         ) = 'Proportional gain'     ! Description

   subvar.str (                     $_K_I                         ) = '220.0'                 ! $SVG_generator.$_K_I, Definition
   subvar.desc (          1 ,       $_K_I                         ) = 'Integral gain'         ! Description

   subvar.str (                     $_T_I                         ) = '$SVG_generator.$_K_P/$SVG_generator.$_K_I' ! $SVG_generator.$_T_I, Definition

subvargroup.end (                   $SVG_generator                )                           ! $SVG_generator

subvargroup.begin (                 $SVG_housing                  )                           ! $SVG_housing
   subvar.str (                     $_x0                          ) = '($SVG_main_shaft.$_length - $SVG_main_shaft.$SVG_bearing_B.$_x)/2.0 + $SVG_main_shaft.$SVG_bearing_B.$_x' ! $SVG_housing.$_x0, Definition

   subvar.str (                     $_length                      ) = '4500.0 mm'             ! $SVG_housing.$_length, Definition

   subvar.str (                     $_width                       ) = '3000.0 mm'             ! $SVG_housing.$_width, Definition

   subvargroup.begin (              $SVG_s01                      )                           ! $SVG_housing.$SVG_s01
      subvar.str (                  $_x_ring                      ) = '($SVG_main_shaft.$_length - $SVG_main_shaft.$SVG_bearing_B.$_x)/2.0' ! $SVG_housing.$SVG_s01.$_x_ring, Definition
      subvar.intent (               $_x_ring                      ) = 0                       ! Intent
      subvar.status (               $_x_ring                      ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_ring                      ) = ''                      ! Comment

      subvar.str (                  $_x_PLC_A                     ) = '$SVG_housing.$SVG_s01.$_x_ring' ! $SVG_housing.$SVG_s01.$_x_PLC_A, Definition
      subvar.intent (               $_x_PLC_A                     ) = 0                       ! Intent
      subvar.status (               $_x_PLC_A                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PLC_A                     ) = ''                      ! Comment

      subvar.str (                  $_x_PLC_B                     ) = '$SVG_housing.$SVG_s01.$_x_PLC_A + $SVG_stage_01.$SVG_carrier.$_width' ! $SVG_housing.$SVG_s01.$_x_PLC_B, Definition
      subvar.intent (               $_x_PLC_B                     ) = 0                       ! Intent
      subvar.status (               $_x_PLC_B                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PLC_B                     ) = ''                      ! Comment

      subvar.str (                  $_x_shaft                     ) = '$SVG_housing.$SVG_s01.$_x_PLC_B' ! $SVG_housing.$SVG_s01.$_x_shaft, Definition
      subvar.intent (               $_x_shaft                     ) = 0                       ! Intent
      subvar.status (               $_x_shaft                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_shaft                     ) = ''                      ! Comment

   subvargroup.end (                $SVG_s01                      )                           ! $SVG_housing.$SVG_s01
   subvargroup.begin (              $SVG_s02                      )                           ! $SVG_housing.$SVG_s02
      subvar.str (                  $_x_ring                      ) = '$SVG_housing.$SVG_s01.$_x_shaft + $SVG_stage_01.$SVG_shaft.$_length' ! $SVG_housing.$SVG_s02.$_x_ring, Definition
      subvar.intent (               $_x_ring                      ) = 0                       ! Intent
      subvar.status (               $_x_ring                      ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_ring                      ) = ''                      ! Comment

      subvar.str (                  $_x_PLC_A                     ) = '$SVG_housing.$SVG_s02.$_x_ring' ! $SVG_housing.$SVG_s02.$_x_PLC_A, Definition
      subvar.intent (               $_x_PLC_A                     ) = 0                       ! Intent
      subvar.status (               $_x_PLC_A                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PLC_A                     ) = ''                      ! Comment

      subvar.str (                  $_x_PLC_B                     ) = '$SVG_stage_02.$SVG_carrier.$_width + $SVG_housing.$SVG_s02.$_x_PLC_A' ! $SVG_housing.$SVG_s02.$_x_PLC_B, Definition
      subvar.intent (               $_x_PLC_B                     ) = 0                       ! Intent
      subvar.status (               $_x_PLC_B                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PLC_B                     ) = ''                      ! Comment

      subvar.str (                  $_x_shaft                     ) = '$SVG_housing.$SVG_s02.$_x_PLC_B' ! $SVG_housing.$SVG_s02.$_x_shaft, Definition
      subvar.intent (               $_x_shaft                     ) = 0                       ! Intent
      subvar.status (               $_x_shaft                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_shaft                     ) = ''                      ! Comment

   subvargroup.end (                $SVG_s02                      )                           ! $SVG_housing.$SVG_s02
   subvargroup.txt (                $SVG_s02                      ) = ' '                     ! Comment
   subvargroup.begin (              $SVG_s03                      )                           ! $SVG_housing.$SVG_s03
      subvar.str (                  $_center_distance             ) = '861.0 mm'              ! $SVG_housing.$SVG_s03.$_center_distance, Definition
      subvar.intent (               $_center_distance             ) = 0                       ! Intent
      subvar.status (               $_center_distance             ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_center_distance             ) = ''                      ! Comment

      subvar.str (                  $_pinion_width                ) = '360.0 mm'              ! $SVG_housing.$SVG_s03.$_pinion_width, Definition
      subvar.intent (               $_pinion_width                ) = 0                       ! Intent
      subvar.status (               $_pinion_width                ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_pinion_width                ) = ''                      ! Comment

      subvar.str (                  $_wheel_width                 ) = '360.0 mm'              ! $SVG_housing.$SVG_s03.$_wheel_width, Definition
      subvar.intent (               $_wheel_width                 ) = 0                       ! Intent
      subvar.status (               $_wheel_width                 ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_wheel_width                 ) = ''                      ! Comment

      subvar.str (                  $_shaft_length                ) = '1000.0 mm'             ! $SVG_housing.$SVG_s03.$_shaft_length, Definition
      subvar.intent (               $_shaft_length                ) = 0                       ! Intent
      subvar.status (               $_shaft_length                ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_shaft_length                ) = ''                      ! Comment

      subvar.str (                  $_x_shaft                     ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 1.8*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_shaft, Definition
      subvar.intent (               $_x_shaft                     ) = 0                       ! Intent
      subvar.status (               $_x_shaft                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_shaft                     ) = ''                      ! Comment

      subvar.str (                  $_x_PA                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 0.2*$SVG_stage_03.$SVG_pinion.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_PA, Definition
      subvar.intent (               $_x_PA                        ) = 0                       ! Intent
      subvar.status (               $_x_PA                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PA                        ) = ''                      ! Comment

      subvar.str (                  $_x_PB                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 1.5*$SVG_stage_03.$SVG_pinion.$_flank_width\n' ! $SVG_housing.$SVG_s03.$_x_PB, Definition
      subvar.intent (               $_x_PB                        ) = 0                       ! Intent
      subvar.status (               $_x_PB                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PB                        ) = ''                      ! Comment

      subvar.str (                  $_x_PC                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 1.7*$SVG_stage_03.$SVG_pinion.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_PC, Definition
      subvar.intent (               $_x_PC                        ) = 0                       ! Intent
      subvar.status (               $_x_PC                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_PC                        ) = ''                      ! Comment

      subvar.str (                  $_x_WA                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 0.2*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_WA, Definition
      subvar.intent (               $_x_WA                        ) = 0                       ! Intent
      subvar.status (               $_x_WA                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_WA                        ) = ''                      ! Comment

      subvar.str (                  $_x_WB                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 1.5*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_WB, Definition
      subvar.intent (               $_x_WB                        ) = 0                       ! Intent
      subvar.status (               $_x_WB                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_WB                        ) = ''                      ! Comment

      subvar.str (                  $_x_WC                        ) = '$SVG_housing.$SVG_s02.$_x_shaft + $SVG_stage_02.$SVG_shaft.$_length + 1.7*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_housing.$SVG_s03.$_x_WC, Definition
      subvar.intent (               $_x_WC                        ) = 0                       ! Intent
      subvar.status (               $_x_WC                        ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_WC                        ) = ''                      ! Comment

      subvar.str (                  $_x_gen                       ) = '$SVG_housing.$SVG_s03.$_x_shaft +$SVG_stage_03.$SVG_shaft.$_length' ! $SVG_housing.$SVG_s03.$_x_gen, Definition
      subvar.intent (               $_x_gen                       ) = 0                       ! Intent
      subvar.status (               $_x_gen                       ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_x_gen                       ) = ''                      ! Comment

      subvar.str (                  $_y_shaft                     ) = '-$SVG_stage_03.$_center_distance\n' ! $SVG_housing.$SVG_s03.$_y_shaft, Definition
      subvar.intent (               $_y_shaft                     ) = 0                       ! Intent
      subvar.status (               $_y_shaft                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_y_shaft                     ) = ''                      ! Comment

      subvar.str (                  $_y_PABC                      ) = '-$SVG_stage_03.$_center_distance' ! $SVG_housing.$SVG_s03.$_y_PABC, Definition
      subvar.intent (               $_y_PABC                      ) = 0                       ! Intent
      subvar.status (               $_y_PABC                      ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_y_PABC                      ) = ''                      ! Comment

   subvargroup.end (                $SVG_s03                      )                           ! $SVG_housing.$SVG_s03
   subvargroup.txt (                $SVG_s03                      ) = ''                      ! Comment
subvargroup.end (                   $SVG_housing                  )                           ! $SVG_housing

subvargroup.begin (                 $SVG_bed_plate                )                           ! $SVG_bed_plate
   subvar.str (                     $_length                      ) = '8000.0 mm'             ! $SVG_bed_plate.$_length, Definition

   subvar.str (                     $_width                       ) = '5000.0 mm'             ! $SVG_bed_plate.$_width, Definition

   subvar.str (                     $_thickness                   ) = '$SVG_bed_plate.$_width/10.0' ! $SVG_bed_plate.$_thickness, Definition
   subvar.intent (                  $_thickness                   ) = 0                       ! Intent
   subvar.status (                  $_thickness                   ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
   subvar.txt (                     $_thickness                   ) = ''                      ! Comment

   subvar.str (                     $_x0                          ) = '$SVG_bed_plate.$_length/2.0' ! $SVG_bed_plate.$_x0, Definition
   subvar.intent (                  $_x0                          ) = 0                       ! Intent
   subvar.status (                  $_x0                          ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
   subvar.txt (                     $_x0                          ) = ''                      ! Comment

   subvar.str (                     $_x0_housing                  ) = '2.0*$SVG_rotor.$_length + ($SVG_main_shaft.$_length + $SVG_main_shaft.$SVG_bearing_B.$_x)/2.0' ! $SVG_bed_plate.$_x0_housing, Definition
   subvar.intent (                  $_x0_housing                  ) = 0                       ! Intent
   subvar.status (                  $_x0_housing                  ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
   subvar.txt (                     $_x0_housing                  ) = ''                      ! Comment

   subvar.str (                     $_x_INP_A                     ) = '$SVG_main_shaft.$_x0 + $SVG_main_shaft.$SVG_bearing_A.$_x' ! $SVG_bed_plate.$_x_INP_A, Definition

   subvar.str (                     $_x_INP_B                     ) = '$SVG_main_shaft.$_x0 + $SVG_main_shaft.$SVG_bearing_B.$_x' ! $SVG_bed_plate.$_x_INP_B, Definition

   subvar.str (                     $_z0                          ) = '($SVG_bed_plate.$_thickness + $SVG_housing.$_width)/2.0 ' ! $SVG_bed_plate.$_z0, Definition

   subvargroup.begin (              $SVG_material                 )                           ! $SVG_bed_plate.$SVG_material
      subvar.str (                  $_density                     ) = '7830.0 kg/m^3'         ! $SVG_bed_plate.$SVG_material.$_density, Definition
      subvar.intent (               $_density                     ) = 0                       ! Intent
      subvar.status (               $_density                     ) = 1                       ! 1=undefined; 2=unchecked; 3=pending; 4=cleared
      subvar.txt (                  $_density                     ) = ''                      ! Comment

   subvargroup.end (                $SVG_material                 )                           ! $SVG_bed_plate.$SVG_material
   subvargroup.txt (                $SVG_material                 ) = ''                      ! Comment
subvargroup.end (                   $SVG_bed_plate                )                           ! $SVG_bed_plate

subvargroup.begin (                 $SVG_loading                  )                           ! $SVG_loading
   subvar.str (                     $_base_excitation_flag        ) = '1'                     ! $SVG_loading.$_base_excitation_flag, Definition
   subvar.discr.desc (    1 ,       $_base_excitation_flag        ) = 'ON'                    ! Description of discrete values
   subvar.discr.desc (    2 ,       $_base_excitation_flag        ) = 'OFF'                   ! Description of discrete values
   subvar.discr.str (     1 ,       $_base_excitation_flag        ) = '1'                     ! Discrete values
   subvar.discr.str (     2 ,       $_base_excitation_flag        ) = '0'                     ! Discrete values

   subvar.str (                     $_base_ON                     ) = 'IF($SVG_loading.$_base_excitation_flag == 1)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_base_ON, Definition

   subvar.str (                     $_base_OFF                    ) = 'IF($SVG_loading.$_base_excitation_flag == 0)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_base_OFF, Definition

   subvar.str (                     $_generator_flag              ) = '1'                     ! $SVG_loading.$_generator_flag, Definition
   subvar.discr.desc (    1 ,       $_generator_flag              ) = 'Prop. control'         ! Description of discrete values
   subvar.discr.desc (    2 ,       $_generator_flag              ) = 'PI control'            ! Description of discrete values
   subvar.discr.desc (    3 ,       $_generator_flag              ) = 'Time series, omega_gen' ! Description of discrete values
   subvar.discr.str (     1 ,       $_generator_flag              ) = '1'                     ! Discrete values
   subvar.discr.str (     2 ,       $_generator_flag              ) = '2'                     ! Discrete values
   subvar.discr.str (     3 ,       $_generator_flag              ) = '3'                     ! Discrete values

   subvar.str (                     $_use_Prop                    ) = 'IF($SVG_loading.$_generator_flag == 1)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_use_Prop, Definition

   subvar.str (                     $_use_PI                      ) = 'IF($SVG_loading.$_generator_flag == 2)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_use_PI, Definition

   subvar.str (                     $_use_time_series             ) = 'IF($SVG_loading.$_generator_flag == 3)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_use_time_series, Definition

   subvar.str (                     $_gamma_Torque                ) = '1.0'                   ! $SVG_loading.$_gamma_Torque, Definition

   subvar.str (                     $_gamma_Force                 ) = '1.0'                   ! $SVG_loading.$_gamma_Force, Definition

   subvar.str (                     $_gamma_Disp                  ) = '1.0'                   ! $SVG_loading.$_gamma_Disp, Definition

subvargroup.end (                   $SVG_loading                  )                           ! $SVG_loading

subvargroup.begin (                 $SVG_gear_params              )                           ! $SVG_gear_params
   subvar.str (                     $_mesh_flag                   ) = '225'                   ! $SVG_gear_params.$_mesh_flag, Definition
   subvar.discr.desc (    1 ,       $_mesh_flag                   ) = 'advanced'              ! Description of discrete values
   subvar.discr.desc (    2 ,       $_mesh_flag                   ) = 'basic'                 ! Description of discrete values
   subvar.discr.str (     1 ,       $_mesh_flag                   ) = '225'                   ! Discrete values
   subvar.discr.str (     2 ,       $_mesh_flag                   ) = '204'                   ! Discrete values

   subvar.str (                     $_tooth_stiffness_ratio       ) = '0.8'                   ! $SVG_gear_params.$_tooth_stiffness_ratio, Definition

   subvar.str (                     $_x0_full_damping             ) = '0.0 m'                 ! $SVG_gear_params.$_x0_full_damping, Definition

   subvar.str (                     $_regularization_vel          ) = '1.0e-3 m/s'            ! $SVG_gear_params.$_regularization_vel, Definition

subvargroup.end (                   $SVG_gear_params              )                           ! $SVG_gear_params

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_rotor                      ) = $SVG_rotor.$_mass       ! Mass of the Body
body.I.tens (             1 ,   1 , $B_rotor                      ) = $SVG_rotor.$_mass_mom_inertia ! Moments of inertia
body.I.tens (             2 ,   2 , $B_rotor                      ) = { $SVG_rotor.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.tens (             3 ,   3 , $B_rotor                      ) = { $SVG_rotor.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.kind (                       $B_rotor                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_rotor                      ) = -2.00000000000000000E+02
body.attr.2d.pos.y (                $B_rotor                      ) = -2.40000000000000000E+02
body.attr.2d.width (                $B_rotor                      ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_rotor                      ) = 3.00000000000000000E+01

marker.type (                       $M_rotor_BRF                  ) = 1                       ! Type
marker.parent (                     $M_rotor_BRF                  ) = $B_rotor                ! Body
marker.flx.type (                   $M_rotor_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_rotor_shaft                ) = 2                       ! Type
marker.parent (                     $M_rotor_shaft                ) = $B_rotor                ! Body
marker.pos (              1 ,       $M_rotor_shaft                ) = $SVG_rotor.$_length     ! Position

joint.from (                        $J_rotor                      ) = $S_main_shaft.$S_TPL.$M_shaft_input ! From Marker
joint.to (                          $J_rotor                      ) = $M_rotor_shaft          ! To Marker
joint.type (                        $J_rotor                      ) = 0                       ! Type
joint.par (               1 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_rotor                      ) = -70
joint.attr.2d.pos.y (     1 ,       $J_rotor                      ) = -230
joint.attr.2d.ori (       1 ,       $J_rotor                      ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_rotor     ) = 340, 340, 330, 320, 310, 300, 300, 300, 300, 300, 300, 300, 300, -53
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_rotor     ) = 180, -65, -65, -65, -65, -65, -75, -85, -95, -105, -115, -125, -230, -230
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_rotor       ) = -150, -87
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_rotor       ) = -230, -230

prim.type (                         $P_rotor                      ) = 2                       ! Type
prim.ref (                          $P_rotor                      ) = $M_rotor_BRF            ! Reference Marker
prim.pos (                1 ,       $P_rotor                      ) = { $SVG_rotor.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_rotor                      ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_rotor                      ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_rotor                      ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_rotor                      ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_rotor                      ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_rotor                      ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_rotor                      ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_rotor                      ) = $SVG_rotor.$_length     ! [m] Height
prim.par (                3 ,       $P_rotor                      ) = $SVG_rotor.$_diameter   ! [m] Outer diameter
prim.par (                4 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_rotor                      ) = 3.00000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_generator                  ) = $SVG_generator.$_mass   ! Mass of the Body
body.I.tens (             1 ,   1 , $B_generator                  ) = $SVG_generator.$_mass_mom_inertia ! Moments of inertia
body.I.tens (             2 ,   2 , $B_generator                  ) = { $SVG_generator.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.tens (             3 ,   3 , $B_generator                  ) = { $SVG_generator.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.kind (                       $B_generator                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_generator                  ) = 1.56000000000000000E+03
body.attr.2d.pos.y (                $B_generator                  ) = 3.00000000000000000E+01
body.attr.2d.width (                $B_generator                  ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_generator                  ) = 3.00000000000000000E+01

marker.type (                       $M_generator_BRF              ) = 1                       ! Type
marker.parent (                     $M_generator_BRF              ) = $B_generator            ! Body
marker.flx.type (                   $M_generator_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_generator_shaft            ) = 2                       ! Type
marker.parent (                     $M_generator_shaft            ) = $B_generator            ! Body
marker.pos (              1 ,       $M_generator_shaft            ) = 0.00000000000000000E+00 ! Position

joint.from (                        $J_generator                  ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
joint.to (                          $J_generator                  ) = $M_generator_shaft      ! To Marker
joint.type (                        $J_generator                  ) = 0                       ! Type
joint.par (               1 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.substr (    1 ,       $J_generator                  ) = $S_stage_03.$S_TPL
joint.attr.2d.pos.x (     1 ,       $J_generator                  ) = 190
joint.attr.2d.pos.y (     1 ,       $J_generator                  ) = -50
joint.attr.2d.ori (       1 ,       $J_generator                  ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_generator ) = 620, 610, 610, 605.51171875, 592.046875, 574.09375, 538.1875, 466.375, 418.5, 227, 227, 227, 227, 227, 227, 227, 227, 227, 217, 207
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_generator ) = -110, -110, -170, -170, -170, -170, -170, -170, -170, -170, -150, -130, -120, -110, -100, -90, -80, -50, -50, -50
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_generator   ) = 150, 141.0625, 141.0625, 141.0625, 154.75, 173
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_generator   ) = 30, 30, 0, -50, -50, -50
joint.attr.2d.pos.x (     2 ,       $J_generator                  ) = 1490
joint.attr.2d.pos.y (     2 ,       $J_generator                  ) = 50
joint.attr.2d.ori (       2 ,       $J_generator                  ) = 0
joint.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $J_generator ) = 1440, 1473
joint.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $J_generator ) = 50, 50
joint.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $J_generator   ) = 1560, 1507
joint.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $J_generator   ) = 50, 50

prim.type (                         $P_generator                  ) = 2                       ! Type
prim.ref (                          $P_generator                  ) = $M_generator_BRF        ! Reference Marker
prim.pos (                1 ,       $P_generator                  ) = { $SVG_rotor.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_generator                  ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_generator                  ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_generator                  ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_generator                  ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_generator                  ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_generator                  ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_generator                  ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_generator                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_generator                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_generator                  ) = $SVG_rotor.$_length     ! [m] Height
prim.par (                3 ,       $P_generator                  ) = $SVG_rotor.$_diameter   ! [m] Outer diameter
prim.par (                4 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_generator                  ) = 3.00000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_bed_plate                  ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_bed_plate                  ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.cg.pos (             1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.pos (             2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.pos (             3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.kind (                      $B_bed_plate                  ) = 0                       ! Kind of CG specification: 0=wrt CG; 1=wrt Marker
body.cg.ref (                       $B_bed_plate                  ) = null                    ! Reference Marker for center of gravity
body.I.tens (             1 ,   1 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             1 ,   2 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             1 ,   3 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   1 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   3 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   1 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   2 , $B_bed_plate                  ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_bed_plate                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_bed_plate                  ) = null                    ! Inertia Reference Marker
body.type (                         $B_bed_plate                  ) = 0                       ! Body type: 0=rigid; 1=linear flex; 2=linear SIMBEAM; 4=nonlinear SIMBEAM; 6=nonlinear flex; 7=Abq Co-Sim; 8=flextrack
body.brf.st.pos (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_bed_plate                  ) = -0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_bed_plate                  ) = -0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.intern (                $B_bed_plate                  ) = 'eJxjfmvMyAAFRkAcD2WzQTFckg4AAOuuAcOMAAAAAAAAAA==' ! Internal state
body.flx.file (                     $B_bed_plate                  ) = ''                      ! fbi or sid file used for describing flex body matrices
body.flx.geostiff (                 $B_bed_plate                  ) = 1                       ! 1=consider geometric stiffening; 0=do not consider geometric stiffening
body.flx.dmp.mode (                 $B_bed_plate                  ) = 0                       ! Damping mode
body.flx.massprops (                $B_bed_plate                  ) = 1                       ! Mass properties on deformation: 0=constant; 1=dependent (default); 2=constant manual
body.flx.marker.conn (              $B_bed_plate                  ) = 3                       ! Automatic flexible Marker connection type; 0=Classic; 1=User-defined; 2=RBE; 3=Pos. Connect
body.flx.defneglinertia (           $B_bed_plate                  ) = 1                       ! Consider inertias of succeeding Bodies for deformation
body.flx.massmat (                  $B_bed_plate                  ) = 1                       ! 0=use of superelement mass matrix (classic); 1=use of lumped mass matrix; 2=use of superelement mass matrix (optimized); 3=use of manual mass matrix
body.sb.massmat (                   $B_bed_plate                  ) = 0                       ! 0=use of superelement mass matrix (classic); 2=use of superelement mass matrix (optimized)
body.flx.st.equi (                  $B_bed_plate                  ) = 0                       ! Handling of Flex Body States During Equilibrium
body.flx.merge0dof (                $B_bed_plate                  ) = 0                       ! 0=do not merge 0-DOF bodies; 1=merge 0-DOF bodies
body.flx.abscoord (                 $B_bed_plate                  ) = -1                      ! -1=Default; 0=False; 1=True
body.flx.eigenmodes.kind (          $B_bed_plate                  ) = 0                       ! Eigenmode frequency range: 0=none; 1=f-min,f-max; 2=f-min,n-modes; 3=f-min,all modes
body.flx.eigenmodes.freqrange.min ( $B_bed_plate                  ) = 0.00000000000000000E+00 ! Eigenmode minimum frequency
body.flx.eigenmodes.freqrange.max ( $B_bed_plate                  ) = 0.00000000000000000E+00 ! Eigenmode maximum frequency
body.flx.eigenmodes.nmodes (        $B_bed_plate                  ) = 0                       ! Eigenmode number of modes
body.flx.ifacemodes.kind (          $B_bed_plate                  ) = 0                       ! Interface modes; -1=none; 0=IRM (default); 1=FRM-Auto; 2=FRM-Manual
body.flx.transform.kind (           $B_bed_plate                  ) = 0                       ! Transformation frequency type: 0=none (default); 1=manual
body.flx.freq.cut.kind (            $B_bed_plate                  ) = 0                       ! Cut-Off frequency type: 0=none (default); 1=auto; 2=manual
body.flx.dmp.input (                $B_bed_plate                  ) = 0                       ! Damping input method; 0=All Modes (default); 1=Each Mode; 2=Input Function
body.flx.dmp.ifctn (                $B_bed_plate                  ) = null                    ! Input Function
body.flx.dmp.fe.scal (              $B_bed_plate                  ) = 1.00000000000000000E+00 ! factor for scaling damping matrix read from fbi file
body.flx.dmp.fe.active (            $B_bed_plate                  ) = 1                       ! 0=substructure damping matrix is not used; 1=use of substructure damping matrix
body.flx.ref (                      $B_bed_plate                  ) = null                    ! Reference marker for FE model
body.flx.mirror (         1 ,       $B_bed_plate                  ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.mirror (         2 ,       $B_bed_plate                  ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.mirror (         3 ,       $B_bed_plate                  ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.m.scal (                   $B_bed_plate                  ) = 1.00000000000000000E+00 ! factor for scaling mass matrix read from fbi file
body.flx.stiff.scal (               $B_bed_plate                  ) = 1.00000000000000000E+00 ! factor for scaling stiffness matrix read from fbi file
body.loads.stat.active (            $B_bed_plate                  ) = 0                       ! 0=disable loads static; 1=enable loads static
body.loads.active (                 $B_bed_plate                  ) = 0                       ! 0=no channels for stress recovery are generated; 1=stress channels are to be generated
body.loads.fecode (                 $B_bed_plate                  ) = 0                       ! 0=FE-code as referenced in fbi file; 1=ABAQUS; 2=ANSYS; 3=NX NASTRAN; 4=MSC.NASTRAN
body.loads.fedata (                 $B_bed_plate                  ) = ''                      ! Relative path from the FE-input deck
body.loads.feout.stress.active (    $B_bed_plate                  ) = 1                       ! 0=no stress output, 1= stress output (1=default)
body.loads.feout.strain.active (    $B_bed_plate                  ) = 0                       ! 0=no stress output, 1= stress output (0=default)
body.loads.eigenmodes.active (      $B_bed_plate                  ) = 1                       ! 0=eigenmodes are not to be considered; 1=consider eigenmodes
body.loads.eigenmodes.freq (        $B_bed_plate                  ) = 0.00000000000000000E+00 ! Maximum frequency to be considered
body.loads.irm.active (             $B_bed_plate                  ) = 1                       ! 0=inertia relief modes are not to be considered; 1=inertia relief modes are to be considered
body.loads.angvel.x (               $B_bed_plate                  ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.angvel.y (               $B_bed_plate                  ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.angvel.z (               $B_bed_plate                  ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.unit.force (             $B_bed_plate                  ) = 1.00000000000000000E+02 ! Unit value of forces
body.loads.unit.torque (            $B_bed_plate                  ) = 1.00000000000000000E+02 ! Unit value of torques
body.loads.unit.angvel (            $B_bed_plate                  ) = 1.00000000000000000E+02 ! Unit value of angular velocity
body.sb.st.output (                 $B_bed_plate                  ) = 0                       ! 0=solver internal flexible states are not written to result files; 1=solver internal flexible states are written to the result file (only used for nonlinear SIMBEAM bodies
body.sb.dmp.type (                  $B_bed_plate                  ) = 2                       ! 0=none; 1=Rayleigh damping; 2=Kelvin-Voigt damping (one parameter); 3=Kelvin-Voigt damping (two parameters)
body.sb.dmp.par (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Global damping parameters for nonlinear SIMBEAM bodies
body.sb.dmp.par (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Global damping parameters for nonlinear SIMBEAM bodies
body.flx.cosim.data (               $B_bed_plate                  ) = ''                      ! Abaqus data
body.flx.cosim.abqcommands (        $B_bed_plate                  ) = ''                      ! additional abaqus commands
body.flx.cosim.unit.mass (          $B_bed_plate                  ) = 'kg'                    ! mass unit of the FE model
body.flx.cosim.unit.time (          $B_bed_plate                  ) = 's'                     ! time unit of the FE model
body.flx.cosim.unit.length (        $B_bed_plate                  ) = 'm'                     ! length unit of the FE model
body.flx.cosim.job.type (           $B_bed_plate                  ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
body.flx.cosim.job.previous (       $B_bed_plate                  ) = ''                      ! previous abaqus job run
body.flx.cosim.job.cmdoptions (     $B_bed_plate                  ) = ''                      ! additional command line options for the abaqus run
body.flx.cosim.job.solver (         $B_bed_plate                  ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard
body.flx.defhandling (              $B_bed_plate                  ) = 0                       ! 0=Retain deformation; 1=Retain modal coordinates; 2=Reset deformation to zero
body.flx.track.data (               $B_bed_plate                  ) = ''                      ! Flextrack data
body.output.nodalforce (            $B_bed_plate                  ) = 0                       ! Output nodal surface forces
body.flx.training.active (          $B_bed_plate                  ) = 0                       ! Generate Training data
body.flx.training.fecode (          $B_bed_plate                  ) = 0                       ! FE Solver
body.flx.training.svratio (         $B_bed_plate                  ) = 1.00000000000000000E+03 ! Singular value ratio
body.flx.training.maxres (          $B_bed_plate                  ) = 50                      ! Max. number of residuals per force element
body.txt (                          $B_bed_plate                  ) = ''                      ! Comment

marker.type (                       $M_bed_plate_BRF              ) = 1                       ! Type
marker.ref (                        $M_bed_plate_BRF              ) = null                    ! Reference Marker
marker.parent (                     $M_bed_plate_BRF              ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Position
marker.pos (              2 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_bed_plate_BRF              ) = null                    ! P-Marker
marker.p.kind (                     $M_bed_plate_BRF              ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_bed_plate_BRF              ) = null                    ! Q-Marker
marker.q.kind (                     $M_bed_plate_BRF              ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_bed_plate_BRF              ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_bed_plate_BRF              ) = null                    ! R-Marker
marker.r.kind (                     $M_bed_plate_BRF              ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_bed_plate_BRF              ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_bed_plate_BRF              ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_bed_plate_BRF              ) = 4                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_bed_plate_BRF              ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_bed_plate_BRF              ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_bed_plate_BRF              ) = ''                      ! Comment

marker.type (                       $M_bed_plate_housing          ) = 2                       ! Type
marker.ref (                        $M_bed_plate_housing          ) = null                    ! Reference Marker
marker.parent (                     $M_bed_plate_housing          ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_housing          ) = $SVG_bed_plate.$_x0_housing ! Position
marker.pos (              2 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_bed_plate_housing          ) = $SVG_bed_plate.$_z0     ! Position
marker.ori (              1 ,   1 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_bed_plate_housing          ) = null                    ! P-Marker
marker.p.kind (                     $M_bed_plate_housing          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_bed_plate_housing          ) = null                    ! Q-Marker
marker.q.kind (                     $M_bed_plate_housing          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_bed_plate_housing          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_bed_plate_housing          ) = null                    ! R-Marker
marker.r.kind (                     $M_bed_plate_housing          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_bed_plate_housing          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_bed_plate_housing          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_bed_plate_housing          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_bed_plate_housing          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_bed_plate_housing          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_bed_plate_housing          ) = ''                      ! Comment

marker.type (                       $M_bed_plate_main_shaft       ) = 2                       ! Type
marker.ref (                        $M_bed_plate_main_shaft       ) = null                    ! Reference Marker
marker.parent (                     $M_bed_plate_main_shaft       ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_main_shaft       ) = $SVG_main_shaft.$_x0    ! Position
marker.pos (              2 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_bed_plate_main_shaft       ) = $SVG_bed_plate.$_z0     ! Position
marker.ori (              1 ,   1 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_bed_plate_main_shaft       ) = null                    ! P-Marker
marker.p.kind (                     $M_bed_plate_main_shaft       ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_bed_plate_main_shaft       ) = null                    ! Q-Marker
marker.q.kind (                     $M_bed_plate_main_shaft       ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_bed_plate_main_shaft       ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_bed_plate_main_shaft       ) = null                    ! R-Marker
marker.r.kind (                     $M_bed_plate_main_shaft       ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_bed_plate_main_shaft       ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_bed_plate_main_shaft       ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_bed_plate_main_shaft       ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_bed_plate_main_shaft       ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_bed_plate_main_shaft       ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_bed_plate_main_shaft       ) = ''                      ! Comment

marker.type (                       $M_bed_plate_INP_A            ) = 2                       ! Type
marker.ref (                        $M_bed_plate_INP_A            ) = null                    ! Reference Marker
marker.parent (                     $M_bed_plate_INP_A            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_A            ) = $SVG_bed_plate.$_x_INP_A ! Position
marker.pos (              2 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_bed_plate_INP_A            ) = $SVG_bed_plate.$_z0     ! Position
marker.ori (              1 ,   1 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_bed_plate_INP_A            ) = null                    ! P-Marker
marker.p.kind (                     $M_bed_plate_INP_A            ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_bed_plate_INP_A            ) = null                    ! Q-Marker
marker.q.kind (                     $M_bed_plate_INP_A            ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_bed_plate_INP_A            ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_bed_plate_INP_A            ) = null                    ! R-Marker
marker.r.kind (                     $M_bed_plate_INP_A            ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_bed_plate_INP_A            ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_bed_plate_INP_A            ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_bed_plate_INP_A            ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_bed_plate_INP_A            ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_bed_plate_INP_A            ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_bed_plate_INP_A            ) = ''                      ! Comment

marker.type (                       $M_bed_plate_INP_B            ) = 2                       ! Type
marker.ref (                        $M_bed_plate_INP_B            ) = null                    ! Reference Marker
marker.parent (                     $M_bed_plate_INP_B            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_B            ) = $SVG_bed_plate.$_x_INP_B ! Position
marker.pos (              2 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_bed_plate_INP_B            ) = $SVG_bed_plate.$_z0     ! Position
marker.ori (              1 ,   1 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_bed_plate_INP_B            ) = null                    ! P-Marker
marker.p.kind (                     $M_bed_plate_INP_B            ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_bed_plate_INP_B            ) = null                    ! Q-Marker
marker.q.kind (                     $M_bed_plate_INP_B            ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_bed_plate_INP_B            ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_bed_plate_INP_B            ) = null                    ! R-Marker
marker.r.kind (                     $M_bed_plate_INP_B            ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_bed_plate_INP_B            ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_bed_plate_INP_B            ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_bed_plate_INP_B            ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_bed_plate_INP_B            ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_bed_plate_INP_B            ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_bed_plate_INP_B            ) = ''                      ! Comment

joint.from (                        $J_bed_plate                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_bed_plate                  ) = $M_bed_plate_BRF        ! To Marker
joint.type (                        $J_bed_plate                  ) = 35                      ! Type
joint.st.pos (            1 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity
joint.st.dep (            1 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.dep (            2 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.dep (            3 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.dep (            4 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.dep (            5 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.dep (            6 ,       $J_bed_plate                  ) = 2                       ! Dependency state
joint.st.equi (           1 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.equi (           2 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.equi (           3 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.equi (           4 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.equi (           5 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.equi (           6 ,       $J_bed_plate                  ) = 0                       ! Equilibrium
joint.st.jac.skip (       1 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       2 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       3 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       4 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       5 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       6 ,       $J_bed_plate                  ) = 0                       ! Skip Jacobian
joint.disabled (                    $J_bed_plate                  ) = $SVG_loading.$_base_ON  ! Disabled
joint.txt (                         $J_bed_plate                  ) = ''                      ! Comment
joint.par (               1 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_x ! [-] IFctn for x
joint.par (               2 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_y ! [-] IFctn for y
joint.par (               3 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_z ! [-] IFctn for z
joint.par (               4 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_alpha ! [-] IFctn for al
joint.par (               5 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_beta ! [-] IFctn for be
joint.par (               6 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_gamma ! [-] IFctn for ga
joint.par (               7 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_x_dot ! [-] IFctn for v_x
joint.par (               8 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_y_dot ! [-] IFctn for v_y
joint.par (               9 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_z_dot ! [-] IFctn for v_z
joint.par (              10 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_alpha_dot ! [-] IFctn for w_x
joint.par (              11 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_beta_dot ! [-] IFctn for w_y
joint.par (              12 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_gamma_dot ! [-] IFctn for w_z
joint.par (              13 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_x_ddot ! [-] IFctn for a_x
joint.par (              14 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_y_ddot ! [-] IFctn for a_y
joint.par (              15 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_z_ddot ! [-] IFctn for a_z
joint.par (              16 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_alpha_ddot ! [-] IFctn for wd_x
joint.par (              17 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_beta_ddot ! [-] IFctn for wd_y
joint.par (              18 ,       $J_bed_plate                  ) = $IFG_base_excitation.$I_gamma_ddot ! [-] IFctn for wd_z
joint.par (              19 ,       $J_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_bed_plate                  ) = 1                       ! Type
prim.ref (                          $P_bed_plate                  ) = $M_bed_plate_BRF        ! Reference Marker
prim.pos (                1 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_x0     ! Position
prim.pos (                2 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Position
prim.pos (                3 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Angles
prim.ang (                2 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Angles
prim.ang (                3 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Angles
prim.color.r (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.shading (                      $P_bed_plate                  ) = 1                       ! Shading
prim.drawstyle (                    $P_bed_plate                  ) = 1                       ! Draw style
prim.transparency (                 $P_bed_plate                  ) = 0.00000000000000000E+00 ! Transparency
prim.scal.ref (                     $P_bed_plate                  ) = null                    ! Scaling reference Marker
prim.scal.x.type (                  $P_bed_plate                  ) = 0                       ! Scaling type
prim.scal.y.type (                  $P_bed_plate                  ) = 0                       ! Scaling type
prim.scal.z.type (                  $P_bed_plate                  ) = 0                       ! Scaling type
prim.scal.x.ele (                   $P_bed_plate                  ) = null                    ! Scaling element
prim.scal.y.ele (                   $P_bed_plate                  ) = null                    ! Scaling element
prim.scal.z.ele (                   $P_bed_plate                  ) = null                    ! Scaling element
prim.scal.x.comp (                  $P_bed_plate                  ) = 1                       ! Scaling component index
prim.scal.y.comp (                  $P_bed_plate                  ) = 1                       ! Scaling component index
prim.scal.z.comp (                  $P_bed_plate                  ) = 1                       ! Scaling component index
prim.scal.x.factor (                $P_bed_plate                  ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.y.factor (                $P_bed_plate                  ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.z.factor (                $P_bed_plate                  ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.x.shift (                 $P_bed_plate                  ) = 0.00000000000000000E+00 ! Scaling shift
prim.scal.y.shift (                 $P_bed_plate                  ) = 0.00000000000000000E+00 ! Scaling shift
prim.scal.z.shift (                 $P_bed_plate                  ) = 0.00000000000000000E+00 ! Scaling shift
prim.mp.incl (                      $P_bed_plate                  ) = 1                       ! Include Primitive in computation
prim.mp.geo (                       $P_bed_plate                  ) = 1                       ! Treat Primitive for computation as
prim.mp.dens.solid (                $P_bed_plate                  ) = $SVG_bed_plate.$SVG_material.$_density ! Density
prim.txt (                          $P_bed_plate                  ) = ''                      ! Comment
prim.par (                2 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_length ! [m] Length in X
prim.par (                3 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_width  ! [m] Length in Y
prim.par (                4 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_thickness ! [m] Length in Z


body.m (                            $B_housing                    ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_housing                    ) = 0                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.cg.pos (             1 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.pos (             2 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.pos (             3 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Center of gravity
body.cg.kind (                      $B_housing                    ) = 0                       ! Kind of CG specification: 0=wrt CG; 1=wrt Marker
body.cg.ref (                       $B_housing                    ) = null                    ! Reference Marker for center of gravity
body.I.tens (             1 ,   1 , $B_housing                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             1 ,   2 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             1 ,   3 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   1 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_housing                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   3 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   1 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   2 , $B_housing                    ) = 0.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_housing                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_housing                    ) = 0                       ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.I.ref (                        $B_housing                    ) = null                    ! Inertia Reference Marker
body.type (                         $B_housing                    ) = 0                       ! Body type: 0=rigid; 1=linear flex; 2=linear SIMBEAM; 4=nonlinear SIMBEAM; 6=nonlinear flex; 7=Abq Co-Sim; 8=flextrack
body.brf.st.pos (         1 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.flx.file (                     $B_housing                    ) = ''                      ! fbi or sid file used for describing flex body matrices
body.flx.geostiff (                 $B_housing                    ) = 1                       ! 1=consider geometric stiffening; 0=do not consider geometric stiffening
body.flx.dmp.mode (                 $B_housing                    ) = 0                       ! Damping mode
body.flx.massprops (                $B_housing                    ) = 1                       ! Mass properties on deformation: 0=constant; 1=dependent (default); 2=constant manual
body.flx.marker.conn (              $B_housing                    ) = 3                       ! Automatic flexible Marker connection type; 0=Classic; 1=User-defined; 2=RBE; 3=Pos. Connect
body.flx.defneglinertia (           $B_housing                    ) = 1                       ! Consider inertias of succeeding Bodies for deformation
body.flx.massmat (                  $B_housing                    ) = 1                       ! 0=use of superelement mass matrix (classic); 1=use of lumped mass matrix; 2=use of superelement mass matrix (optimized); 3=use of manual mass matrix
body.sb.massmat (                   $B_housing                    ) = 0                       ! 0=use of superelement mass matrix (classic); 2=use of superelement mass matrix (optimized)
body.flx.st.equi (                  $B_housing                    ) = 0                       ! Handling of Flex Body States During Equilibrium
body.flx.merge0dof (                $B_housing                    ) = 0                       ! 0=do not merge 0-DOF bodies; 1=merge 0-DOF bodies
body.flx.abscoord (                 $B_housing                    ) = -1                      ! -1=Default; 0=False; 1=True
body.flx.eigenmodes.kind (          $B_housing                    ) = 0                       ! Eigenmode frequency range: 0=none; 1=f-min,f-max; 2=f-min,n-modes; 3=f-min,all modes
body.flx.eigenmodes.freqrange.min ( $B_housing                    ) = 0.00000000000000000E+00 ! Eigenmode minimum frequency
body.flx.eigenmodes.freqrange.max ( $B_housing                    ) = 0.00000000000000000E+00 ! Eigenmode maximum frequency
body.flx.eigenmodes.nmodes (        $B_housing                    ) = 0                       ! Eigenmode number of modes
body.flx.ifacemodes.kind (          $B_housing                    ) = 0                       ! Interface modes; -1=none; 0=IRM (default); 1=FRM-Auto; 2=FRM-Manual
body.flx.transform.kind (           $B_housing                    ) = 0                       ! Transformation frequency type: 0=none (default); 1=manual
body.flx.freq.cut.kind (            $B_housing                    ) = 0                       ! Cut-Off frequency type: 0=none (default); 1=auto; 2=manual
body.flx.dmp.input (                $B_housing                    ) = 0                       ! Damping input method; 0=All Modes (default); 1=Each Mode; 2=Input Function
body.flx.dmp.ifctn (                $B_housing                    ) = null                    ! Input Function
body.flx.dmp.fe.scal (              $B_housing                    ) = 1.00000000000000000E+00 ! factor for scaling damping matrix read from fbi file
body.flx.dmp.fe.active (            $B_housing                    ) = 1                       ! 0=substructure damping matrix is not used; 1=use of substructure damping matrix
body.flx.ref (                      $B_housing                    ) = null                    ! Reference marker for FE model
body.flx.mirror (         1 ,       $B_housing                    ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.mirror (         2 ,       $B_housing                    ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.mirror (         3 ,       $B_housing                    ) = 0                       ! 0=no mirroring in this direction; 1=mirror in this direction
body.flx.m.scal (                   $B_housing                    ) = 1.00000000000000000E+00 ! factor for scaling mass matrix read from fbi file
body.flx.stiff.scal (               $B_housing                    ) = 1.00000000000000000E+00 ! factor for scaling stiffness matrix read from fbi file
body.loads.stat.active (            $B_housing                    ) = 0                       ! 0=disable loads static; 1=enable loads static
body.loads.active (                 $B_housing                    ) = 0                       ! 0=no channels for stress recovery are generated; 1=stress channels are to be generated
body.loads.fecode (                 $B_housing                    ) = 0                       ! 0=FE-code as referenced in fbi file; 1=ABAQUS; 2=ANSYS; 3=NX NASTRAN; 4=MSC.NASTRAN
body.loads.fedata (                 $B_housing                    ) = ''                      ! Relative path from the FE-input deck
body.loads.feout.stress.active (    $B_housing                    ) = 1                       ! 0=no stress output, 1= stress output (1=default)
body.loads.feout.strain.active (    $B_housing                    ) = 0                       ! 0=no stress output, 1= stress output (0=default)
body.loads.eigenmodes.active (      $B_housing                    ) = 1                       ! 0=eigenmodes are not to be considered; 1=consider eigenmodes
body.loads.eigenmodes.freq (        $B_housing                    ) = 0.00000000000000000E+00 ! Maximum frequency to be considered
body.loads.irm.active (             $B_housing                    ) = 1                       ! 0=inertia relief modes are not to be considered; 1=inertia relief modes are to be considered
body.loads.angvel.x (               $B_housing                    ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.angvel.y (               $B_housing                    ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.angvel.z (               $B_housing                    ) = 0                       ! 0=stress channel due to angular velocity not to be considered; 1=consider stress channel
body.loads.unit.force (             $B_housing                    ) = 1.00000000000000000E+02 ! Unit value of forces
body.loads.unit.torque (            $B_housing                    ) = 1.00000000000000000E+02 ! Unit value of torques
body.loads.unit.angvel (            $B_housing                    ) = 1.00000000000000000E+02 ! Unit value of angular velocity
body.sb.st.output (                 $B_housing                    ) = 0                       ! 0=solver internal flexible states are not written to result files; 1=solver internal flexible states are written to the result file (only used for nonlinear SIMBEAM bodies
body.sb.dmp.type (                  $B_housing                    ) = 2                       ! 0=none; 1=Rayleigh damping; 2=Kelvin-Voigt damping (one parameter); 3=Kelvin-Voigt damping (two parameters)
body.sb.dmp.par (         1 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Global damping parameters for nonlinear SIMBEAM bodies
body.sb.dmp.par (         2 ,       $B_housing                    ) = 0.00000000000000000E+00 ! Global damping parameters for nonlinear SIMBEAM bodies
body.flx.cosim.data (               $B_housing                    ) = ''                      ! Abaqus data
body.flx.cosim.abqcommands (        $B_housing                    ) = ''                      ! additional abaqus commands
body.flx.cosim.unit.mass (          $B_housing                    ) = 'kg'                    ! mass unit of the FE model
body.flx.cosim.unit.time (          $B_housing                    ) = 's'                     ! time unit of the FE model
body.flx.cosim.unit.length (        $B_housing                    ) = 'm'                     ! length unit of the FE model
body.flx.cosim.job.type (           $B_housing                    ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
body.flx.cosim.job.previous (       $B_housing                    ) = ''                      ! previous abaqus job run
body.flx.cosim.job.cmdoptions (     $B_housing                    ) = ''                      ! additional command line options for the abaqus run
body.flx.cosim.job.solver (         $B_housing                    ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard
body.flx.defhandling (              $B_housing                    ) = 0                       ! 0=Retain deformation; 1=Retain modal coordinates; 2=Reset deformation to zero
body.flx.track.data (               $B_housing                    ) = ''                      ! Flextrack data
body.output.nodalforce (            $B_housing                    ) = 0                       ! Output nodal surface forces
body.flx.training.active (          $B_housing                    ) = 0                       ! Generate Training data
body.flx.training.fecode (          $B_housing                    ) = 0                       ! FE Solver
body.flx.training.svratio (         $B_housing                    ) = 1.00000000000000000E+03 ! Singular value ratio
body.flx.training.maxres (          $B_housing                    ) = 50                      ! Max. number of residuals per force element
body.txt (                          $B_housing                    ) = ''                      ! Comment
body.attr.2d.pos.x (                $B_housing                    ) = -3.00000000000000000E+01
body.attr.2d.pos.y (                $B_housing                    ) = 3.00000000000000000E+01
body.attr.2d.width (                $B_housing                    ) = 1.10000000000000000E+02
body.attr.2d.height (               $B_housing                    ) = 8.00000000000000000E+01

marker.type (                       $M_housing_BRF                ) = 1                       ! Type
marker.ref (                        $M_housing_BRF                ) = null                    ! Reference Marker
marker.parent (                     $M_housing_BRF                ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Position
marker.pos (              2 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_BRF                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_BRF                ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_BRF                ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_BRF                ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_BRF                ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_BRF                ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_BRF                ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_BRF                ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_BRF                ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_BRF                ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_BRF                ) = 4                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_BRF                ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_BRF                ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_BRF                ) = ''                      ! Comment

marker.type (                       $M_housing_S01_ring           ) = 2                       ! Type
marker.ref (                        $M_housing_S01_ring           ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S01_ring           ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S01_ring           ) = $SVG_housing.$SVG_s01.$_x_ring ! Position
marker.pos (              2 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S01_ring           ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S01_ring           ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S01_ring           ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S01_ring           ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S01_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S01_ring           ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S01_ring           ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S01_ring           ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S01_ring           ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S01_ring           ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S01_ring           ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S01_ring           ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S01_ring           ) = ''                      ! Comment

marker.type (                       $M_housing_S01_PLC_A          ) = 2                       ! Type
marker.ref (                        $M_housing_S01_PLC_A          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S01_PLC_A          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S01_PLC_A          ) = $SVG_housing.$SVG_s01.$_x_PLC_A ! Position
marker.pos (              2 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S01_PLC_A          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S01_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S01_PLC_A          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S01_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S01_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S01_PLC_A          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S01_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S01_PLC_A          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S01_PLC_A          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S01_PLC_A          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S01_PLC_A          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S01_PLC_A          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S01_PLC_A          ) = ''                      ! Comment

marker.type (                       $M_housing_S01_PLC_B          ) = 2                       ! Type
marker.ref (                        $M_housing_S01_PLC_B          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S01_PLC_B          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S01_PLC_B          ) = $SVG_housing.$SVG_s01.$_x_PLC_B ! Position
marker.pos (              2 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S01_PLC_B          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S01_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S01_PLC_B          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S01_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S01_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S01_PLC_B          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S01_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S01_PLC_B          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S01_PLC_B          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S01_PLC_B          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S01_PLC_B          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S01_PLC_B          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S01_PLC_B          ) = ''                      ! Comment

marker.type (                       $M_housing_S01_shaft          ) = 2                       ! Type
marker.ref (                        $M_housing_S01_shaft          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S01_shaft          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S01_shaft          ) = $SVG_housing.$SVG_s01.$_x_shaft ! Position
marker.pos (              2 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S01_shaft          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S01_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S01_shaft          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S01_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S01_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S01_shaft          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S01_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S01_shaft          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S01_shaft          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S01_shaft          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S01_shaft          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S01_shaft          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S01_shaft          ) = ''                      ! Comment

marker.type (                       $M_housing_S02_ring           ) = 2                       ! Type
marker.ref (                        $M_housing_S02_ring           ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S02_ring           ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S02_ring           ) = $SVG_housing.$SVG_s02.$_x_ring ! Position
marker.pos (              2 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S02_ring           ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S02_ring           ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S02_ring           ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S02_ring           ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S02_ring           ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S02_ring           ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S02_ring           ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S02_ring           ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S02_ring           ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S02_ring           ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S02_ring           ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S02_ring           ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S02_ring           ) = ''                      ! Comment

marker.type (                       $M_housing_S02_PLC_A          ) = 2                       ! Type
marker.ref (                        $M_housing_S02_PLC_A          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S02_PLC_A          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S02_PLC_A          ) = $SVG_housing.$SVG_s02.$_x_PLC_A ! Position
marker.pos (              2 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S02_PLC_A          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S02_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S02_PLC_A          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S02_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S02_PLC_A          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S02_PLC_A          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S02_PLC_A          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S02_PLC_A          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S02_PLC_A          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S02_PLC_A          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S02_PLC_A          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S02_PLC_A          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S02_PLC_A          ) = ''                      ! Comment

marker.type (                       $M_housing_S02_PLC_B          ) = 2                       ! Type
marker.ref (                        $M_housing_S02_PLC_B          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S02_PLC_B          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S02_PLC_B          ) = $SVG_housing.$SVG_s02.$_x_PLC_B ! Position
marker.pos (              2 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S02_PLC_B          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S02_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S02_PLC_B          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S02_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S02_PLC_B          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S02_PLC_B          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S02_PLC_B          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S02_PLC_B          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S02_PLC_B          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S02_PLC_B          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S02_PLC_B          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S02_PLC_B          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S02_PLC_B          ) = ''                      ! Comment

marker.type (                       $M_housing_S02_shaft          ) = 2                       ! Type
marker.ref (                        $M_housing_S02_shaft          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S02_shaft          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S02_shaft          ) = $SVG_housing.$SVG_s02.$_x_shaft ! Position
marker.pos (              2 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S02_shaft          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S02_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S02_shaft          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S02_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S02_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S02_shaft          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S02_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S02_shaft          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S02_shaft          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S02_shaft          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S02_shaft          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S02_shaft          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S02_shaft          ) = ''                      ! Comment

marker.type (                       $M_housing_S03_shaft          ) = 2                       ! Type
marker.ref (                        $M_housing_S03_shaft          ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_shaft          ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_shaft          ) = $SVG_housing.$SVG_s03.$_x_shaft ! Position
marker.pos (              2 ,       $M_housing_S03_shaft          ) = $SVG_housing.$SVG_s03.$_y_shaft ! Position
marker.pos (              3 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_shaft          ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_shaft          ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_shaft          ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_shaft          ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_shaft          ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_shaft          ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_shaft          ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_shaft          ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_shaft          ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_shaft          ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_S03_shaft          ) = ''                      ! Comment

marker.type (                       $M_housing_S03_PA             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_PA             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_PA             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_PA             ) = $SVG_housing.$SVG_s03.$_x_PA ! Position
marker.pos (              2 ,       $M_housing_S03_PA             ) = $SVG_housing.$SVG_s03.$_y_PABC ! Position
marker.pos (              3 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_PA             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_PA             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_PA             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_PA             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_PA             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_PA             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_PA             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_PA             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_PA             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_PA             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_PA             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_PA             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_PA             ) = 'Wheel Bearing A'       ! Description
marker.txt (                        $M_housing_S03_PA             ) = ''                      ! Comment

marker.type (                       $M_housing_S03_PB             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_PB             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_PB             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_PB             ) = $SVG_housing.$SVG_s03.$_x_PB ! Position
marker.pos (              2 ,       $M_housing_S03_PB             ) = $SVG_housing.$SVG_s03.$_y_PABC ! Position
marker.pos (              3 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_PB             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_PB             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_PB             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_PB             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_PB             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_PB             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_PB             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_PB             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_PB             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_PB             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_PB             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_PB             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_PB             ) = 'Wheel Bearing B'       ! Description
marker.txt (                        $M_housing_S03_PB             ) = ''                      ! Comment

marker.type (                       $M_housing_S03_PC             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_PC             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_PC             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_PC             ) = $SVG_housing.$SVG_s03.$_x_PC ! Position
marker.pos (              2 ,       $M_housing_S03_PC             ) = $SVG_housing.$SVG_s03.$_y_PABC ! Position
marker.pos (              3 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_PC             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_PC             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_PC             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_PC             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_PC             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_PC             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_PC             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_PC             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_PC             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_PC             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_PC             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_PC             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_PC             ) = 'Wheel Bearing C'       ! Description
marker.txt (                        $M_housing_S03_PC             ) = ''                      ! Comment

marker.type (                       $M_housing_S03_WA             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_WA             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_WA             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_WA             ) = $SVG_housing.$SVG_s03.$_x_WA ! Position
marker.pos (              2 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_WA             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_WA             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_WA             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_WA             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_WA             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_WA             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_WA             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_WA             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_WA             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_WA             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_WA             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_WA             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_WA             ) = 'Wheel Bearing A'       ! Description
marker.txt (                        $M_housing_S03_WA             ) = ''                      ! Comment

marker.type (                       $M_housing_S03_WB             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_WB             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_WB             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_WB             ) = $SVG_housing.$SVG_s03.$_x_WB ! Position
marker.pos (              2 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_WB             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_WB             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_WB             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_WB             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_WB             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_WB             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_WB             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_WB             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_WB             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_WB             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_WB             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_WB             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_WB             ) = 'Wheel Bearing B'       ! Description
marker.txt (                        $M_housing_S03_WB             ) = ''                      ! Comment

marker.type (                       $M_housing_S03_WC             ) = 2                       ! Type
marker.ref (                        $M_housing_S03_WC             ) = null                    ! Reference Marker
marker.parent (                     $M_housing_S03_WC             ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_S03_WC             ) = $SVG_housing.$SVG_s03.$_x_WC ! Position
marker.pos (              2 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Position
marker.pos (              3 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_S03_WC             ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_S03_WC             ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_S03_WC             ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_S03_WC             ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_S03_WC             ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_S03_WC             ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_S03_WC             ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_S03_WC             ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_S03_WC             ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_S03_WC             ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_S03_WC             ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_S03_WC             ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.desc (             1 ,       $M_housing_S03_WC             ) = 'Wheel Bearing C'       ! Description
marker.txt (                        $M_housing_S03_WC             ) = ''                      ! Comment

marker.type (                       $M_housing_gen                ) = 2                       ! Type
marker.ref (                        $M_housing_gen                ) = null                    ! Reference Marker
marker.parent (                     $M_housing_gen                ) = $B_housing              ! Body
marker.pos (              1 ,       $M_housing_gen                ) = $SVG_housing.$SVG_s03.$_x_gen ! Position
marker.pos (              2 ,       $M_housing_gen                ) = $SVG_housing.$SVG_s03.$_y_shaft ! Position
marker.pos (              3 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Position
marker.ori (              1 ,   1 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   2 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              1 ,   3 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   1 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   2 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              2 ,   3 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   1 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   2 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ori (              3 ,   3 , $M_housing_gen                ) = 0.00000000000000000E+00 ! Orientation matrix
marker.ang (              1 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Angles
marker.ang (              2 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Angles
marker.ang (              3 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Angles
marker.p.pos (            1 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            2 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! P-point
marker.p.pos (            3 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! P-point
marker.p.ref (                      $M_housing_gen                ) = null                    ! P-Marker
marker.p.kind (                     $M_housing_gen                ) = 0                       ! 0=by values; 1=by marker
marker.q.pos (            1 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            2 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Q-point
marker.q.pos (            3 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! Q-point
marker.q.ref (                      $M_housing_gen                ) = null                    ! Q-Marker
marker.q.kind (                     $M_housing_gen                ) = 0                       ! 0=by values; 1=by marker
marker.r.pos (            1 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            2 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! R-point
marker.r.pos (            3 ,       $M_housing_gen                ) = 0.00000000000000000E+00 ! R-point
marker.r.ref (                      $M_housing_gen                ) = null                    ! R-Marker
marker.r.kind (                     $M_housing_gen                ) = 0                       ! 0=by values; 1=by marker
marker.axis.dir (                   $M_housing_gen                ) = 1                       ! Rotation axis (P-Q)
marker.axis.plane (                 $M_housing_gen                ) = 2                       ! Plane axis (P-R)
marker.flx.type (                   $M_housing_gen                ) = 0                       ! Flexible type
marker.flx.ifacemodes.mode (        $M_housing_gen                ) = 0                       ! Interface Mode Generation
marker.flx.tol (                    $M_housing_gen                ) = 1.00000000000000005E-04 ! distance tolerance for finding single node to which Marker should be attached
marker.txt (                        $M_housing_gen                ) = ''                      ! Comment

joint.from (                        $J_housing                    ) = $M_bed_plate_housing    ! From Marker
joint.to (                          $J_housing                    ) = $M_housing_BRF          ! To Marker
joint.type (                        $J_housing                    ) = 0                       ! Type
joint.st.dep (            1 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.dep (            2 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.dep (            3 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.dep (            4 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.dep (            5 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.dep (            6 ,       $J_housing                    ) = 2                       ! Dependency state
joint.st.equi (           1 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.equi (           2 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.equi (           3 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.equi (           4 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.equi (           5 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.equi (           6 ,       $J_housing                    ) = 0                       ! Equilibrium
joint.st.jac.skip (       1 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       2 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       3 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       4 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       5 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.st.jac.skip (       6 ,       $J_housing                    ) = 0                       ! Skip Jacobian
joint.txt (                         $J_housing                    ) = ''                      ! Comment
joint.par (               1 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_housing                    ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_housing                    ) = 460
joint.attr.2d.pos.y (     1 ,       $J_housing                    ) = -70
joint.attr.2d.ori (       1 ,       $J_housing                    ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_housing   ) = 490, 443, 443, 406, 406, 406, 406, 406, 406, 406, 443
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_housing   ) = 340, 340, -10, -10, -20, -30, -40, -50, -60, -70, -70
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_housing     ) = 500, 455, 455, 470, 480, 490, 490, 490, 490, 490, 490, 490, 477
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_housing     ) = 210, 210, -10, -10, -10, -10, -20, -30, -40, -50, -60, -70, -70

prim.type (                         $P_housing                    ) = 1                       ! Type
prim.ref (                          $P_housing                    ) = $M_housing_BRF          ! Reference Marker
prim.pos (                1 ,       $P_housing                    ) = { (5 m)/2 }             ! Position
prim.pos (                2 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Position
prim.pos (                3 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Position
prim.ang (                1 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Angles
prim.ang (                2 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Angles
prim.ang (                3 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Angles
prim.color.r (            1 ,       $P_housing                    ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_housing                    ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_housing                    ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_housing                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.shading (                      $P_housing                    ) = 1                       ! Shading
prim.drawstyle (                    $P_housing                    ) = 2                       ! Draw style
prim.transparency (                 $P_housing                    ) = 0.00000000000000000E+00 ! Transparency
prim.scal.ref (                     $P_housing                    ) = null                    ! Scaling reference Marker
prim.scal.x.type (                  $P_housing                    ) = 0                       ! Scaling type
prim.scal.y.type (                  $P_housing                    ) = 0                       ! Scaling type
prim.scal.z.type (                  $P_housing                    ) = 0                       ! Scaling type
prim.scal.x.ele (                   $P_housing                    ) = null                    ! Scaling element
prim.scal.y.ele (                   $P_housing                    ) = null                    ! Scaling element
prim.scal.z.ele (                   $P_housing                    ) = null                    ! Scaling element
prim.scal.x.comp (                  $P_housing                    ) = 1                       ! Scaling component index
prim.scal.y.comp (                  $P_housing                    ) = 1                       ! Scaling component index
prim.scal.z.comp (                  $P_housing                    ) = 1                       ! Scaling component index
prim.scal.x.factor (                $P_housing                    ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.y.factor (                $P_housing                    ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.z.factor (                $P_housing                    ) = 1.00000000000000000E+00 ! Scaling factor
prim.scal.x.shift (                 $P_housing                    ) = 0.00000000000000000E+00 ! Scaling shift
prim.scal.y.shift (                 $P_housing                    ) = 0.00000000000000000E+00 ! Scaling shift
prim.scal.z.shift (                 $P_housing                    ) = 0.00000000000000000E+00 ! Scaling shift
prim.mp.incl (                      $P_housing                    ) = 1                       ! Include Primitive in computation
prim.mp.geo (                       $P_housing                    ) = 1                       ! Treat Primitive for computation as
prim.mp.dens.solid (                $P_housing                    ) = 7.85000000000000000E+03 ! Density
prim.txt (                          $P_housing                    ) = ''                      ! Comment
prim.par (                2 ,       $P_housing                    ) = { 5.00000000000000000E+00 m } ! [m] Length in X
prim.par (                3 ,       $P_housing                    ) = { 3.00000000000000000E+00 m } ! [m] Length in Y
prim.par (                4 ,       $P_housing                    ) = { 3.00000000000000000E+00 m } ! [m] Length in Z


!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_aero                       ) = 93                      ! Type
force.from (                        $F_aero                       ) = $M_bed_plate_main_shaft ! From Marker
force.to (                          $F_aero                       ) = $S_main_shaft.$S_TPL.$M_shaft_input ! To Marker
force.disabled (                    $F_aero                       ) = 0                       ! Disabled
force.par (               1 ,       $F_aero                       ) = $UE_F_x                 ! [-] u-Vector Element force x
force.par (               2 ,       $F_aero                       ) = $UE_F_y                 ! [-] u-Vector Element force y
force.par (               3 ,       $F_aero                       ) = $UE_F_z                 ! [-] u-Vector Element force z
force.par (               4 ,       $F_aero                       ) = $UE_M_x                 ! [-] u-Vector Element torque x
force.par (               5 ,       $F_aero                       ) = $UE_M_y                 ! [-] u-Vector Element torque y
force.par (               6 ,       $F_aero                       ) = $UE_M_z                 ! [-] u-Vector Element torque z
force.attr.2d.pos.x (     1 ,       $F_aero                       ) = 60
force.attr.2d.pos.y (     1 ,       $F_aero                       ) = 50
force.attr.2d.ori (       1 ,       $F_aero                       ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_aero      ) = 490, -66.25, -66.25, 43
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_aero      ) = 330, 330, 50, 50
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_aero        ) = 310, 244.25, 244.25, 77
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_aero        ) = 200, 200, 50, 50

force.type (                        $F_gen_Prop                   ) = 110                     ! Type
force.from (                        $F_gen_Prop                   ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
force.to (                          $F_gen_Prop                   ) = $M_housing_gen          ! To Marker
force.st.equi (           1 ,       $F_gen_Prop                   ) = 0                       ! Equilibrium
force.disabled (                    $F_gen_Prop                   ) = $SVG_loading.$_use_Prop ! Disabled
force.par (               1 ,       $F_gen_Prop                   ) = $C_Prop                 ! [-] Input Control Element 1
force.par (               2 ,       $F_gen_Prop                   ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_gen_Prop                   ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_gen_Prop                   ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_gen_Prop                   ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_gen_Prop                   ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_gen_Prop                   ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)
force.attr.2d.substr (    1 ,       $F_gen_Prop                   ) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $F_gen_Prop                   ) = 850
force.attr.2d.pos.y (     1 ,       $F_gen_Prop                   ) = 30
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_gen_Prop  ) = 670, 913.75, 913.75, 867
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_gen_Prop  ) = -100, -100, 30, 30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_gen_Prop    ) = 150, 140, 140, 833
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_gen_Prop    ) = 40, 40, 30, 30
force.attr.2d.pos.x (     2 ,       $F_gen_Prop                   ) = 530
force.attr.2d.pos.y (     2 ,       $F_gen_Prop                   ) = -110
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $F_gen_Prop  ) = 1320, 1320, 547
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $F_gen_Prop  ) = 30, -110, -110
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $F_gen_Prop    ) = 520, 520, 632.5, 632.5, 632.5, 632.5, 632.5, 632.5, 632.5, 632.5, 632.5, 632.5, 670, 720, 720, 680, 600, 560, 540, 530, 520, 510, 503, 503, 503, 503, 503, 513
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $F_gen_Prop    ) = 180, 170, 170, 165.77301025390625, 153.092041015625, 136.18408203125, 124.912109375, 109.8828125, 89.84375, 63.125, 27.5, -20, -20, -20, -10, -10, -10, -10, -10, -10, -10, -10, -10, -20, -30, -40, -110, -110

force.type (                        $F_gen_PI                     ) = 110                     ! Type
force.from (                        $F_gen_PI                     ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
force.to (                          $F_gen_PI                     ) = $M_housing_gen          ! To Marker
force.st.equi (           1 ,       $F_gen_PI                     ) = 0                       ! Equilibrium
force.disabled (                    $F_gen_PI                     ) = $SVG_loading.$_use_PI   ! Disabled
force.par (               1 ,       $F_gen_PI                     ) = $C_PI                   ! [-] Input Control Element 1
force.par (               2 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_gen_PI                     ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_gen_PI                     ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_gen_PI                     ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)
force.par (               9 ,       $F_gen_PI                     ) = null                    ! [m⁻¹] P: Drive constant F=P*L
force.attr.2d.substr (    1 ,       $F_gen_PI                     ) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $F_gen_PI                     ) = 50
force.attr.2d.pos.y (     1 ,       $F_gen_PI                     ) = -30
force.attr.2d.ori (       1 ,       $F_gen_PI                     ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_gen_PI    ) = 640, 640, 630, 97, 97, 97, 97, 97, 97, 87, 77, 67
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_gen_PI    ) = -120, -140, -140, -140, -120, -100, -90, -80, -30, -30, -30, -30
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_gen_PI      ) = 40, 40, 30, 30, 33
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_gen_PI      ) = -10, -7.5, -7.5, -30, -30
force.attr.2d.pos.x (     2 ,       $F_gen_PI                     ) = 1250
force.attr.2d.pos.y (     2 ,       $F_gen_PI                     ) = 120
force.attr.2d.ori (       2 ,       $F_gen_PI                     ) = 180
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $F_gen_PI    ) = 1330, 1330, 1267
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $F_gen_PI    ) = 80, 120, 120
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $F_gen_PI      ) = 500, 494.375, 494.375, 507.5, 560, 1233
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $F_gen_PI      ) = 200, 200, 120, 120, 120, 120

force.type (                        $F_gen_time_series            ) = 93                      ! Type
force.from (                        $F_gen_time_series            ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
force.to (                          $F_gen_time_series            ) = $M_housing_gen          ! To Marker
force.disabled (                    $F_gen_time_series            ) = $SVG_loading.$_use_time_series ! Disabled
force.par (               1 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_gen_time_series            ) = $UE_T_gen               ! [-] u-Vector Element torque x
force.par (               5 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element torque y
force.par (               6 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element torque z
force.attr.2d.substr (    1 ,       $F_gen_time_series            ) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $F_gen_time_series            ) = 120
force.attr.2d.pos.y (     1 ,       $F_gen_time_series            ) = -40
force.attr.2d.ori (       1 ,       $F_gen_time_series            ) = 90
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_gen_time_series) = 620, 610, 610, 605.91205596923828, 593.64822387695313, 577.29644775390625, 566.395263671875, 551.8603515625, 532.48046875, 506.640625, 472.1875, 426.25, 242.5, 120, 120, 120, 120, 120, 120, 120, 120
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_gen_time_series) = -100, -100, -160, -160, -160, -160, -160, -160, -160, -160, -160, -160, -160, -160, -140, -120, -110, -100, -90, -80, -57
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_gen_time_series) = 100, 100, 120, 120
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_gen_time_series) = -10, -5.75, -5.75, -23
force.attr.2d.pos.x (     2 ,       $F_gen_time_series            ) = 220
force.attr.2d.pos.y (     2 ,       $F_gen_time_series            ) = -30
force.attr.2d.ori (       2 ,       $F_gen_time_series            ) = 180
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $F_gen_time_series) = 1310, 1250.796875, 1250.796875, 1103.1875, 512.75, 512.75, 502.75, 237
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $F_gen_time_series) = 40, 40, -12.5, -12.5, -12.5, -30, -30, -30
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $F_gen_time_series) = 500, 193, 193, 193, 193, 193, 193, 203
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $F_gen_time_series) = 230, 230, 220, 210, 200, 190, -30, -30

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_Prop                       ) = 129                     ! Type
control.st.equi (         1 ,       $C_Prop                       ) = 0                       ! Equilibrium
control.par (             7 ,       $C_Prop                       ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_Prop                       ) = $C_error_speed          ! [-] Input Element ch. 1
control.par (             9 ,       $C_Prop                       ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_Prop                       ) = 0.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_Prop                       ) = $SVG_generator.$_K_P    ! [-] Proportional gain factor

control.type (                      $C_PI                         ) = 129                     ! Type
control.st.dyn (          1 ,       $C_PI                         ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_PI                         ) = 0                       ! Equilibrium
control.par (             7 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_PI                         ) = $C_error_speed          ! [-] Input Element ch. 1
control.par (             9 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_PI                         ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_PI                         ) = $SVG_generator.$_K_P    ! [-] Proportional gain factor
control.par (            16 ,       $C_PI                         ) = $SVG_generator.$_T_I    ! [s] Integral time constant
control.par (            22 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_error_speed                ) = 143                     ! Type
control.par (             1 ,       $C_error_speed                ) = $C_ref_speed            ! [-] Input Element ch. 1
control.par (             2 ,       $C_error_speed                ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_error_speed                ) = 1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_error_speed                ) = $C_gen_speed            ! [-] Input Element ch. 2
control.par (             5 ,       $C_error_speed                ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_error_speed                ) = -1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_error_speed                ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_error_speed                ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_error_speed                ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_error_speed                ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_ref_speed                  ) = 231                     ! Type
control.par (             1 ,       $C_ref_speed                  ) = 1.00000000000000000E+00 ! [-] Number of input Expressions
control.par (             2 ,       $C_ref_speed                  ) = $X_gen_speed_ref        ! [-]  Input Expression 1

control.type (                      $C_gen_speed                  ) = 160                     ! Type
control.par (             1 ,       $C_gen_speed                  ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_gen_speed                  ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_gen_speed                  ) = $S_stage_03.$S_TPL.$J_shaft ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_gen_speed                  ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_gen_speed                  ) = 1.00000000000000000E+00 ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_gen_speed                  ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_gen_speed                  ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

!**********************************************************************
! Connection Elements
!**********************************************************************
connect.type (                      $CTN_bed_plate_fixed          ) = 2                       ! Type
connect.mode (                      $CTN_bed_plate_fixed          ) = 0                       ! 0=Kinematic; 1=Compliant
connect.st.type (         1 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.type (         2 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.type (         3 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.type (         4 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.type (         5 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.type (         6 ,       $CTN_bed_plate_fixed          ) = 0                       ! 0=Free; 1=Driven
connect.st.force (        1 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        2 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        3 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        4 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        5 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.force (        6 ,       $CTN_bed_plate_fixed          ) = -0.00000000000000000E+00 ! Constraint forces (locked directions)
connect.st.intern (                 $CTN_bed_plate_fixed          ) = ''                      ! Internal state
connect.disabled (                  $CTN_bed_plate_fixed          ) = $SVG_loading.$_base_OFF ! Disabled
connect.par (             2 ,       $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [-] Interface
connect.par (             2 ,   2 , $CTN_bed_plate_fixed          ) = $M_Isys                 ! [-] From Marker
connect.par (             2 ,   3 , $CTN_bed_plate_fixed          ) = $M_bed_plate_BRF        ! [-] To Marker
connect.par (             3 ,       $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [-] Kinematic parameters
connect.par (             3 ,   3 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [m] Translation in x
connect.par (             3 ,   4 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [m] Translation in y
connect.par (             3 ,   5 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [m] Translation in z
connect.par (             3 ,   6 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [-] Rotation sequence
connect.par (             3 ,   7 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [rad] Rotation alpha
connect.par (             3 ,   8 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [rad] Rotation beta
connect.par (             3 ,   9 , $CTN_bed_plate_fixed          ) = 0.00000000000000000E+00 ! [rad] Rotation gamma

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.file (                        $I_F_x                        ) = '../ref_files/Fx.if2'   ! File or URI
ifctn.range.handling (              $I_F_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_F_y                        ) = '../ref_files/Fy.if2'   ! File or URI
ifctn.range.handling (              $I_F_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_F_z                        ) = '../ref_files/Fz.if2'   ! File or URI
ifctn.range.handling (              $I_F_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_x                        ) = '../ref_files/Mx.if2'   ! File or URI
ifctn.range.handling (              $I_M_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_y                        ) = '../ref_files/My.if2'   ! File or URI
ifctn.range.handling (              $I_M_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_z                        ) = '../ref_files/Mz.if2'   ! File or URI
ifctn.range.handling (              $I_M_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_w_gen                      ) = '../ref_files/GEN_SPD.if2' ! File or URI
ifctn.desc (              1 ,       $I_w_gen                      ) = 'in [rad/s]'            ! Description
ifctn.range.handling (              $I_w_gen                      ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_w_gen                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_w_gen                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_w_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_w_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_w_gen                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctngroup.begin (                  $IFG_base_excitation          )                           ! $IFG_base_excitation
   ifctn.type (                     $I_x                          ) = 1                       ! Type
   ifctn.datatype (                 $I_x                          ) = 1                       ! Datatype
   ifctn.file (                     $I_x                          ) = '../ref_files/EC4_s01_X.if2' ! File or URI
   ifctn.scal.x (                   $I_x                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_x                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_x                          ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_x                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_x                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_x                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_x                          ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_x                          ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_x                          ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_x                          ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_x                          ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_x                          ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_x                          ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_x                          ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_x                          ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_x                          ) = { inf }                 ! y max
   ifctn.txt (                      $I_x                          ) = ''                      ! Comment
   ifctn.range.handling (           $I_x                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_y                          ) = 1                       ! Type
   ifctn.datatype (                 $I_y                          ) = 1                       ! Datatype
   ifctn.file (                     $I_y                          ) = '../ref_files/EC4_s01_Y.if2' ! File or URI
   ifctn.scal.x (                   $I_y                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_y                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_y                          ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_y                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_y                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_y                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_y                          ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_y                          ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_y                          ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_y                          ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_y                          ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_y                          ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_y                          ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_y                          ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_y                          ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_y                          ) = { inf }                 ! y max
   ifctn.txt (                      $I_y                          ) = ''                      ! Comment
   ifctn.range.handling (           $I_y                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_z                          ) = 1                       ! Type
   ifctn.datatype (                 $I_z                          ) = 1                       ! Datatype
   ifctn.file (                     $I_z                          ) = '../ref_files/EC4_s01_Z.if2' ! File or URI
   ifctn.scal.x (                   $I_z                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_z                          ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_z                          ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_z                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_z                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_z                          ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_z                          ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_z                          ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_z                          ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_z                          ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_z                          ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_z                          ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_z                          ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_z                          ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_z                          ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_z                          ) = { inf }                 ! y max
   ifctn.txt (                      $I_z                          ) = ''                      ! Comment
   ifctn.range.handling (           $I_z                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_alpha                      ) = 1                       ! Type
   ifctn.datatype (                 $I_alpha                      ) = 1                       ! Datatype
   ifctn.file (                     $I_alpha                      ) = '../ref_files/EC4_s01_X_rot.if2' ! File or URI
   ifctn.scal.x (                   $I_alpha                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_alpha                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_alpha                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_alpha                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_alpha                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_alpha                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_alpha                      ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_alpha                      ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_alpha                      ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_alpha                      ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_alpha                      ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_alpha                      ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_alpha                      ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_alpha                      ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_alpha                      ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_alpha                      ) = { inf }                 ! y max
   ifctn.txt (                      $I_alpha                      ) = ''                      ! Comment
   ifctn.range.handling (           $I_alpha                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_beta                       ) = 1                       ! Type
   ifctn.datatype (                 $I_beta                       ) = 1                       ! Datatype
   ifctn.file (                     $I_beta                       ) = '../ref_files/EC4_s01_Y_rot.if2' ! File or URI
   ifctn.scal.x (                   $I_beta                       ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_beta                       ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_beta                       ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_beta                       ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_beta                       ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_beta                       ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_beta                       ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_beta                       ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_beta                       ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_beta                       ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_beta                       ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_beta                       ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_beta                       ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_beta                       ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_beta                       ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_beta                       ) = { inf }                 ! y max
   ifctn.txt (                      $I_beta                       ) = ''                      ! Comment
   ifctn.range.handling (           $I_beta                       ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta                       ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_gamma                      ) = 1                       ! Type
   ifctn.datatype (                 $I_gamma                      ) = 1                       ! Datatype
   ifctn.file (                     $I_gamma                      ) = '../ref_files/EC4_s01_Z_rot.if2' ! File or URI
   ifctn.scal.x (                   $I_gamma                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_gamma                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_gamma                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_gamma                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_gamma                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_gamma                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_gamma                      ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_gamma                      ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_gamma                      ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_gamma                      ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_gamma                      ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_gamma                      ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_gamma                      ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_gamma                      ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_gamma                      ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_gamma                      ) = { inf }                 ! y max
   ifctn.txt (                      $I_gamma                      ) = ''                      ! Comment
   ifctn.range.handling (           $I_gamma                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_x_dot                      ) = 1                       ! Type
   ifctn.datatype (                 $I_x_dot                      ) = 1                       ! Datatype
   ifctn.file (                     $I_x_dot                      ) = '../ref_files/EC4_s01_XD.if2' ! File or URI
   ifctn.scal.x (                   $I_x_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_x_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_x_dot                      ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_x_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_x_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_x_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_x_dot                      ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_x_dot                      ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_x_dot                      ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_x_dot                      ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_x_dot                      ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_x_dot                      ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_x_dot                      ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_x_dot                      ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_x_dot                      ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_x_dot                      ) = { inf }                 ! y max
   ifctn.txt (                      $I_x_dot                      ) = ''                      ! Comment
   ifctn.range.handling (           $I_x_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_y_dot                      ) = 1                       ! Type
   ifctn.datatype (                 $I_y_dot                      ) = 1                       ! Datatype
   ifctn.file (                     $I_y_dot                      ) = '../ref_files/EC4_s01_YD.if2' ! File or URI
   ifctn.scal.x (                   $I_y_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_y_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_y_dot                      ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_y_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_y_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_y_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_y_dot                      ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_y_dot                      ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_y_dot                      ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_y_dot                      ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_y_dot                      ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_y_dot                      ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_y_dot                      ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_y_dot                      ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_y_dot                      ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_y_dot                      ) = { inf }                 ! y max
   ifctn.txt (                      $I_y_dot                      ) = ''                      ! Comment
   ifctn.range.handling (           $I_y_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_z_dot                      ) = 1                       ! Type
   ifctn.datatype (                 $I_z_dot                      ) = 1                       ! Datatype
   ifctn.file (                     $I_z_dot                      ) = '../ref_files/EC4_s01_ZD.if2' ! File or URI
   ifctn.scal.x (                   $I_z_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_z_dot                      ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_z_dot                      ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_z_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_z_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_z_dot                      ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_z_dot                      ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_z_dot                      ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_z_dot                      ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_z_dot                      ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_z_dot                      ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_z_dot                      ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_z_dot                      ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_z_dot                      ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_z_dot                      ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_z_dot                      ) = { inf }                 ! y max
   ifctn.txt (                      $I_z_dot                      ) = ''                      ! Comment
   ifctn.range.handling (           $I_z_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_alpha_dot                  ) = 1                       ! Type
   ifctn.datatype (                 $I_alpha_dot                  ) = 1                       ! Datatype
   ifctn.file (                     $I_alpha_dot                  ) = '../ref_files/EC4_s01_X_rotD.if2' ! File or URI
   ifctn.scal.x (                   $I_alpha_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_alpha_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_alpha_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_alpha_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_alpha_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_alpha_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_alpha_dot                  ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_alpha_dot                  ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_alpha_dot                  ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_alpha_dot                  ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_alpha_dot                  ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_alpha_dot                  ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_alpha_dot                  ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_alpha_dot                  ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_alpha_dot                  ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_alpha_dot                  ) = { inf }                 ! y max
   ifctn.txt (                      $I_alpha_dot                  ) = ''                      ! Comment
   ifctn.range.handling (           $I_alpha_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_beta_dot                   ) = 1                       ! Type
   ifctn.datatype (                 $I_beta_dot                   ) = 1                       ! Datatype
   ifctn.file (                     $I_beta_dot                   ) = '../ref_files/EC4_s01_Y_rotD.if2' ! File or URI
   ifctn.scal.x (                   $I_beta_dot                   ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_beta_dot                   ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_beta_dot                   ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_beta_dot                   ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_beta_dot                   ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_beta_dot                   ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_beta_dot                   ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_beta_dot                   ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_beta_dot                   ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_beta_dot                   ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_beta_dot                   ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_beta_dot                   ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_beta_dot                   ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_beta_dot                   ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_beta_dot                   ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_beta_dot                   ) = { inf }                 ! y max
   ifctn.txt (                      $I_beta_dot                   ) = ''                      ! Comment
   ifctn.range.handling (           $I_beta_dot                   ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta_dot                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta_dot                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta_dot             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_gamma_dot                  ) = 1                       ! Type
   ifctn.datatype (                 $I_gamma_dot                  ) = 1                       ! Datatype
   ifctn.file (                     $I_gamma_dot                  ) = '../ref_files/EC4_s01_Z_rotD.if2' ! File or URI
   ifctn.scal.x (                   $I_gamma_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_gamma_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_gamma_dot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_gamma_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_gamma_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_gamma_dot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_gamma_dot                  ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_gamma_dot                  ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_gamma_dot                  ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_gamma_dot                  ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_gamma_dot                  ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_gamma_dot                  ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_gamma_dot                  ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_gamma_dot                  ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_gamma_dot                  ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_gamma_dot                  ) = { inf }                 ! y max
   ifctn.txt (                      $I_gamma_dot                  ) = ''                      ! Comment
   ifctn.range.handling (           $I_gamma_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_x_ddot                     ) = 1                       ! Type
   ifctn.datatype (                 $I_x_ddot                     ) = 1                       ! Datatype
   ifctn.file (                     $I_x_ddot                     ) = '../ref_files/EC4_s01_XDD.if2' ! File or URI
   ifctn.scal.x (                   $I_x_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_x_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_x_ddot                     ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_x_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_x_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_x_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_x_ddot                     ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_x_ddot                     ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_x_ddot                     ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_x_ddot                     ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_x_ddot                     ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_x_ddot                     ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_x_ddot                     ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_x_ddot                     ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_x_ddot                     ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_x_ddot                     ) = { inf }                 ! y max
   ifctn.txt (                      $I_x_ddot                     ) = ''                      ! Comment
   ifctn.range.handling (           $I_x_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_y_ddot                     ) = 1                       ! Type
   ifctn.datatype (                 $I_y_ddot                     ) = 1                       ! Datatype
   ifctn.file (                     $I_y_ddot                     ) = '../ref_files/EC4_s01_YDD.if2' ! File or URI
   ifctn.scal.x (                   $I_y_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_y_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_y_ddot                     ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_y_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_y_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_y_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_y_ddot                     ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_y_ddot                     ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_y_ddot                     ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_y_ddot                     ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_y_ddot                     ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_y_ddot                     ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_y_ddot                     ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_y_ddot                     ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_y_ddot                     ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_y_ddot                     ) = { inf }                 ! y max
   ifctn.txt (                      $I_y_ddot                     ) = ''                      ! Comment
   ifctn.range.handling (           $I_y_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_z_ddot                     ) = 1                       ! Type
   ifctn.datatype (                 $I_z_ddot                     ) = 1                       ! Datatype
   ifctn.file (                     $I_z_ddot                     ) = '../ref_files/EC4_s01_ZDD.if2' ! File or URI
   ifctn.scal.x (                   $I_z_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_z_ddot                     ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_z_ddot                     ) = $SVG_loading.$_gamma_Disp ! Scaling factor
   ifctn.offset.x (                 $I_z_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_z_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_z_ddot                     ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_z_ddot                     ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_z_ddot                     ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_z_ddot                     ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_z_ddot                     ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_z_ddot                     ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_z_ddot                     ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_z_ddot                     ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_z_ddot                     ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_z_ddot                     ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_z_ddot                     ) = { inf }                 ! y max
   ifctn.txt (                      $I_z_ddot                     ) = ''                      ! Comment
   ifctn.range.handling (           $I_z_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_alpha_ddot                 ) = 1                       ! Type
   ifctn.datatype (                 $I_alpha_ddot                 ) = 1                       ! Datatype
   ifctn.file (                     $I_alpha_ddot                 ) = '../ref_files/EC4_s01_X_rotDD.if2' ! File or URI
   ifctn.scal.x (                   $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_alpha_ddot                 ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_alpha_ddot                 ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_alpha_ddot                 ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_alpha_ddot                 ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_alpha_ddot                 ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_alpha_ddot                 ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_alpha_ddot                 ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_alpha_ddot                 ) = { inf }                 ! y max
   ifctn.txt (                      $I_alpha_ddot                 ) = ''                      ! Comment
   ifctn.range.handling (           $I_alpha_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_beta_ddot                  ) = 1                       ! Type
   ifctn.datatype (                 $I_beta_ddot                  ) = 1                       ! Datatype
   ifctn.file (                     $I_beta_ddot                  ) = '../ref_files/EC4_s01_Y_rotDD.if2' ! File or URI
   ifctn.scal.x (                   $I_beta_ddot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_beta_ddot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_beta_ddot                  ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_beta_ddot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_beta_ddot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_beta_ddot                  ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_beta_ddot                  ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_beta_ddot                  ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_beta_ddot                  ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_beta_ddot                  ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_beta_ddot                  ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_beta_ddot                  ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_beta_ddot                  ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_beta_ddot                  ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_beta_ddot                  ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_beta_ddot                  ) = { inf }                 ! y max
   ifctn.txt (                      $I_beta_ddot                  ) = ''                      ! Comment
   ifctn.range.handling (           $I_beta_ddot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta_ddot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta_ddot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta_ddot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.type (                     $I_gamma_ddot                 ) = 1                       ! Type
   ifctn.datatype (                 $I_gamma_ddot                 ) = 1                       ! Datatype
   ifctn.file (                     $I_gamma_ddot                 ) = '../ref_files/EC4_s01_Z_rotDD.if2' ! File or URI
   ifctn.scal.x (                   $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.y (                   $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.scal.z (                   $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! Scaling factor
   ifctn.offset.x (                 $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.y (                 $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.offset.z (                 $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! Offset value
   ifctn.settings.fromfile (        $I_gamma_ddot                 ) = 1                       ! Inter- and extrapolation settings from file
   ifctn.intpol.type (              $I_gamma_ddot                 ) = 0                       ! Interpolation type
   ifctn.intpol.par (     3 ,       $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! Interpolation parameters
   ifctn.extr.type (                $I_gamma_ddot                 ) = 0                       ! Extrapolation
   ifctn.extr.eps (                 $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! Epsilon for Extrapolation
   ifctn.formula.str (              $I_gamma_ddot                 ) = '0'                     ! Formula Definition
   ifctn.formula.range.xmin (       $I_gamma_ddot                 ) = { -inf }                ! x min
   ifctn.formula.range.ymin (       $I_gamma_ddot                 ) = { -inf }                ! y min
   ifctn.formula.range.xmax (       $I_gamma_ddot                 ) = { inf }                 ! x max
   ifctn.formula.range.ymax (       $I_gamma_ddot                 ) = { inf }                 ! y max
   ifctn.txt (                      $I_gamma_ddot                 ) = ''                      ! Comment
   ifctn.range.handling (           $I_gamma_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctngroup.end (                    $IFG_base_excitation          )                           ! $IFG_base_excitation

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_gen_speed_ref              ) = 'IFCTNX(TIME(), $I_w_gen, 0, 2,- 1)' ! Definition
express.desc (            1 ,       $X_gen_speed_ref              ) = 'Reference generator speed in [rad/s]. Obtained from a time series' ! Description
express.txt (                       $X_gen_speed_ref              ) = 'ifctn(xinp, id, kind_deriv, kind_spl, kind_extr)[br]+ xinp = TIME()[br]+ id = $I_w_gen[br]+ kind_deriv = 0[br]+ kind_spl = 2[br]+ kind_extr = -1[br][br]More info on: Simpack Assistant 2020x \\> Modeling Element Library \\> Expressions \\> Expressions: Library \\> FUNCTIONS \\> ifctn[br]' ! Comment

express.str (                       $X_gen_speed_meas             ) = 'WX($S_stage_03.$S_TPL.$M_shaft_BRF ,0 , 0)' ! Definition
express.desc (            1 ,       $X_gen_speed_meas             ) = 'Measured generator speed in [rad/s]' ! Description
express.txt (                       $X_gen_speed_meas             ) = 'WX(M_j, M_i, M_ref)[br]+ M_j: ID of To Marker M_j whose velocity is measured[br]+ M_i: ID of From Marker M_i, origin of measurement;  if 0 defaults to Isys[br]+ M_ref: ID of reference Marker M_ref for coordinate representation;  if 0 defaults to Isys[br][br]More info on: Simpack Assistant 2020x \\> Modeling Element Library \\> Expressions \\> Expressions: Library \\> KINEMATIC \\> wx[br]' ! Comment

express.str (                       $X_error_speed                ) = '$X_gen_speed_ref - $X_gen_speed_meas' ! Definition
express.desc (            1 ,       $X_error_speed                ) = 'Difference between reference and measured generator speeds, both in [rad/s]' ! Description

express.str (                       $X_T_gen_ref                  ) = '$_rated_power/$X_gen_speed_ref' ! Definition
express.desc (            1 ,       $X_T_gen_ref                  ) = 'Reference generator torque in [Nm]. Obtained from time series manipulation' ! Description
express.txt (                       $X_T_gen_ref                  ) = ''                      ! Comment

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_F_x                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_x                        ) = $I_F_x                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_x                        ) = $SVG_loading.$_gamma_Force ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_y                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_y                        ) = $I_F_y                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_y                        ) = $SVG_loading.$_gamma_Force ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_z                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_z                        ) = $I_F_z                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_z                        ) = $SVG_loading.$_gamma_Force ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_x                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_x                        ) = $I_M_x                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_x                        ) = $SVG_loading.$_gamma_Torque ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_y                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_y                        ) = $I_M_y                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_y                        ) = $SVG_loading.$_gamma_Torque ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_z                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_z                        ) = $I_M_z                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_z                        ) = $SVG_loading.$_gamma_Torque ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_T_gen                      ) = 12                      ! Type
excit.disabled (                    $E_T_gen                      ) = $SVG_loading.$_use_time_series ! Disabled
excit.desc (              1 ,       $E_T_gen                      ) = 'in [Nm]'               ! Description
excit.par (               1 ,       $E_T_gen                      ) = $X_T_gen_ref            ! [-] Expression for f(t)
excit.par (               2 ,       $E_T_gen                      ) = null                    ! [-] Expression for fd(t)
excit.par (               3 ,       $E_T_gen                      ) = null                    ! [-] Expression for fdd(t)
excit.par (               4 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Expressions define
excit.par (               6 ,       $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Initial value for f at t=0
excit.par (               7 ,       $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Initial value for fd at t=0
excit.par (               8 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Scaling factor
excit.plot.par (          1 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_T_gen                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_T_gen                      ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_F_x                       ) = 1                       ! Type
uele.excit (                        $UE_F_x                       ) = $E_F_x                  ! Referenced Excitation

uele.type (                         $UE_F_y                       ) = 1                       ! Type
uele.excit (                        $UE_F_y                       ) = $E_F_y                  ! Referenced Excitation

uele.type (                         $UE_F_z                       ) = 1                       ! Type
uele.excit (                        $UE_F_z                       ) = $E_F_z                  ! Referenced Excitation

uele.type (                         $UE_M_x                       ) = 1                       ! Type
uele.excit (                        $UE_M_x                       ) = $E_M_x                  ! Referenced Excitation

uele.type (                         $UE_M_y                       ) = 1                       ! Type
uele.excit (                        $UE_M_y                       ) = $E_M_y                  ! Referenced Excitation

uele.type (                         $UE_M_z                       ) = 1                       ! Type
uele.excit (                        $UE_M_z                       ) = $E_M_z                  ! Referenced Excitation

uele.type (                         $UE_T_gen                     ) = 1                       ! Type
uele.excit (                        $UE_T_gen                     ) = $E_T_gen                ! Referenced Excitation

!**********************************************************************
! Senders
!**********************************************************************
sender.ref (                        $COM_rotor_length             ) = $SVG_rotor.$_length     ! Source object

sendergroup.begin (                 $SG_main_shaft                )                           ! $SG_main_shaft
   sender.ref (                     $COM_main_shaft_length        ) = $SVG_main_shaft.$_length ! Source object
   sender.alias (                   $COM_main_shaft_length        ) = '$COM_shaft_length'     ! Alias

   sender.ref (                     $COM_main_shaft_diameter      ) = $SVG_main_shaft.$_diameter ! Source object
   sender.alias (                   $COM_main_shaft_diameter      ) = '$COM_shaft_diameter'   ! Alias

   sender.ref (                     $COM_main_shaft_x0            ) = $SVG_main_shaft.$_x0    ! Source object
   sender.alias (                   $COM_main_shaft_x0            ) = '$COM_main_shaft_x0'    ! Alias

   sendergroup.begin (              $SG_bearing_A                 )                           ! $SG_main_shaft.$SG_bearing_A
      sender.ref (                  $COM_x                        ) = $SVG_main_shaft.$SVG_bearing_A.$_x ! Source object
      sender.alias (                $COM_x                        ) = '$COM_shaft_bearing_A_x' ! Alias

      sender.ref (                  $COM_k_x                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_x ! Source object
      sender.alias (                $COM_k_x                      ) = '$COM_shaft_bearing_A_k_x' ! Alias

      sender.ref (                  $COM_k_y                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_y ! Source object
      sender.alias (                $COM_k_y                      ) = '$COM_shaft_bearing_A_k_y' ! Alias

      sender.ref (                  $COM_k_z                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_z ! Source object
      sender.alias (                $COM_k_z                      ) = '$COM_shaft_bearing_A_k_z' ! Alias

      sender.ref (                  $COM_k_alpha                  ) = $SVG_main_shaft.$SVG_bearing_A.$_k_alpha ! Source object
      sender.alias (                $COM_k_alpha                  ) = '$COM_shaft_bearing_A_k_alpha' ! Alias

      sender.ref (                  $COM_k_beta                   ) = $SVG_main_shaft.$SVG_bearing_A.$_k_beta ! Source object
      sender.alias (                $COM_k_beta                   ) = '$COM_shaft_bearing_A_k_beta' ! Alias

      sender.ref (                  $COM_k_gamma                  ) = $SVG_main_shaft.$SVG_bearing_A.$_k_gamma ! Source object
      sender.alias (                $COM_k_gamma                  ) = '$COM_shaft_bearing_A_k_gamma' ! Alias

      sender.ref (                  $COM_d_x                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_x ! Source object
      sender.alias (                $COM_d_x                      ) = '$COM_shaft_bearing_A_d_x' ! Alias

      sender.ref (                  $COM_d_y                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_y ! Source object
      sender.alias (                $COM_d_y                      ) = '$COM_shaft_bearing_A_d_y' ! Alias

      sender.ref (                  $COM_d_z                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_z ! Source object
      sender.alias (                $COM_d_z                      ) = '$COM_shaft_bearing_A_d_z' ! Alias

      sender.ref (                  $COM_d_alpha                  ) = $SVG_main_shaft.$SVG_bearing_A.$_d_alpha ! Source object
      sender.alias (                $COM_d_alpha                  ) = '$COM_shaft_bearing_A_d_alpha' ! Alias

      sender.ref (                  $COM_d_beta                   ) = $SVG_main_shaft.$SVG_bearing_A.$_d_beta ! Source object
      sender.alias (                $COM_d_beta                   ) = '$COM_shaft_bearing_A_d_beta' ! Alias

      sender.ref (                  $COM_d_gamma                  ) = $SVG_main_shaft.$SVG_bearing_A.$_d_gamma ! Source object
      sender.alias (                $COM_d_gamma                  ) = '$COM_shaft_bearing_A_d_gamma' ! Alias

   sendergroup.end (                $SG_bearing_A                 )                           ! $SG_main_shaft.$SG_bearing_A
   sendergroup.begin (              $SG_bearing_B                 )                           ! $SG_main_shaft.$SG_bearing_B
      sender.ref (                  $COM_x                        ) = $SVG_main_shaft.$SVG_bearing_B.$_x ! Source object
      sender.alias (                $COM_x                        ) = '$COM_shaft_bearing_B_x' ! Alias

      sender.ref (                  $COM_k_x                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_x ! Source object
      sender.alias (                $COM_k_x                      ) = '$COM_shaft_bearing_B_k_x' ! Alias

      sender.ref (                  $COM_k_y                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_y ! Source object
      sender.alias (                $COM_k_y                      ) = '$COM_shaft_bearing_B_k_y' ! Alias

      sender.ref (                  $COM_k_z                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_z ! Source object
      sender.alias (                $COM_k_z                      ) = '$COM_shaft_bearing_B_k_z' ! Alias

      sender.ref (                  $COM_k_alpha                  ) = $SVG_main_shaft.$SVG_bearing_B.$_k_alpha ! Source object
      sender.alias (                $COM_k_alpha                  ) = '$COM_shaft_bearing_B_k_alpha' ! Alias

      sender.ref (                  $COM_k_beta                   ) = $SVG_main_shaft.$SVG_bearing_B.$_k_beta ! Source object
      sender.alias (                $COM_k_beta                   ) = '$COM_shaft_bearing_B_k_beta' ! Alias

      sender.ref (                  $COM_k_gamma                  ) = $SVG_main_shaft.$SVG_bearing_B.$_k_gamma ! Source object
      sender.alias (                $COM_k_gamma                  ) = '$COM_shaft_bearing_B_k_gamma' ! Alias

      sender.ref (                  $COM_d_x                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_x ! Source object
      sender.alias (                $COM_d_x                      ) = '$COM_shaft_bearing_B_d_x' ! Alias

      sender.ref (                  $COM_d_y                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_y ! Source object
      sender.alias (                $COM_d_y                      ) = '$COM_shaft_bearing_B_d_y' ! Alias

      sender.ref (                  $COM_d_z                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_z ! Source object
      sender.alias (                $COM_d_z                      ) = '$COM_shaft_bearing_B_d_z' ! Alias

      sender.ref (                  $COM_d_alpha                  ) = $SVG_main_shaft.$SVG_bearing_B.$_d_alpha ! Source object
      sender.alias (                $COM_d_alpha                  ) = '$COM_shaft_bearing_B_d_alpha' ! Alias

      sender.ref (                  $COM_d_beta                   ) = $SVG_main_shaft.$SVG_bearing_B.$_d_beta ! Source object
      sender.alias (                $COM_d_beta                   ) = '$COM_shaft_bearing_B_d_beta' ! Alias

      sender.ref (                  $COM_d_gamma                  ) = $SVG_main_shaft.$SVG_bearing_B.$_d_gamma ! Source object
      sender.alias (                $COM_d_gamma                  ) = '$COM_shaft_bearing_B_d_gamma' ! Alias

   sendergroup.end (                $SG_bearing_B                 )                           ! $SG_main_shaft.$SG_bearing_B
sendergroup.end (                   $SG_main_shaft                )                           ! $SG_main_shaft

sendergroup.begin (                 $SG_stage_01                  )                           ! $SG_stage_01
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_01.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_01_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_01.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_01_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_01.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_01_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_01.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_01_helix_angle' ! Alias

   sender.ref (                     $COM_num_planets              ) = $SVG_stage_01.$_num_planets ! Source object
   sender.alias (                   $COM_num_planets              ) = '$COM_stage_01_num_planets' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_01.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_01_normal_backlash' ! Alias

   sender.ref (                     $COM_k_SP                     ) = $SVG_stage_01.$_k_SP    ! Source object
   sender.alias (                   $COM_k_SP                     ) = '$COM_stage_01_k_SP'    ! Alias

   sender.ref (                     $COM_k_RP                     ) = $SVG_stage_01.$_k_RP    ! Source object
   sender.alias (                   $COM_k_RP                     ) = '$COM_stage_01_k_RP'    ! Alias

   sender.ref (                     $COM_tooth_damping            ) = $SVG_stage_01.$_tooth_damping ! Source object
   sender.alias (                   $COM_tooth_damping            ) = '$COM_stage_01_tooth_damping' ! Alias

   sendergroup.begin (              $SG_sun                       )                           ! $SG_stage_01.$SG_sun
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_sun.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_sun_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_sun.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_sun_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_sun.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_sun_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_sun.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_sun_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_sun.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_sun_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_sun.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_01_sun_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_01_sun_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_01_sun_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_sun.$SG_material
   sendergroup.end (                $SG_sun                       )                           ! $SG_stage_01.$SG_sun
   sendergroup.begin (              $SG_planet                    )                           ! $SG_stage_01.$SG_planet
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_planet_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_planet.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_planet_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_planet.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_planet_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_planet.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_planet_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_planet.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_planet_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_planet.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_01_planet_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_01_planet_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_01_planet_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_planet.$SG_material
      sendergroup.begin (           $SG_bearing                   )                           ! $SG_stage_01.$SG_planet.$SG_bearing
         sender.ref (               $COM_k_x                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_01_planet_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_01_planet_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_01_planet_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_01_planet_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_01_planet_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_01_planet_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_01_planet_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_01_planet_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_01_planet_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_01_planet_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_01_planet_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_01_planet_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing                   )                           ! $SG_stage_01.$SG_planet.$SG_bearing
   sendergroup.end (                $SG_planet                    )                           ! $SG_stage_01.$SG_planet
   sendergroup.begin (              $SG_ring                      )                           ! $SG_stage_01.$SG_ring
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_ring_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_ring.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_ring_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_ring.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_ring_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_ring.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_ring_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_ring.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_ring_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_ring.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_01_ring_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_01_ring_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_01_ring_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_ring.$SG_material
   sendergroup.end (                $SG_ring                      )                           ! $SG_stage_01.$SG_ring
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_01.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_01.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_01_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_01.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_01_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_01.$SG_shaft
   sendergroup.begin (              $SG_carrier                   )                           ! $SG_stage_01.$SG_carrier
      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_01.$SG_carrier.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_01_carrier_A_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_01_carrier_A_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_01_carrier_A_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_01_carrier_A_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_01_carrier_A_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_01_carrier_A_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_01_carrier_A_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_01_carrier_A_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_01_carrier_A_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_01_carrier_A_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_01_carrier_A_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_01_carrier_A_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_01.$SG_carrier.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_01.$SG_carrier.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_01_carrier_B_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_01_carrier_B_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_01_carrier_B_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_01_carrier_B_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_01_carrier_B_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_01_carrier_B_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_01_carrier_B_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_01_carrier_B_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_01_carrier_B_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_01_carrier_B_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_01_carrier_B_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_01_carrier_B_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_01.$SG_carrier.$SG_bearing_B
   sendergroup.end (                $SG_carrier                   )                           ! $SG_stage_01.$SG_carrier
sendergroup.end (                   $SG_stage_01                  )                           ! $SG_stage_01

sendergroup.begin (                 $SG_stage_02                  )                           ! $SG_stage_02
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_02.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_02_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_02.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_02_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_02.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_02_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_02.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_02_helix_angle' ! Alias

   sender.ref (                     $COM_num_planets              ) = $SVG_stage_02.$_num_planets ! Source object
   sender.alias (                   $COM_num_planets              ) = '$COM_stage_02_num_planets' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_02.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_02_normal_backlash' ! Alias

   sender.ref (                     $COM_k_SP                     ) = $SVG_stage_02.$_k_SP    ! Source object
   sender.alias (                   $COM_k_SP                     ) = '$COM_stage_02_k_SP'    ! Alias

   sender.ref (                     $COM_k_RP                     ) = $SVG_stage_02.$_k_RP    ! Source object
   sender.alias (                   $COM_k_RP                     ) = '$COM_stage_02_k_RP'    ! Alias

   sender.ref (                     $COM_tooth_damping            ) = $SVG_stage_02.$_tooth_damping ! Source object
   sender.alias (                   $COM_tooth_damping            ) = '$COM_stage_02_tooth_damping' ! Alias

   sendergroup.begin (              $SG_sun                       )                           ! $SG_stage_02.$SG_sun
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_sun.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_sun_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_sun.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_sun_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_sun.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_sun_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_sun.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_sun_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_sun.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_sun_helix_sign' ! Alias

      sender.ref (                  $COM_x_input                  ) = $SVG_stage_02.$SVG_sun.$_x_input ! Source object
      sender.alias (                $COM_x_input                  ) = '$COM_stage_02_sun_x_input' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_sun.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_02_sun_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_02_sun_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_02_sun_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_sun.$SG_material
   sendergroup.end (                $SG_sun                       )                           ! $SG_stage_02.$SG_sun
   sendergroup.begin (              $SG_planet                    )                           ! $SG_stage_02.$SG_planet
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_planet_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_planet.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_planet_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_planet.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_planet_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_planet.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_planet_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_planet.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_planet_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_planet.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_02_planet_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_02_planet_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_02_planet_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_planet.$SG_material
      sendergroup.begin (           $SG_bearing                   )                           ! $SG_stage_02.$SG_planet.$SG_bearing
         sender.ref (               $COM_k_x                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_02_planet_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_02_planet_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_02_planet_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_02_planet_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_02_planet_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_02_planet_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_02_planet_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_02_planet_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_02_planet_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_02_planet_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_02_planet_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_02_planet_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing                   )                           ! $SG_stage_02.$SG_planet.$SG_bearing
   sendergroup.end (                $SG_planet                    )                           ! $SG_stage_02.$SG_planet
   sendergroup.begin (              $SG_ring                      )                           ! $SG_stage_02.$SG_ring
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_ring.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_ring_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_ring.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_ring_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_ring.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_ring_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_ring.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_ring_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_ring.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_ring_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_ring.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_02_ring_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_02_ring_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_02_ring_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_ring.$SG_material
   sendergroup.end (                $SG_ring                      )                           ! $SG_stage_02.$SG_ring
   sendergroup.begin (              $SG_carrier                   )                           ! $SG_stage_02.$SG_carrier
      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_02.$SG_carrier.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_02_carrier_A_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_02_carrier_A_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_02_carrier_A_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_02_carrier_A_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_02_carrier_A_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_02_carrier_A_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_02_carrier_A_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_02_carrier_A_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_02_carrier_A_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_02_carrier_A_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_02_carrier_A_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_02_carrier_A_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_02.$SG_carrier.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_02.$SG_carrier.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_02_carrier_B_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_02_carrier_B_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_02_carrier_B_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_02_carrier_B_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_02_carrier_B_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_02_carrier_B_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_02_carrier_B_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_02_carrier_B_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_02_carrier_B_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_02_carrier_B_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_02_carrier_B_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_02_carrier_B_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_02.$SG_carrier.$SG_bearing_B
   sendergroup.end (                $SG_carrier                   )                           ! $SG_stage_02.$SG_carrier
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_02.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_02.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_02_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_02.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_02_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_02.$SG_shaft
sendergroup.end (                   $SG_stage_02                  )                           ! $SG_stage_02

sendergroup.begin (                 $SG_stage_03                  )                           ! $SG_stage_03
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_03.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_03_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_03.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_03_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_03.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_03_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_03.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_03_helix_angle' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_03.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_03_normal_backlash' ! Alias

   sender.ref (                     $COM_tooth_damping            ) = $SVG_stage_03.$_tooth_damping ! Source object
   sender.alias (                   $COM_tooth_damping            ) = '$COM_stage_03_tooth_damping' ! Alias

   sender.ref (                     $COM_k_PW                     ) = $SVG_stage_03.$_k_PW    ! Source object
   sender.alias (                   $COM_k_PW                     ) = '$COM_stage_03_k_PW'    ! Alias

   sendergroup.begin (              $SG_pinion                    )                           ! $SG_stage_03.$SG_pinion
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_03_pinion_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_03.$SVG_pinion.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_03_pinion_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_03.$SVG_pinion.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_03_pinion_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_03.$SVG_pinion.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_03_pinion_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_03.$SVG_pinion.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_03_pinion_helix_sign' ! Alias

      sender.ref (                  $COM_x_input                  ) = $SVG_stage_03.$SVG_pinion.$_x_input ! Source object
      sender.alias (                $COM_x_input                  ) = '$COM_stage_03_pinion_x_input' ! Alias

      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_A_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_A_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_A_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_A_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_A_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_A_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_A_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_A_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_A_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_A_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_A_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_A_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_B_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_B_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_B_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_B_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_B_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_B_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_B_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_B_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_B_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_B_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_B_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_B_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_B
      sendergroup.begin (           $SG_bearing_C                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_C
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_C_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_C_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_C_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_C_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_C_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_C_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_C_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_C_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_C_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_C_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_C_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_C_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_C                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_C
      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_03.$SG_pinion.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_03_pinion_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_03_pinion_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_03_pinion_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_03.$SG_pinion.$SG_material
   sendergroup.end (                $SG_pinion                    )                           ! $SG_stage_03.$SG_pinion
   sendergroup.begin (              $SG_wheel                     )                           ! $SG_stage_03.$SG_wheel
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_03.$SVG_wheel.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_03_wheel_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_03.$SVG_wheel.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_03_wheel_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_03.$SVG_wheel.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_03_wheel_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_03.$SVG_wheel.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_03_wheel_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_03.$SVG_wheel.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_03_wheel_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_03.$SG_wheel.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_03_wheel_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_03_wheel_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_03_wheel_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_03.$SG_wheel.$SG_material
      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_A_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_A_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_A_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_A_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_A_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_A_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_A_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_A_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_A_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_A_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_A_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_A_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_B_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_B_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_B_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_B_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_B_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_B_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_B_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_B_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_B_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_B_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_B_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_B_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_B
      sendergroup.begin (           $SG_bearing_C                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_C
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_C_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_C_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_C_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_C_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_C_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_C_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_C_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_C_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_C_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_C_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_C_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_C_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_C                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_C
   sendergroup.end (                $SG_wheel                     )                           ! $SG_stage_03.$SG_wheel
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_03.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_03.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_03_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_03.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_03_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_03.$SG_shaft
sendergroup.end (                   $SG_stage_03                  )                           ! $SG_stage_03

sendergroup.begin (                 $SG_housing                   )                           ! $SG_housing
   sender.ref (                     $COM_length                   ) = $SVG_housing.$_length   ! Source object
   sender.alias (                   $COM_length                   ) = '$COM_housing_length'   ! Alias

   sender.ref (                     $COM_width                    ) = $SVG_housing.$_width    ! Source object
   sender.alias (                   $COM_width                    ) = '$COM_housing_width'    ! Alias

   sendergroup.begin (              $SG_marker_s01                )                           ! $SG_housing.$SG_marker_s01
      sender.ref (                  $COM_stage_01_ring            ) = $M_housing_S01_ring     ! Source object
      sender.alias (                $COM_stage_01_ring            ) = ''                      ! Alias
      sender.txt (                  $COM_stage_01_ring            ) = ''                      ! Comment

      sender.ref (                  $COM_stage_01_PLC_A           ) = $M_housing_S01_PLC_A    ! Source object
      sender.alias (                $COM_stage_01_PLC_A           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_01_PLC_A           ) = ''                      ! Comment

      sender.ref (                  $COM_stage_01_PLC_B           ) = $M_housing_S01_PLC_B    ! Source object
      sender.alias (                $COM_stage_01_PLC_B           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_01_PLC_B           ) = ''                      ! Comment

      sender.ref (                  $COM_stage_01_shaft           ) = $M_housing_S01_shaft    ! Source object
      sender.alias (                $COM_stage_01_shaft           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_01_shaft           ) = ''                      ! Comment

   sendergroup.end (                $SG_marker_s01                )                           ! $SG_housing.$SG_marker_s01
   sendergroup.txt (                $SG_marker_s01                ) = ''                      ! Comment
   sendergroup.begin (              $SG_marker_s02                )                           ! $SG_housing.$SG_marker_s02
      sender.ref (                  $COM_stage_02_ring            ) = $M_housing_S02_ring     ! Source object
      sender.alias (                $COM_stage_02_ring            ) = ''                      ! Alias
      sender.txt (                  $COM_stage_02_ring            ) = ''                      ! Comment

      sender.ref (                  $COM_stage_02_PLC_A           ) = $M_housing_S02_PLC_A    ! Source object
      sender.alias (                $COM_stage_02_PLC_A           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_02_PLC_A           ) = ''                      ! Comment

      sender.ref (                  $COM_stage_02_PLC_B           ) = $M_housing_S02_PLC_B    ! Source object
      sender.alias (                $COM_stage_02_PLC_B           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_02_PLC_B           ) = ''                      ! Comment

      sender.ref (                  $COM_stage_02_shaft           ) = $M_housing_S02_shaft    ! Source object
      sender.alias (                $COM_stage_02_shaft           ) = ''                      ! Alias
      sender.txt (                  $COM_stage_02_shaft           ) = ''                      ! Comment

   sendergroup.end (                $SG_marker_s02                )                           ! $SG_housing.$SG_marker_s02
   sendergroup.txt (                $SG_marker_s02                ) = ''                      ! Comment
   sendergroup.begin (              $SG_marker_s03                )                           ! $SG_housing.$SG_marker_s03
      sender.ref (                  $COM_stage_03_PA              ) = $M_housing_S03_PA       ! Source object
      sender.alias (                $COM_stage_03_PA              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_PA              ) = ''                      ! Comment

      sender.ref (                  $COM_stage_03_PB              ) = $M_housing_S03_PB       ! Source object
      sender.alias (                $COM_stage_03_PB              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_PB              ) = ''                      ! Comment

      sender.ref (                  $COM_stage_03_PC              ) = $M_housing_S03_PC       ! Source object
      sender.alias (                $COM_stage_03_PC              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_PC              ) = ''                      ! Comment

      sender.ref (                  $COM_stage_03_WA              ) = $M_housing_S03_WA       ! Source object
      sender.alias (                $COM_stage_03_WA              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_WA              ) = ''                      ! Comment

      sender.ref (                  $COM_stage_03_WB              ) = $M_housing_S03_WB       ! Source object
      sender.alias (                $COM_stage_03_WB              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_WB              ) = ''                      ! Comment

      sender.ref (                  $COM_stage_03_WC              ) = $M_housing_S03_WC       ! Source object
      sender.alias (                $COM_stage_03_WC              ) = ''                      ! Alias
      sender.txt (                  $COM_stage_03_WC              ) = ''                      ! Comment

   sendergroup.end (                $SG_marker_s03                )                           ! $SG_housing.$SG_marker_s03
   sendergroup.txt (                $SG_marker_s03                ) = ''                      ! Comment
sendergroup.end (                   $SG_housing                   )                           ! $SG_housing

sendergroup.begin (                 $SG_bed_plate                 )                           ! $SG_bed_plate
   sender.ref (                     $COM_length                   ) = $SVG_bed_plate.$_length ! Source object
   sender.alias (                   $COM_length                   ) = '$COM_bed_plate_length' ! Alias

   sender.ref (                     $COM_width                    ) = $SVG_bed_plate.$_width  ! Source object
   sender.alias (                   $COM_width                    ) = '$COM_bed_plate_width'  ! Alias

   sender.ref (                     $COM_z0                       ) = $SVG_bed_plate.$_z0     ! Source object
   sender.alias (                   $COM_z0                       ) = '$COM_bed_plate_z0'     ! Alias

   sendergroup.begin (              $SG_marker                    )                           ! $SG_bed_plate.$SG_marker
      sender.ref (                  $COM_bed_plate_main_shaft     ) = $M_bed_plate_main_shaft ! Source object
      sender.alias (                $COM_bed_plate_main_shaft     ) = '$COM_shaft_input'      ! Alias
      sender.txt (                  $COM_bed_plate_main_shaft     ) = ''                      ! Comment

      sender.ref (                  $COM_bed_plate_INP_A          ) = $M_bed_plate_INP_A      ! Source object
      sender.alias (                $COM_bed_plate_INP_A          ) = '$COM_shaft_bearing_A'  ! Alias
      sender.txt (                  $COM_bed_plate_INP_A          ) = ''                      ! Comment

      sender.ref (                  $COM_bed_plate_INP_B          ) = $M_bed_plate_INP_B      ! Source object
      sender.alias (                $COM_bed_plate_INP_B          ) = '$COM_shaft_bearing_B'  ! Alias
      sender.txt (                  $COM_bed_plate_INP_B          ) = ''                      ! Comment

      sender.ref (                  $COM_bed_plate_housing        ) = $M_bed_plate_housing    ! Source object
      sender.alias (                $COM_bed_plate_housing        ) = ''                      ! Alias
      sender.txt (                  $COM_bed_plate_housing        ) = ''                      ! Comment

   sendergroup.end (                $SG_marker                    )                           ! $SG_bed_plate.$SG_marker
   sendergroup.txt (                $SG_marker                    ) = ''                      ! Comment
sendergroup.end (                   $SG_bed_plate                 )                           ! $SG_bed_plate

sendergroup.begin (                 $SG_gear_params               )                           ! $SG_gear_params
   sender.ref (                     $COM_mesh_flag                ) = $SVG_gear_params.$_mesh_flag ! Source object

   sender.ref (                     $COM_tooth_stiffness_ratio    ) = $SVG_gear_params.$_tooth_stiffness_ratio ! Source object

   sender.ref (                     $COM_x0_full_damping          ) = $SVG_gear_params.$_x0_full_damping ! Source object

   sender.ref (                     $COM_regularization_vel       ) = $SVG_gear_params.$_regularization_vel ! Source object

sendergroup.end (                   $SG_gear_params               )                           ! $SG_gear_params

!**********************************************************************
! Receivers
!**********************************************************************
receiver.ref (                      $COM_rated_power              ) = $_rated_power           ! Destination object

receiver.ref (                      $COM_inertia_flag             ) = $_inertia_flag          ! Destination object

receiver.ref (                      $COM_generator_flag           ) = $SVG_loading.$_generator_flag ! Destination object

receiver.ref (                      $COM_mesh_flag                ) = $SVG_gear_params.$_mesh_flag ! Destination object

receiver.ref (                      $COM_rotor_mass               ) = $SVG_rotor.$_mass       ! Destination object

receiver.ref (                      $COM_rotor_mass_mom_inertia   ) = $SVG_rotor.$_mass_mom_inertia ! Destination object

receiver.ref (                      $COM_generator_mass           ) = $SVG_generator.$_mass   ! Destination object

receiver.ref (                      $COM_generator_mass_mom_inertia) = $SVG_generator.$_mass_mom_inertia ! Destination object

receiver.ref (                      $COM_generator_K_P            ) = $SVG_generator.$_K_P    ! Destination object

receiver.ref (                      $COM_generator_K_I            ) = $SVG_generator.$_K_I    ! Destination object

receiver.ref (                      $COM_housing_length           ) = $SVG_housing.$_length   ! Destination object

receiver.ref (                      $COM_housing_width            ) = $SVG_housing.$_width    ! Destination object

receiver.ref (                      $COM_bed_plate_length         ) = $SVG_bed_plate.$_length ! Destination object

receiver.ref (                      $COM_bed_plate_width          ) = $SVG_bed_plate.$_width  ! Destination object

receiver.ref (                      $COM_main_shaft_x_A           ) = $SVG_main_shaft.$SVG_bearing_A.$_x ! Destination object

receiver.ref (                      $COM_main_shaft_x_B           ) = $SVG_main_shaft.$SVG_bearing_B.$_x ! Destination object

receiver.ref (                      $COM_base_excitation_flag     ) = $SVG_loading.$_base_excitation_flag ! Destination object

receiver.ref (                      $COM_gamma_Torque) = $SVG_loading.$_gamma_Torque ! Destination object

receiver.ref (                      $COM_gamma_Force ) = $SVG_loading.$_gamma_Force ! Destination object

receiver.ref (                      $COM_gamma_Disp  ) = $SVG_loading.$_gamma_Disp ! Destination object


! Overwritten substructure values
joint.st.pos (            1 ,       $S_main_shaft.$S_TPL.$J_shaft ) = -8.80281861366398119E-03 ! Position
joint.st.pos (            2 ,       $S_main_shaft.$S_TPL.$J_shaft ) = -5.32398039866964894E-05 ! Position
joint.st.pos (            3 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 8.93452081407285562E-03 ! Position
joint.st.pos (            4 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 4.53788377465976434E-19 ! Velocity
joint.st.vel (            2 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 2.63982826156728439E-18 ! Velocity
joint.st.vel (            3 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 1.44861524003752995E-18 ! Velocity
joint.st.vel (            4 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $S_main_shaft.$S_TPL.$J_shaft ) = 0.00000000000000000E+00 ! Velocity


view.fclip.value (                  $S_stage_01.$S_TPL.$V_WorkingView) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $S_stage_01.$S_TPL.$V_WorkingView) = 5.31139945983886719E+00 ! Back clipping plane value

joint.st.pos (            1 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 1.52248365951775655E-02 ! Position
joint.st.pos (            2 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 1.53113218037434218E-02 ! Position
joint.st.pos (            3 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -1.88846753975943950E-02 ! Position
joint.st.pos (            4 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -8.35002088594721456E-03 ! Position
joint.st.pos (            6 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -6.72212865055781331E-03 ! Position
joint.st.vel (            1 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -3.93400445815377304E-19 ! Velocity
joint.st.vel (            2 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -1.72434908543155555E-18 ! Velocity
joint.st.vel (            3 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 2.48809979350105746E-18 ! Velocity
joint.st.vel (            4 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 1.34005549287847330E-18 ! Velocity
joint.st.vel (            6 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -3.27011386869374231E-18 ! Velocity
joint.attr.2d.pos.x (     1 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 530
joint.attr.2d.pos.y (     1 ,       $S_stage_01.$S_TPL.$J_shaft   ) = -40
joint.attr.2d.ori (       1 ,       $S_stage_01.$S_TPL.$J_shaft   ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$J_shaft) = 570, 570, 620, 620, 620, 620, 620, 620, 620, 620, 610, 590, 580, 570, 560, 550, 540, 530, 520, 510, 503, 503, 503, 503, 513
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$J_shaft) = 180, 170, 170, 165.25390625, 151.015625, 132.03125, 119.375, 102.5, 80, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -20, -30, -40, -40
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$J_shaft) = 550, 550, 547
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$J_shaft) = 0, -40, -40


sender.alias (                      $S_stage_01.$S_TPL.$COM_stage_ratio) = '$COM_stage_01_ratio' ! Alias

joint.st.pos (            5 ,       $S_stage_01.$S_TPL.$S_planet_01.$S_TPL.$J_pin) = -3.27291994416329737E-02 ! Position


joint.st.pos (            5 ,       $S_stage_01.$S_TPL.$S_planet_02.$S_TPL.$J_pin) = 6.51464342236726097E-13 ! Position
joint.st.vel (            5 ,       $S_stage_01.$S_TPL.$S_planet_02.$S_TPL.$J_pin) = 3.73667229587361402E-18 ! Velocity


joint.attr.2d.pos.x (     1 ,       $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 730
joint.attr.2d.pos.y (     1 ,       $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = -50
joint.attr.2d.ori (       1 ,       $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 560, 560, 631.5, 631.5, 631.5, 631.5, 631.5, 631.5, 631.5, 703, 703, 703, 703, 713
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 180, 170, 170, 159.98046875, 129.921875, 116.5625, 63.125, 27.5, -20, -20, -30, -40, -50, -50
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 600, 600, 757, 757, 747
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_ring.$S_TPL.$J_ring) = 0, -20, -20, -50, -50


joint.attr.2d.pos.x (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 320
joint.attr.2d.pos.y (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 20
joint.attr.2d.ori (       1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 310, 300, 300, 303
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 190, 190, 20, 20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 460, 367.75, 367.75, 337
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 30, 30, 20, 20


force.attr.2d.pos.x (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 600
force.attr.2d.pos.y (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = -40
force.attr.2d.ori (       1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 580, 620, 620, 610, 600, 590, 573, 573, 573, 573, 583
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 190, 190, -10, -10, -10, -10, -10, -20, -30, -40, -40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 590, 590, 640.625, 640.625, 640.625, 640.625, 630.5, 617
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 0, -10, -10, -13.75, -25, -40, -40, -40

force.attr.2d.pos.x (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 660
force.attr.2d.pos.y (     1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = -50
force.attr.2d.ori (       1 ,       $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 550, 550, 619.75, 619.75, 619.75, 619.75, 619.75, 619.75, 619.75, 619.75, 619.75, 619.75, 643
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 180, 170, 170, 165.1055908203125, 150.42236328125, 130.8447265625, 117.79296875, 100.390625, 77.1875, 46.25, 5, -50, -50
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 610, 660.078125, 660.078125, 673.4375, 691.25, 691.25, 691.25, 677
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_01.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 10, 10, -23.75, -23.75, -23.75, -35, -50, -50

view.fclip.value (                  $S_stage_02.$S_TPL.$V_WorkingView) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $S_stage_02.$S_TPL.$V_WorkingView) = 5.31139945983886719E+00 ! Back clipping plane value

joint.st.pos (            1 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $S_stage_02.$S_TPL.$J_shaft   ) = -3.52470375736083563E-03 ! Position
joint.st.pos (            3 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $S_stage_02.$S_TPL.$J_shaft   ) = -2.16718379262046228E-02 ! Position
joint.st.pos (            6 ,       $S_stage_02.$S_TPL.$J_shaft   ) = -3.77113637840409020E-03 ! Position
joint.st.vel (            1 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 4.82047744755444171E-18 ! Velocity
joint.st.vel (            3 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $S_stage_02.$S_TPL.$J_shaft   ) = -2.43095142046171759E-20 ! Velocity
joint.st.vel (            6 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 7.68211942764661055E-18 ! Velocity
joint.attr.2d.pos.x (     1 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 800
joint.attr.2d.pos.y (     1 ,       $S_stage_02.$S_TPL.$J_shaft   ) = -50
joint.attr.2d.ori (       1 ,       $S_stage_02.$S_TPL.$J_shaft   ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$J_shaft) = 580, 635.75, 635.75, 773, 773, 773, 773, 773, 783
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$J_shaft) = 200, 200, -10, -10, -20, -30, -40, -50, -50
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$J_shaft) = 790, 790, 850.625, 850.625, 850.625, 850.625, 850.625, 840.625, 830.5, 817
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$J_shaft) = 0, -10, -10, -13.75, -25, -40, -50, -50, -50, -50


sender.alias (                      $S_stage_02.$S_TPL.$COM_stage_ratio) = '$COM_stage_02_ratio' ! Alias

joint.st.pos (            5 ,       $S_stage_02.$S_TPL.$S_planet_01.$S_TPL.$J_pin) = 4.16251645342432391E-02 ! Position
joint.st.vel (            5 ,       $S_stage_02.$S_TPL.$S_planet_01.$S_TPL.$J_pin) = -4.21389801903535518E-18 ! Velocity


joint.attr.2d.pos.x (     1 ,       $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 1000
joint.attr.2d.pos.y (     1 ,       $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = -60
joint.attr.2d.ori (       1 ,       $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 540, 540, 963, 963, 973, 983
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 180, 112.5, 112.5, -60, -60, -60
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 780, 780, 1047, 1047, 1047, 1047, 1047, 1037, 1027, 1017
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_ring.$S_TPL.$J_ring) = 0, -10, -10, -14.6875, -28.75, -47.5, -60, -60, -60, -60


joint.from (                        $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = $S_stage_01.$S_TPL.$M_shaft_output ! From Marker
joint.type (                        $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0      ! Type
joint.par (               1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 390
joint.attr.2d.pos.y (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 10
joint.attr.2d.ori (       1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 460, 407
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 10, 10
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 650, 640, 640, 635.60059356689453, 622.40237426757813, 604.80474853515625, 593.072998046875, 577.4306640625, 556.57421875, 528.765625, 491.6875, 442.25, 442.25, 442.25, 442.25, 442.25, 442.25, 442.25, 373, 373, 373, 363, 363, 373
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 10, 10, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -10, 0, 10, 20, 30, 40, 40, 30, 20, 20, 10, 10


force.attr.2d.pos.x (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 870
force.attr.2d.pos.y (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = -60
force.attr.2d.ori (       1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 580, 843, 843, 853
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 210, 210, -60, -60
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 800, 906.25, 906.25, 887
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_A) = 10, 10, -60, -60

force.attr.2d.pos.x (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 940
force.attr.2d.pos.y (     1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = -60
force.attr.2d.ori (       1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 530, 530, 893, 893, 903, 913, 923
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 180, 112.5, 112.5, -60, -60, -60, -60
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 770, 770, 977, 977, 977, 977, 977, 967, 957
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$F_bearing_B) = 0, -10, -10, -14.6875, -28.75, -47.5, -60, -60, -60

body.attr.2d.pos.x (                $S_stage_03.$S_TPL.$B_shaft   ) = 6.20000000000000000E+02
body.attr.2d.pos.y (                $S_stage_03.$S_TPL.$B_shaft   ) = -1.20000000000000000E+02
body.attr.2d.width (                $S_stage_03.$S_TPL.$B_shaft   ) = 5.00000000000000000E+01
body.attr.2d.height (               $S_stage_03.$S_TPL.$B_shaft   ) = 3.00000000000000000E+01

joint.from (                        $S_stage_03.$S_TPL.$J_shaft   ) = $M_housing_S03_shaft    ! From Marker
joint.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$J_shaft   ) = $S_stage_03.$S_TPL
joint.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$J_shaft   ) = 460
joint.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$J_shaft   ) = -90
joint.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$J_shaft   ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 120, 120, 130, 140, 413, 413, 413, 423, 433, 443
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = -10, 10, 10, 10, 10, 0, -90, -90, -90, -90
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 630, 630, 487, 487, 477
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = -90, -80, -80, -90, -90
joint.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$J_shaft   ) = 1380
joint.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$J_shaft   ) = 230
joint.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$J_shaft   ) = 0
joint.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 580, 590, 590, 1363
joint.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 220, 220, 230, 230
joint.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 1400, 1400, 1397
joint.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$J_shaft) = 80, 230, 230


body.attr.2d.pos.x (                $S_stage_03.$S_TPL.$BG_pinion.$B_pin) = 5.20000000000000000E+02
body.attr.2d.pos.y (                $S_stage_03.$S_TPL.$BG_pinion.$B_pin) = -1.20000000000000000E+02
body.attr.2d.width (                $S_stage_03.$S_TPL.$BG_pinion.$B_pin) = 5.00000000000000000E+01
body.attr.2d.height (               $S_stage_03.$S_TPL.$BG_pinion.$B_pin) = 3.00000000000000000E+01

joint.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = $S_stage_03.$S_TPL
joint.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = 790
joint.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = -150
joint.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = 660, 660, 744.75, 744.75, 773
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = -120, -170, -170, -150, -150
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = 550, 550, 847, 847, 837, 827, 817, 807
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_pin) = -120, -170, -170, -150, -150, -150, -150, -150


body.attr.2d.pos.x (                $S_stage_03.$S_TPL.$BG_pinion.$B_gear) = 8.60000000000000000E+02
body.attr.2d.pos.y (                $S_stage_03.$S_TPL.$BG_pinion.$B_gear) = -1.80000000000000000E+02
body.attr.2d.width (                $S_stage_03.$S_TPL.$BG_pinion.$B_gear) = 5.00000000000000000E+01
body.attr.2d.height (               $S_stage_03.$S_TPL.$BG_pinion.$B_gear) = 3.00000000000000000E+01

joint.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = $S_stage_03.$S_TPL
joint.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = 720
joint.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = -150
joint.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = 560, 560, 703
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = -120, -150, -150
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = 860, 765.25, 765.25, 765.25, 737
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_pinion.$J_gear) = -170, -170, -160, -150, -150


joint.from (                        $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = $S_stage_02.$S_TPL.$M_shaft_output ! From Marker
joint.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 770
joint.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 10
joint.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 800, 804.25, 804.25, 787
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 20, 20, 10, 10
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 1310, 616.25, 616.25, 753
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = 50, 50, 10, 10


body.attr.2d.pos.x (                $S_stage_03.$S_TPL.$BG_wheel.$B_gear) = 5.20000000000000000E+02
body.attr.2d.pos.y (                $S_stage_03.$S_TPL.$BG_wheel.$B_gear) = -1.00000000000000000E+01
body.attr.2d.width (                $S_stage_03.$S_TPL.$BG_wheel.$B_gear) = 5.00000000000000000E+01
body.attr.2d.height (               $S_stage_03.$S_TPL.$BG_wheel.$B_gear) = 3.00000000000000000E+01

joint.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = $S_stage_03.$S_TPL
joint.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 460
joint.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = -10
joint.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 70, 70, 433, 433, 433, 433, 443
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 30, 20, 20, 16.25, 5, -10, -10
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 520, 501.75, 501.75, 477
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$BG_wheel.$J_gear) = 0, 0, -10, -10


force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel) = 730
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel) = -80
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel) = 870, 870, 777.75, 777.75, 747
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel) = -150, -125, -125, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel) = 560, 560, 713
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel) = -10, -80, -80

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = 800
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = -80
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = 880, 880, 817
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = -150, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = 550, 550, 773, 773, 773, 773, 773, 773, 783
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$F_pinion_wheel_basic) = -10, -20, -20, -24.21875, -36.875, -53.75, -65, -80, -80

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 250
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = -60
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 140, 140, 209.75, 209.75, 209.75, 209.75, 233
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = -10, -8.4375, -8.4375, -33.75, -45, -60, -60
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 530, 530, 267
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = -90, -60, -60
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 1370
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 460
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 520, 520, 480, 480, 480, 480, 480, 500, 510, 520, 530, 550, 570, 580, 590, 1353
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 240, 294.296875, 294.296875, 338.59375, 368.125, 407.5, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 1390, 1390, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1390, 1387
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_A) = 80, 106.4630126953125, 106.4630126953125, 122.926025390625, 133.9013671875, 148.53515625, 207.0703125, 246.09375, 298.125, 367.5, 460, 460, 460

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 320
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = -80
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 150, 140.8125, 140.8125, 173.25, 303
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 0, 0, -80, -80, -80
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 520, 367, 367, 367, 367, 357, 347, 337
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = -110, -110, -100, -90, -80, -80, -80, -80
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 1370
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 410
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 510, 510, 480, 480, 480, 480, 480, 480, 480, 490, 500, 510, 520, 530, 540, 550, 570, 580, 590, 1353
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 240, 254.21875, 254.21875, 266.875, 283.75, 295, 310, 370, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410, 410
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 1410, 1410, 1400, 1390, 1387
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_B) = 80, 410, 410, 410, 410

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 390
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = -90
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 110, 110, 130, 140, 343, 343, 343, 353, 363, 373
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = -10, 10, 10, 10, 10, 0, -90, -90, -90, -90
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 540, 540, 440.25, 440.25, 440.25, 407
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = -90, -70, -70, -80, -90, -90
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 1440
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 370
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 540, 540, 662.5, 662.5, 662.5, 662.5, 610, 580, 560, 550, 540, 540, 1423
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 240, 253.4375, 253.4375, 263.75, 277.5, 360, 360, 360, 360, 360, 360, 370, 370
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 1440, 1467, 1467, 1457
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_pinion_bearing.$F_C) = 60, 60, 370, 370

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 260
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = -10
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 130, 130, 243
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = -10, -10, -10
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 60, 60, 297, 297, 297, 297, 287, 277
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 30, 20, 20, 16.25, 5, -10, -10, -10
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 1430
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 330
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 570, 570, 639.03125, 639.03125, 649.03125, 675.375, 780.75, 1413
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 240, 270, 270, 330, 330, 330, 330, 330
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 1440, 1450, 1450, 1447
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_A) = 70, 70, 330, 330

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 320
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = -10
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 150, 149.5625, 149.5625, 178.25, 293, 293, 293, 303
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 19.999999999999996, 19.999999999999996, 20, 20, 20, 10, -10, -10
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 80, 347, 347, 337
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 40, 40, -10, -10
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 1340
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 140
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 500, 493.75, 493.75, 505, 550, 560, 1323
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 220, 220, 140, 140, 140, 140, 140
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 1360, 1360, 1357
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_B) = 80, 140, 140

force.attr.2d.substr (    1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = $S_stage_03.$S_TPL
force.attr.2d.pos.x (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 390
force.attr.2d.pos.y (     1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = -10
force.attr.2d.ori (       1 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 150, 149.515625, 149.515625, 178.0625, 190.75, 343, 343, 343, 353, 363, 373
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 10, 10, 20, 20, 20, 20, 10, -10, -10, -10, -10
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 50, 50, 437, 437, 437, 437, 427, 417, 407
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 30, 20, 20, 16.25, 5, -10, -10, -10, -10
force.attr.2d.pos.x (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 1350
force.attr.2d.pos.y (     2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 180
force.attr.2d.ori (       2 ,       $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 0
force.attr.2d.paths.from.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 550, 550, 598.9375, 598.9375, 598.9375, 745.75, 1333
force.attr.2d.paths.from.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 240, 245.625, 245.625, 232.5, 180, 180, 180
force.attr.2d.paths.to.x (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 1370, 1370, 1367
force.attr.2d.paths.to.y (   2 ,   1 ,   1 ,   1 , $S_stage_03.$S_TPL.$FEG_wheel_bearing.$F_C) = 80, 180, 180

sender.alias (                      $S_stage_03.$S_TPL.$COM_stage_ratio) = '$COM_stage_03_ratio' ! Alias

                                       
