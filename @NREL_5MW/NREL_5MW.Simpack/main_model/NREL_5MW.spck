!file.version=3.4! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20200100
version.desc   = ''
version.build  = 82

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '../database'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
prop3d.bg.base.color.r                                              = 2.15000000000000000E+02 ! Background color (red component)
prop3d.bg.base.color.g                                              = 2.15000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.15000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Substructures
!**********************************************************************
substr.file (                       $S_bed_plate                  ) = 'bed_plate.par.spck'    ! Filename
substr.id (                         $S_bed_plate                  ) = '1'                     ! Substructure Id

substr.file (                       $S_housing                    ) = 'housing.par.spck'      ! Filename
substr.id (                         $S_housing                    ) = '1'                     ! Substructure Id

substr.file (                       $S_main_shaft                 ) = 'main_shaft.par.spck'   ! Filename
substr.id (                         $S_main_shaft                 ) = '1'                     ! Substructure Id

substr.file (                       $S_stage_01                   ) = 'planetary_stage.par.spck' ! Filename
substr.id (                         $S_stage_01                   ) = '1'                     ! Substructure Id

substr.file (                       $S_stage_02                   ) = 'planetary_stage.par.spck' ! Filename
substr.id (                         $S_stage_02                   ) = '2'                     ! Substructure Id

substr.file (                       $S_stage_03                   ) = 'parallel_stage.par.spck' ! Filename
substr.id (                         $S_stage_03                   ) = '3'                     ! Substructure Id

!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 5.25845670700073242E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -8.13426589965820313E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 5.78208160400390625E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.00578582286834717E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = -1.63600016385316849E-02 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 1.88090875744819641E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 8.44852149486541748E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.59643050283193588E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.59643049240112305E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 9.11822700500488281E+00 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -5.98319292068481445E+00 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 5.31449127197265625E+00 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 4.65368509292602539E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.09595575928688049E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.64639437198638916E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 8.18210124969482422E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Ortho                      ) = 1.37513680383563042E-02 ! Front clipping plane value
view.bclip.value (                  $V_Ortho                      ) = 1.37513675689697266E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = $_simulation_time       ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.mat.enabled (            $SLV_SolverSettings           ) = 1                       ! mat file generation 0 = disable; 1 = enable
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.output.fileinlining.enabled (   $SLV_SolverSettings           ) = 0                       ! file inlining 0 = disable; 1 = enable
slv.compat.solver (                 $SLV_SolverSettings           ) = 0                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvar.str (                        $_rated_power                 ) = '5.0e3 kW'              ! Definition

subvar.str (                        $_drive_ratio                 ) = '$SVG_stage_01.$_gear_ratio*$SVG_stage_02.$_gear_ratio*$SVG_stage_03.$_gear_ratio' ! Definition

subvar.str (                        $_simulation_time             ) = '100 s'                 ! Definition

subvargroup.begin (                 $SVG_rotor                    )                           ! $SVG_rotor
   subvar.str (                     $_mass                        ) = '110.0e3 kg'            ! $SVG_rotor.$_mass, Definition

   subvar.str (                     $_mass_mom_inertia            ) = '57231535.0 kg m^2'     ! $SVG_rotor.$_mass_mom_inertia, Definition

   subvar.str (                     $_diameter                    ) = '1.2*$SVG_main_shaft.$_diameter' ! $SVG_rotor.$_diameter, Definition

   subvar.str (                     $_length                      ) = '250.0 mm'              ! $SVG_rotor.$_length, Definition

   subvar.str (                     $_rated_speed                 ) = '12.1 rpm'              ! $SVG_rotor.$_rated_speed, Definition

subvargroup.end (                   $SVG_rotor                    )                           ! $SVG_rotor

subvargroup.begin (                 $SVG_main_shaft               )                           ! $SVG_main_shaft
   subvar.str (                     $_length                      ) = '2000.0 mm'             ! $SVG_main_shaft.$_length, Definition

   subvar.str (                     $_diameter                    ) = '700.0 mm'              ! $SVG_main_shaft.$_diameter, Definition

   subvar.str (                     $_x0                          ) = '500.0 mm'              ! $SVG_main_shaft.$_x0, Definition

   subvargroup.begin (              $SVG_bearing_A                )                           ! $SVG_main_shaft.$SVG_bearing_A
      subvar.str (                  $_x                           ) = '333.0 mm'              ! $SVG_main_shaft.$SVG_bearing_A.$_x, Definition

      subvar.str (                  $_k_x                         ) = '91016 N/m'             ! $SVG_main_shaft.$SVG_bearing_A.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '9.37E+9 N/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '3.20E+9 N/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_main_shaft.$SVG_bearing_A.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.39E+6 Nm/rad'        ! $SVG_main_shaft.$SVG_bearing_A.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '4.45E+6 Nm/rad'        ! $SVG_main_shaft.$SVG_bearing_A.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_main_shaft.$SVG_bearing_A.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_A.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_A                )                           ! $SVG_main_shaft.$SVG_bearing_A
   subvargroup.begin (              $SVG_bearing_B                )                           ! $SVG_main_shaft.$SVG_bearing_B
      subvar.str (                  $_x                           ) = '1166.0 mm'             ! $SVG_main_shaft.$SVG_bearing_B.$_x, Definition

      subvar.str (                  $_k_x                         ) = '91016 N/m'             ! $SVG_main_shaft.$SVG_bearing_B.$_k_x, Definition

      subvar.str (                  $_k_y                         ) = '9.37E+9 N/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_k_y, Definition

      subvar.str (                  $_k_z                         ) = '3.20E+9 N/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_k_z, Definition

      subvar.str (                  $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_main_shaft.$SVG_bearing_B.$_k_alpha, Definition

      subvar.str (                  $_k_beta                      ) = '1.39E+6 Nm/rad'        ! $SVG_main_shaft.$SVG_bearing_B.$_k_beta, Definition

      subvar.str (                  $_k_gamma                     ) = '4.45E+6 Nm/rad'        ! $SVG_main_shaft.$SVG_bearing_B.$_k_gamma, Definition

      subvar.str (                  $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_x, Definition

      subvar.str (                  $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_y, Definition

      subvar.str (                  $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_z, Definition

      subvar.str (                  $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_main_shaft.$SVG_bearing_B.$_d_alpha, Definition

      subvar.str (                  $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_B.$_d_beta, Definition

      subvar.str (                  $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_main_shaft.$SVG_bearing_B.$_d_gamma, Definition

   subvargroup.end (                $SVG_bearing_B                )                           ! $SVG_main_shaft.$SVG_bearing_B
subvargroup.end (                   $SVG_main_shaft               )                           ! $SVG_main_shaft

subvargroup.begin (                 $SVG_stage_01                 )                           ! $SVG_stage_01
   subvar.str (                     $_normal_module               ) = '45 mm'                 ! $SVG_stage_01.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_01.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '863.0 mm'              ! $SVG_stage_01.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '0.0 deg'               ! $SVG_stage_01.$_helix_angle, Definition

   subvar.str (                     $_num_planets                 ) = '3'                     ! $SVG_stage_01.$_num_planets, Definition

   subvar.str (                     $_mesh_flag                   ) = '204'                   ! $SVG_stage_01.$_mesh_flag, Definition
   subvar.discr.desc (    1 ,       $_mesh_flag                   ) = 'advanced'              ! Description of discrete values
   subvar.discr.desc (    2 ,       $_mesh_flag                   ) = 'basic'                 ! Description of discrete values
   subvar.discr.str (     1 ,       $_mesh_flag                   ) = '225'                   ! Discrete values
   subvar.discr.str (     2 ,       $_mesh_flag                   ) = '204'                   ! Discrete values

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_01.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '500000000'             ! $SVG_stage_01.$_tooth_damping, Definition

   subvar.str (                     $_tooth_stiffness_ratio       ) = '0.8'                   ! $SVG_stage_01.$_tooth_stiffness_ratio, Definition

   subvar.str (                     $_planet_angle                ) = '(360.0 deg)/$SVG_stage_01.$_num_planets' ! $SVG_stage_01.$_planet_angle, Definition

   subvar.str (                     $_x0_full_damping             ) = '10.0e-6 m'             ! $SVG_stage_01.$_x0_full_damping, Definition

   subvar.str (                     $_regularization_vel          ) = '1.0e-3 m/s'            ! $SVG_stage_01.$_regularization_vel, Definition

   subvar.str (                     $_k_SP                        ) = '1.0e9 N/m'             ! $SVG_stage_01.$_k_SP, Definition

   subvar.str (                     $_k_RP                        ) = '1.0e9 N/m'             ! $SVG_stage_01.$_k_RP, Definition

   subvar.str (                     $_gear_ratio                  ) = '1.0 + $SVG_stage_01.$SVG_ring.$_num_teeth/$SVG_stage_01.$SVG_sun.$_num_teeth' ! $SVG_stage_01.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
      subvar.str (                  $_num_teeth                   ) = '19'                    ! $SVG_stage_01.$SVG_sun.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '491.0 mm'              ! $SVG_stage_01.$SVG_sun.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.617'                 ! $SVG_stage_01.$SVG_sun.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_sun.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_sun.$_helix_sign, Definition

      subvar.str (                  $_x_input                     ) = '$SVG_stage_01.$SVG_sun.$_flank_width/2.0' ! $SVG_stage_01.$SVG_sun.$_x_input, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_sun.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_01.$SVG_sun.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_sun.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_sun.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_sun.$SVG_material
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
      subvar.str (                  $_num_teeth                   ) = '17'                    ! $SVG_stage_01.$SVG_planet.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_01.$SVG_sun.$_flank_width' ! $SVG_stage_01.$SVG_planet.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.802'                 ! $SVG_stage_01.$SVG_planet.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_planet.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_planet.$_helix_sign, Definition

      subvargroup.begin (           $SVG_AB                       )                           ! $SVG_stage_01.$SVG_planet.$SVG_AB
         subvar.str (               $_k_x                         ) = '9.1e4 N/m'             ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '9.4e9 N/m'             ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '3.2e9 N/m'             ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.4e6 Nm/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '4.5e6 Nm/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_gamma, Definition

      subvargroup.end (             $SVG_AB                       )                           ! $SVG_stage_01.$SVG_planet.$SVG_AB
      subvargroup.begin (           $SVG_pin                      )                           ! $SVG_stage_01.$SVG_planet.$SVG_pin
         subvar.str (               $_length                      ) = '1.6*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_planet.$SVG_pin.$_length, Definition

         subvar.str (               $_diameter                    ) = '$SVG_stage_01.$SVG_planet.$_bore_diameter' ! $SVG_stage_01.$SVG_planet.$SVG_pin.$_diameter, Definition

      subvargroup.end (             $SVG_pin                      )                           ! $SVG_stage_01.$SVG_planet.$SVG_pin
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_planet.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_planet.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_planet.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_planet.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_planet.$SVG_material
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
      subvar.str (                  $_num_teeth                   ) = '56'                    ! $SVG_stage_01.$SVG_ring.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_01.$SVG_sun.$_flank_width' ! $SVG_stage_01.$SVG_ring.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '-0.501'                ! $SVG_stage_01.$SVG_ring.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_01.$SVG_ring.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_01.$SVG_ring.$_helix_sign, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_ring.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_01.$SVG_ring.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_ring.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_ring.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_ring.$SVG_material
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
      subvar.str (                  $_width                       ) = '1.8*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_carrier.$_width, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
         subvar.str (               $_k_x                         ) = '6.6e4 N/m'             ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.7e9 N/m'             ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.1e9  N/m'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '5.6e5  Nm/rad'         ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.3e+5 Nm/rad'         ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_01.$SVG_carrier.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_y' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_z' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_alpha' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_beta' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_k_gamma' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_x' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_y' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_z' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_alpha' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_beta' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_01.$SVG_carrier.$SVG_A.$_d_gamma' ! $SVG_stage_01.$SVG_carrier.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_carrier.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_carrier.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_carrier.$SVG_material
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
      subvar.str (                  $_length                      ) = '500.0 mm'              ! $SVG_stage_01.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '533.0 mm'              ! $SVG_stage_01.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_01.$SVG_planet.$_flank_width' ! $SVG_stage_01.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_01.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_01.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_01.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
subvargroup.end (                   $SVG_stage_01                 )                           ! $SVG_stage_01

subvargroup.begin (                 $SVG_stage_02                 )                           ! $SVG_stage_02
   subvar.str (                     $_normal_module               ) = '21 mm'                 ! $SVG_stage_02.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_02.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '584.0 mm'              ! $SVG_stage_02.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '0.0 deg'               ! $SVG_stage_02.$_helix_angle, Definition

   subvar.str (                     $_num_planets                 ) = '3'                     ! $SVG_stage_02.$_num_planets, Definition

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_02.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '500000000'             ! $SVG_stage_02.$_tooth_damping, Definition

   subvar.str (                     $_tooth_stiffness_ratio       ) = '0.8'                   ! $SVG_stage_02.$_tooth_stiffness_ratio, Definition

   subvar.str (                     $_planet_angle                ) = '(360.0 deg)/$SVG_stage_02.$_num_planets' ! $SVG_stage_02.$_planet_angle, Definition

   subvar.str (                     $_x0_full_damping             ) = '$SVG_stage_01.$_x0_full_damping' ! $SVG_stage_02.$_x0_full_damping, Definition

   subvar.str (                     $_regularization_vel          ) = '$SVG_stage_01.$_regularization_vel' ! $SVG_stage_02.$_regularization_vel, Definition

   subvar.str (                     $_k_SP                        ) = '1.0e9 N/m'             ! $SVG_stage_02.$_k_SP, Definition

   subvar.str (                     $_k_RP                        ) = '1.0e9 N/m'             ! $SVG_stage_02.$_k_RP, Definition

   subvar.str (                     $_gear_ratio                  ) = '1.0 + $SVG_stage_02.$SVG_ring.$_num_teeth/$SVG_stage_02.$SVG_sun.$_num_teeth' ! $SVG_stage_02.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
      subvar.str (                  $_num_teeth                   ) = '18'                    ! $SVG_stage_02.$SVG_sun.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '550.0 mm'              ! $SVG_stage_02.$SVG_sun.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.389'                 ! $SVG_stage_02.$SVG_sun.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '200.0 mm'              ! $SVG_stage_02.$SVG_sun.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_sun.$_helix_sign, Definition

      subvar.str (                  $_x_input                     ) = '$SVG_stage_02.$SVG_sun.$_flank_width/2.0' ! $SVG_stage_02.$SVG_sun.$_x_input, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_sun.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_02.$SVG_sun.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_02.$SVG_sun.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_sun.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_sun.$SVG_material
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
      subvar.str (                  $_num_teeth                   ) = '36'                    ! $SVG_stage_02.$SVG_planet.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_02.$SVG_sun.$_flank_width' ! $SVG_stage_02.$SVG_planet.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.504'                 ! $SVG_stage_02.$SVG_planet.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '380.0 mm'              ! $SVG_stage_02.$SVG_planet.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_planet.$_helix_sign, Definition

      subvargroup.begin (           $SVG_AB                       )                           ! $SVG_stage_02.$SVG_planet.$SVG_AB
         subvar.str (               $_k_x                         ) = '9.1e4 N/m'             ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '9.4e9 N/m'             ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '3.2e9 N/m'             ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '1.4e6 Nm/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '4.5e6 Nm/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_gamma, Definition

      subvargroup.end (             $SVG_AB                       )                           ! $SVG_stage_02.$SVG_planet.$SVG_AB
      subvargroup.begin (           $SVG_pin                      )                           ! $SVG_stage_02.$SVG_planet.$SVG_pin
         subvar.str (               $_length                      ) = '1.6*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_planet.$SVG_pin.$_length, Definition

         subvar.str (               $_diameter                    ) = '$SVG_stage_02.$SVG_planet.$_bore_diameter' ! $SVG_stage_02.$SVG_planet.$SVG_pin.$_diameter, Definition

      subvargroup.end (             $SVG_pin                      )                           ! $SVG_stage_02.$SVG_planet.$SVG_pin
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_planet.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_planet.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_02.$SVG_planet.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_planet.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_planet.$SVG_material
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
      subvar.str (                  $_num_teeth                   ) = '93'                    ! $SVG_stage_02.$SVG_ring.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_02.$SVG_sun.$_flank_width' ! $SVG_stage_02.$SVG_ring.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.117'                 ! $SVG_stage_02.$SVG_ring.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_02.$SVG_ring.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_02.$SVG_ring.$_helix_sign, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_ring.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_02.$SVG_ring.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_02.$SVG_ring.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_ring.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_ring.$SVG_material
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
      subvar.str (                  $_width                       ) = '1.8*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_carrier.$_width, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
         subvar.str (               $_k_x                         ) = '6.6e4 N/m'             ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.7e9 N/m'             ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.1e9  N/m'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '5.6e5  Nm/rad'         ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.3e+5 Nm/rad'         ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_02.$SVG_carrier.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_y' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_z' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_alpha' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_beta' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_k_gamma' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_x' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_y' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_z' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_alpha' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_beta' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_02.$SVG_carrier.$SVG_A.$_d_gamma' ! $SVG_stage_02.$SVG_carrier.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_carrier.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_carrier.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_carrier.$SVG_material
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
      subvar.str (                  $_length                      ) = '666.0 mm'              ! $SVG_stage_02.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '333.0 mm'              ! $SVG_stage_02.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_02.$SVG_planet.$_flank_width' ! $SVG_stage_02.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_02.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_02.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_02.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
subvargroup.end (                   $SVG_stage_02                 )                           ! $SVG_stage_02

subvargroup.begin (                 $SVG_stage_03                 )                           ! $SVG_stage_03
   subvar.str (                     $_normal_module               ) = '14 mm'                 ! $SVG_stage_03.$_normal_module, Definition

   subvar.str (                     $_pressure_angle              ) = '20 deg'                ! $SVG_stage_03.$_pressure_angle, Definition

   subvar.str (                     $_center_distance             ) = '861.0 mm'              ! $SVG_stage_03.$_center_distance, Definition

   subvar.str (                     $_helix_angle                 ) = '10.0 deg'              ! $SVG_stage_03.$_helix_angle, Definition

   subvar.str (                     $_normal_backlash             ) = '0.40 mm'               ! $SVG_stage_03.$_normal_backlash, Definition

   subvar.str (                     $_tooth_damping               ) = '500000000'             ! $SVG_stage_03.$_tooth_damping, Definition

   subvar.str (                     $_tooth_stiffness_ratio       ) = '0.8'                   ! $SVG_stage_03.$_tooth_stiffness_ratio, Definition

   subvar.str (                     $_x0_full_damping             ) = '$SVG_stage_01.$_x0_full_damping' ! $SVG_stage_03.$_x0_full_damping, Definition

   subvar.str (                     $_regularization_vel          ) = '$SVG_stage_01.$_regularization_vel' ! $SVG_stage_03.$_regularization_vel, Definition

   subvar.str (                     $_k_PW                        ) = '1.0e9 N/m'             ! $SVG_stage_03.$_k_PW, Definition

   subvar.str (                     $_gear_ratio                  ) = '$SVG_stage_03.$SVG_wheel.$_num_teeth/$SVG_stage_03.$SVG_pinion.$_num_teeth' ! $SVG_stage_03.$_gear_ratio, Definition

   subvargroup.begin (              $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
      subvar.str (                  $_num_teeth                   ) = '24'                    ! $SVG_stage_03.$SVG_pinion.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '360.0 mm'              ! $SVG_stage_03.$SVG_pinion.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.48'                  ! $SVG_stage_03.$SVG_pinion.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '200.0 mm'              ! $SVG_stage_03.$SVG_pinion.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '+1'                    ! $SVG_stage_03.$SVG_pinion.$_helix_sign, Definition

      subvar.str (                  $_x_input                     ) = '$SVG_stage_03.$SVG_pinion.$_flank_width/2.0' ! $SVG_stage_03.$SVG_pinion.$_x_input, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
         subvar.str (               $_k_x                         ) = '6.6e4 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.7e9 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.1e9  N/m'            ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '5.6e5  Nm/rad'         ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.3e+5 Nm/rad'         ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_gamma, Definition

      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_pinion.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_pinion.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_pinion.$SVG_material
   subvargroup.end (                $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
   subvargroup.begin (              $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
      subvar.str (                  $_num_teeth                   ) = '95'                    ! $SVG_stage_03.$SVG_wheel.$_num_teeth, Definition

      subvar.str (                  $_flank_width                 ) = '$SVG_stage_03.$SVG_pinion.$_flank_width' ! $SVG_stage_03.$SVG_wheel.$_flank_width, Definition

      subvar.str (                  $_shift_factor                ) = '0.669'                 ! $SVG_stage_03.$SVG_wheel.$_shift_factor, Definition

      subvar.str (                  $_bore_diameter               ) = '400.0 mm'              ! $SVG_stage_03.$SVG_wheel.$_bore_diameter, Definition

      subvar.str (                  $_helix_sign                  ) = '-1'                    ! $SVG_stage_03.$SVG_wheel.$_helix_sign, Definition

      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
         subvar.str (               $_k_x                         ) = '6.6e4 N/m'             ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '1.7e9 N/m'             ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '1.1e9  N/m'            ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '0.0 Nm/rad'            ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '5.6e5  Nm/rad'         ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '1.3e+5 Nm/rad'         ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '4.53e2 Ns/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '4.20e4 Ns/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '3.06e4 Ns/m'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '0.0 Nms/rad'           ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '34.3 Nms/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '47.8 Nms/rad'          ! $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma, Definition

      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_k_y' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_k_z' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_k_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_k_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_k_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_gamma, Definition

      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
         subvar.str (               $_k_x                         ) = '6.6e7 N/m'             ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_x, Definition

         subvar.str (               $_k_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_y, Definition

         subvar.str (               $_k_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_z, Definition

         subvar.str (               $_k_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_alpha, Definition

         subvar.str (               $_k_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_beta, Definition

         subvar.str (               $_k_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_gamma, Definition

         subvar.str (               $_d_x                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_x, Definition

         subvar.str (               $_d_y                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_y, Definition

         subvar.str (               $_d_z                         ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_z, Definition

         subvar.str (               $_d_alpha                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_alpha, Definition

         subvar.str (               $_d_beta                      ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_beta, Definition

         subvar.str (               $_d_gamma                     ) = '$SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma' ! $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_gamma, Definition

      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_wheel.$SVG_material
         subvar.str (               $_density                     ) = '7850.0 kg/m^3'         ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_wheel.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_wheel.$SVG_material
   subvargroup.end (                $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
      subvar.str (                  $_length                      ) = '1000.0 mm'             ! $SVG_stage_03.$SVG_shaft.$_length, Definition

      subvar.str (                  $_diameter                    ) = '333.0 mm'              ! $SVG_stage_03.$SVG_shaft.$_diameter, Definition

      subvar.str (                  $_x_output                    ) = '1.8*$SVG_stage_03.$SVG_wheel.$_flank_width' ! $SVG_stage_03.$SVG_shaft.$_x_output, Definition

      subvargroup.begin (           $SVG_material                 )                           ! $SVG_stage_03.$SVG_shaft.$SVG_material
         subvar.str (               $_density                     ) = '7830 kg/m^3'           ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_density, Definition

         subvar.str (               $_elasticity_modulus          ) = '206.0 N/mm^2'          ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_elasticity_modulus, Definition

         subvar.str (               $_poissons_ratio              ) = '0.3'                   ! $SVG_stage_03.$SVG_shaft.$SVG_material.$_poissons_ratio, Definition

      subvargroup.end (             $SVG_material                 )                           ! $SVG_stage_03.$SVG_shaft.$SVG_material
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
subvargroup.end (                   $SVG_stage_03                 )                           ! $SVG_stage_03

subvargroup.begin (                 $SVG_generator                )                           ! $SVG_generator
   subvar.str (                     $_mass                        ) = '110.0e3 kg'            ! $SVG_generator.$_mass, Definition

   subvar.str (                     $_mass_mom_inertia            ) = '57231535.0 kg m^2'     ! $SVG_generator.$_mass_mom_inertia, Definition

   subvar.str (                     $_diameter                    ) = '1.2*$SVG_main_shaft.$_diameter' ! $SVG_generator.$_diameter, Definition

   subvar.str (                     $_length                      ) = '250.0 mm'              ! $SVG_generator.$_length, Definition

   subvar.str (                     $_rated_speed                 ) = '$_drive_ratio*$SVG_rotor.$_rated_speed' ! $SVG_generator.$_rated_speed, Definition

   subvar.str (                     $_K_P                         ) = '2200.0'                ! $SVG_generator.$_K_P, Definition
   subvar.desc (          1 ,       $_K_P                         ) = 'Proportional gain'     ! Description

   subvar.str (                     $_K_I                         ) = '220.0'                 ! $SVG_generator.$_K_I, Definition
   subvar.desc (          1 ,       $_K_I                         ) = 'Integral gain'         ! Description

subvargroup.end (                   $SVG_generator                )                           ! $SVG_generator

subvargroup.begin (                 $SVG_housing                  )                           ! $SVG_housing
   subvar.str (                     $_x0                          ) = '($SVG_main_shaft.$_length - $SVG_main_shaft.$SVG_bearing_B.$_x)/2.0 + $SVG_main_shaft.$SVG_bearing_B.$_x' ! $SVG_housing.$_x0, Definition

   subvar.str (                     $_length                      ) = '4500.0 mm'             ! $SVG_housing.$_length, Definition

   subvar.str (                     $_width                       ) = '3000.0 mm'             ! $SVG_housing.$_width, Definition

subvargroup.end (                   $SVG_housing                  )                           ! $SVG_housing

subvargroup.begin (                 $SVG_bed_plate                )                           ! $SVG_bed_plate
   subvar.str (                     $_length                      ) = '8000.0 mm'             ! $SVG_bed_plate.$_length, Definition

   subvar.str (                     $_width                       ) = '4000.0 mm'             ! $SVG_bed_plate.$_width, Definition

   subvar.str (                     $_z0                          ) = '1750 mm'               ! $SVG_bed_plate.$_z0, Definition

subvargroup.end (                   $SVG_bed_plate                )                           ! $SVG_bed_plate

subvargroup.begin (                 $SVG_loading                  )                           ! $SVG_loading
   subvar.str (                     $_base_excitation_flag        ) = '1'                     ! $SVG_loading.$_base_excitation_flag, Definition
   subvar.discr.desc (    1 ,       $_base_excitation_flag        ) = 'ON'                    ! Description of discrete values
   subvar.discr.desc (    2 ,       $_base_excitation_flag        ) = 'OFF'                   ! Description of discrete values
   subvar.discr.str (     1 ,       $_base_excitation_flag        ) = '1'                     ! Discrete values
   subvar.discr.str (     2 ,       $_base_excitation_flag        ) = '0'                     ! Discrete values

   subvar.str (                     $_generator_flag              ) = '2'                     ! $SVG_loading.$_generator_flag, Definition
   subvar.discr.desc (    1 ,       $_generator_flag              ) = 'time series'           ! Description of discrete values
   subvar.discr.desc (    2 ,       $_generator_flag              ) = 'PI'                    ! Description of discrete values
   subvar.discr.str (     1 ,       $_generator_flag              ) = '1'                     ! Discrete values
   subvar.discr.str (     2 ,       $_generator_flag              ) = '2'                     ! Discrete values

   subvar.str (                     $_use_time_series             ) = 'IF($SVG_loading.$_generator_flag == 1)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_use_time_series, Definition

   subvar.str (                     $_use_PI                      ) = 'IF($SVG_loading.$_generator_flag == 2)\n{\n0\n}\nELSE\n{\n1\n}' ! $SVG_loading.$_use_PI, Definition

subvargroup.end (                   $SVG_loading                  )                           ! $SVG_loading

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_rotor                      ) = $SVG_rotor.$_mass       ! Mass of the Body
body.I.tens (             1 ,   1 , $B_rotor                      ) = $SVG_rotor.$_mass_mom_inertia ! Moments of inertia
body.I.tens (             2 ,   2 , $B_rotor                      ) = { $SVG_rotor.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.tens (             3 ,   3 , $B_rotor                      ) = { $SVG_rotor.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.kind (                       $B_rotor                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_rotor_BRF                  ) = 1                       ! Type
marker.parent (                     $M_rotor_BRF                  ) = $B_rotor                ! Body
marker.flx.type (                   $M_rotor_BRF                  ) = 4                       ! Flexible type

marker.type (                       $M_rotor_shaft                ) = 2                       ! Type
marker.parent (                     $M_rotor_shaft                ) = $B_rotor                ! Body
marker.pos (              1 ,       $M_rotor_shaft                ) = $SVG_rotor.$_length     ! Position

joint.from (                        $J_rotor                      ) = $S_main_shaft.$S_TPL.$M_shaft_input ! From Marker
joint.to (                          $J_rotor                      ) = $M_rotor_shaft          ! To Marker
joint.type (                        $J_rotor                      ) = 0                       ! Type
joint.par (               1 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_rotor                      ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_rotor                      ) = 2                       ! Type
prim.ref (                          $P_rotor                      ) = $M_rotor_BRF            ! Reference Marker
prim.pos (                1 ,       $P_rotor                      ) = { $SVG_rotor.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_rotor                      ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_rotor                      ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_rotor                      ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_rotor                      ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_rotor                      ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_rotor                      ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_rotor                      ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_rotor                      ) = $SVG_rotor.$_length     ! [m] Height
prim.par (                3 ,       $P_rotor                      ) = $SVG_rotor.$_diameter   ! [m] Outer diameter
prim.par (                4 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_rotor                      ) = 3.00000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_rotor                      ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_rotor                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_generator                  ) = $SVG_generator.$_mass   ! Mass of the Body
body.I.tens (             1 ,   1 , $B_generator                  ) = $SVG_generator.$_mass_mom_inertia ! Moments of inertia
body.I.tens (             2 ,   2 , $B_generator                  ) = { $SVG_generator.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.tens (             3 ,   3 , $B_generator                  ) = { $SVG_generator.$_mass_mom_inertia/2.0 } ! Moments of inertia
body.I.kind (                       $B_generator                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker

marker.type (                       $M_generator_BRF              ) = 1                       ! Type
marker.parent (                     $M_generator_BRF              ) = $B_generator            ! Body
marker.flx.type (                   $M_generator_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_generator_shaft            ) = 2                       ! Type
marker.parent (                     $M_generator_shaft            ) = $B_generator            ! Body
marker.pos (              1 ,       $M_generator_shaft            ) = 0.00000000000000000E+00 ! Position

joint.from (                        $J_generator                  ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
joint.to (                          $J_generator                  ) = $M_generator_shaft      ! To Marker
joint.type (                        $J_generator                  ) = 0                       ! Type
joint.par (               1 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_generator                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_generator                  ) = 2                       ! Type
prim.ref (                          $P_generator                  ) = $M_generator_BRF        ! Reference Marker
prim.pos (                1 ,       $P_generator                  ) = { $SVG_rotor.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_generator                  ) = { 90.0 deg }            ! Angles
prim.color.r (            1 ,       $P_generator                  ) = 2.48000000000000000E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_generator                  ) = 2.21000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_generator                  ) = 1.42000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_generator                  ) = 2.07000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_generator                  ) = 1.97000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_generator                  ) = 1.10000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_generator                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_generator                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                2 ,       $P_generator                  ) = $SVG_rotor.$_length     ! [m] Height
prim.par (                3 ,       $P_generator                  ) = $SVG_rotor.$_diameter   ! [m] Outer diameter
prim.par (                4 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_generator                  ) = 3.00000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_generator                  ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_generator                  ) = 0.00000000000000000E+00 ! [-] Close geometry with


!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_aero                       ) = 93                      ! Type
force.from (                        $F_aero                       ) = $S_bed_plate.$S_TPL.$M_bed_plate_main_shaft ! From Marker
force.to (                          $F_aero                       ) = $S_main_shaft.$S_TPL.$M_shaft_input ! To Marker
force.par (               1 ,       $F_aero                       ) = $UE_F_x                 ! [-] u-Vector Element force x
force.par (               2 ,       $F_aero                       ) = $UE_F_y                 ! [-] u-Vector Element force y
force.par (               3 ,       $F_aero                       ) = $UE_F_z                 ! [-] u-Vector Element force z
force.par (               4 ,       $F_aero                       ) = $UE_M_x                 ! [-] u-Vector Element torque x
force.par (               5 ,       $F_aero                       ) = $UE_M_y                 ! [-] u-Vector Element torque y
force.par (               6 ,       $F_aero                       ) = $UE_M_z                 ! [-] u-Vector Element torque z

force.type (                        $F_gen_time_series            ) = 93                      ! Type
force.from (                        $F_gen_time_series            ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
force.to (                          $F_gen_time_series            ) = $S_housing.$S_TPL.$M_housing_gen ! To Marker
force.disabled (                    $F_gen_time_series            ) = $SVG_loading.$_use_time_series ! Disabled
force.par (               1 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force x
force.par (               2 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force y
force.par (               3 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element force z
force.par (               4 ,       $F_gen_time_series            ) = $UE_T_gen               ! [-] u-Vector Element torque x
force.par (               5 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element torque y
force.par (               6 ,       $F_gen_time_series            ) = null                    ! [-] u-Vector Element torque z

force.type (                        $F_gen_PI                     ) = 110                     ! Type
force.from (                        $F_gen_PI                     ) = $S_stage_03.$S_TPL.$M_shaft_output ! From Marker
force.to (                          $F_gen_PI                     ) = $S_housing.$S_TPL.$M_housing_gen ! To Marker
force.st.dyn (            1 ,       $F_gen_PI                     ) = 0.00000000000000000E+00 ! Dynamic states
force.st.equi (           1 ,       $F_gen_PI                     ) = 0                       ! Equilibrium
force.disabled (                    $F_gen_PI                     ) = $SVG_loading.$_use_PI   ! Disabled
force.par (               1 ,       $F_gen_PI                     ) = $C_PI                   ! [-] Input Control Element 1
force.par (               2 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_gen_PI                     ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_gen_PI                     ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_gen_PI                     ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               7 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_gen_PI                     ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)
force.par (               9 ,       $F_gen_PI                     ) = $TF_const               ! [m⁻¹] P: Drive constant F=P*L

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_PI                         ) = 129                     ! Type
control.st.dyn (          1 ,       $C_PI                         ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_PI                         ) = 0                       ! Equilibrium
control.par (             7 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_PI                         ) = $C_speed_diff           ! [-] Input Element ch. 1
control.par (             9 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_PI                         ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_PI                         ) = 2.20000000000000000E+03 ! [-] Proportional gain factor
control.par (            16 ,       $C_PI                         ) = 1.00000000000000000E+01 ! [s] Integral time constant
control.par (            22 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_speed_diff                 ) = 143                     ! Type
control.par (             1 ,       $C_speed_diff                 ) = $C_ref_speed            ! [-] Input Element ch. 1
control.par (             2 ,       $C_speed_diff                 ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_speed_diff                 ) = 1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_speed_diff                 ) = $C_output_speed         ! [-] Input Element ch. 2
control.par (             5 ,       $C_speed_diff                 ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_speed_diff                 ) = -1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_speed_diff                 ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_speed_diff                 ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_speed_diff                 ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_speed_diff                 ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_ref_speed                  ) = 170                     ! Type
control.par (             1 ,       $C_ref_speed                  ) = 1.00000000000000000E+00 ! [-] Number of constant values
control.par (            10 ,       $C_ref_speed                  ) = { DIMLESS($SVG_generator.$_rated_speed) } ! [-] Constant value 1

control.type (                      $C_output_speed               ) = 160                     ! Type
control.par (             1 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_output_speed               ) = $S_stage_03.$S_TPL.$J_shaft ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_output_speed               ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_output_speed               ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.file (                        $I_F_x                        ) = '../ref_files/Fx.if2'   ! File or URI
ifctn.range.handling (              $I_F_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_F_y                        ) = '../ref_files/Fy.if2'   ! File or URI
ifctn.range.handling (              $I_F_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_F_z                        ) = '../ref_files/Fz.if2'   ! File or URI
ifctn.range.handling (              $I_F_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_x                        ) = '../ref_files/Mx.if2'   ! File or URI
ifctn.range.handling (              $I_M_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_y                        ) = '../ref_files/My.if2'   ! File or URI
ifctn.range.handling (              $I_M_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_M_z                        ) = '../ref_files/Mz.if2'   ! File or URI
ifctn.range.handling (              $I_M_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_w_gen                      ) = '../ref_files/GEN_SPD.if2' ! File or URI
ifctn.desc (              1 ,       $I_w_gen                      ) = 'in [rad/s]'            ! Description
ifctn.range.handling (              $I_w_gen                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_w_gen                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_w_gen                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_w_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_w_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_w_gen                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_w_gen                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! Transfer Functions
!**********************************************************************
trf.type (                          $TF_PI                        ) = 1                       ! Type
trf.par (                 1 ,       $TF_PI                        ) = 1.00000000000000000E+00 ! [-] Numerator degree
trf.par (                 2 ,       $TF_PI                        ) = 1.00000000000000000E+00 ! [-] Denominator degree
trf.par (                 3 ,       $TF_PI                        ) = 1.00000000000000000E+00 ! [-] Representation of independent
trf.par (                 4 ,       $TF_PI                        ) = 0.00000000000000000E+00 ! [-] Free factor beta
trf.par (                 5 ,       $TF_PI                        ) = 0.00000000000000000E+00 ! [-] Sides
trf.par (                10 ,       $TF_PI                        ) = $SVG_generator.$_K_I    ! [-] Numerator coeff. for degree 0
trf.par (                11 ,       $TF_PI                        ) = $SVG_generator.$_K_P    ! [-] Numerator coeff. for degree 1
trf.par (                20 ,       $TF_PI                        ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
trf.par (                21 ,       $TF_PI                        ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
trf.plot.par (            1 ,       $TF_PI                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   1 , $TF_PI                        ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   2 , $TF_PI                        ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   3 , $TF_PI                        ) = 5.00000000000000000E+03 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   4 ,   1 , $TF_PI                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   5 ,   1 , $TF_PI                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

trf.type (                          $TF_const                     ) = 1                       ! Type
trf.par (                 1 ,       $TF_const                     ) = 0.00000000000000000E+00 ! [-] Numerator degree
trf.par (                 2 ,       $TF_const                     ) = 1.00000000000000000E+00 ! [-] Denominator degree
trf.par (                 3 ,       $TF_const                     ) = 0.00000000000000000E+00 ! [-] Representation of independent
trf.par (                 4 ,       $TF_const                     ) = 0.00000000000000000E+00 ! [-] Free factor beta
trf.par (                 5 ,       $TF_const                     ) = 0.00000000000000000E+00 ! [-] Sides
trf.par (                10 ,       $TF_const                     ) = 1.00000000000000000E+00 ! [-] Numerator coeff. for degree 0
trf.par (                20 ,       $TF_const                     ) = 0.00000000000000000E+00 ! [-] Denomin. coeff. for degree 0
trf.par (                21 ,       $TF_const                     ) = 1.00000000000000000E+00 ! [-] Denomin. coeff. for degree 1
trf.plot.par (            1 ,       $TF_const                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   1 , $TF_const                     ) = 1.00000000000000000E+03 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   2 , $TF_const                     ) = 1.00000000000000002E-03 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   3 , $TF_const                     ) = 3.00000000000000000E+04 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   4 ,   1 , $TF_const               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
trf.plot.par (            1 ,   5 ,   1 , $TF_const               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_T_gen                      ) = 'DIMLESS($_rated_power)/IFCTNX(TIME(), $I_w_gen, 0, 2,- 1)' ! Definition
express.txt (                       $X_T_gen                      ) = 'xinp = TIME()[br]id = $I_w_gen[br]kind_deriv = 0[br]kind_spl = 2[br]kind_extr = -1[br][br]More info on: Simpack Assistant 2020x \\> Modeling Element Library \\> Expressions \\> Expressions: Library \\> FUNCTIONS \\> ifctn[br]' ! Comment

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_F_x                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_x                        ) = $I_F_x                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_y                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_y                        ) = $I_F_y                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_z                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_z                        ) = $I_F_z                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_x                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_x                        ) = $I_M_x                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_y                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_y                        ) = $I_M_y                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_z                        ) = 2                       ! Type
excit.par (               1 ,       $E_M_z                        ) = $I_M_z                  ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_T_gen                      ) = 12                      ! Type
excit.desc (              1 ,       $E_T_gen                      ) = 'in [rad/s]'            ! Description
excit.par (               1 ,       $E_T_gen                      ) = $X_T_gen                ! [-] Expression for f(t)
excit.par (               2 ,       $E_T_gen                      ) = null                    ! [-] Expression for fd(t)
excit.par (               3 ,       $E_T_gen                      ) = null                    ! [-] Expression for fdd(t)
excit.par (               4 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Expressions define
excit.par (               6 ,       $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Initial value for f at t=0
excit.par (               7 ,       $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Initial value for fd at t=0
excit.par (               8 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Scaling factor
excit.plot.par (          1 ,       $E_T_gen                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_T_gen                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_T_gen                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_T_gen                      ) = 1.00000000000000000E+02 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_T_gen                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_F_x                       ) = 1                       ! Type
uele.excit (                        $UE_F_x                       ) = $E_F_x                  ! Referenced Excitation

uele.type (                         $UE_F_y                       ) = 1                       ! Type
uele.excit (                        $UE_F_y                       ) = $E_F_y                  ! Referenced Excitation

uele.type (                         $UE_F_z                       ) = 1                       ! Type
uele.excit (                        $UE_F_z                       ) = $E_F_z                  ! Referenced Excitation

uele.type (                         $UE_M_x                       ) = 1                       ! Type
uele.excit (                        $UE_M_x                       ) = $E_M_x                  ! Referenced Excitation

uele.type (                         $UE_M_y                       ) = 1                       ! Type
uele.excit (                        $UE_M_y                       ) = $E_M_y                  ! Referenced Excitation

uele.type (                         $UE_M_z                       ) = 1                       ! Type
uele.excit (                        $UE_M_z                       ) = $E_M_z                  ! Referenced Excitation

uele.type (                         $UE_T_gen                     ) = 1                       ! Type
uele.excit (                        $UE_T_gen                     ) = $E_T_gen                ! Referenced Excitation

!**********************************************************************
! Senders
!**********************************************************************
sender.ref (                        $COM_rotor_length             ) = $SVG_rotor.$_length     ! Source object

sender.ref (                        $COM_base_excitation_flag     ) = $SVG_loading.$_base_excitation_flag ! Source object

sendergroup.begin (                 $SG_housing                   )                           ! $SG_housing
   sender.ref (                     $COM_length                   ) = $SVG_housing.$_length   ! Source object
   sender.alias (                   $COM_length                   ) = '$COM_housing_length'   ! Alias

   sender.ref (                     $COM_width                    ) = $SVG_housing.$_width    ! Source object
   sender.alias (                   $COM_width                    ) = '$COM_housing_width'    ! Alias

sendergroup.end (                   $SG_housing                   )                           ! $SG_housing

sendergroup.begin (                 $SG_main_shaft                )                           ! $SG_main_shaft
   sender.ref (                     $COM_main_shaft_length        ) = $SVG_main_shaft.$_length ! Source object
   sender.alias (                   $COM_main_shaft_length        ) = '$COM_shaft_length'     ! Alias

   sender.ref (                     $COM_main_shaft_diameter      ) = $SVG_main_shaft.$_diameter ! Source object
   sender.alias (                   $COM_main_shaft_diameter      ) = '$COM_shaft_diameter'   ! Alias

   sender.ref (                     $COM_main_shaft_x0            ) = $SVG_main_shaft.$_x0    ! Source object
   sender.alias (                   $COM_main_shaft_x0            ) = '$COM_main_shaft_x0'    ! Alias

   sendergroup.begin (              $SG_bearing_A                 )                           ! $SG_main_shaft.$SG_bearing_A
      sender.ref (                  $COM_x                        ) = $SVG_main_shaft.$SVG_bearing_A.$_x ! Source object
      sender.alias (                $COM_x                        ) = '$COM_shaft_bearing_A_x' ! Alias

      sender.ref (                  $COM_k_x                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_x ! Source object
      sender.alias (                $COM_k_x                      ) = '$COM_shaft_bearing_A_k_x' ! Alias

      sender.ref (                  $COM_k_y                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_y ! Source object
      sender.alias (                $COM_k_y                      ) = '$COM_shaft_bearing_A_k_y' ! Alias

      sender.ref (                  $COM_k_z                      ) = $SVG_main_shaft.$SVG_bearing_A.$_k_z ! Source object
      sender.alias (                $COM_k_z                      ) = '$COM_shaft_bearing_A_k_z' ! Alias

      sender.ref (                  $COM_k_alpha                  ) = $SVG_main_shaft.$SVG_bearing_A.$_k_alpha ! Source object
      sender.alias (                $COM_k_alpha                  ) = '$COM_shaft_bearing_A_k_alpha' ! Alias

      sender.ref (                  $COM_k_beta                   ) = $SVG_main_shaft.$SVG_bearing_A.$_k_beta ! Source object
      sender.alias (                $COM_k_beta                   ) = '$COM_shaft_bearing_A_k_beta' ! Alias

      sender.ref (                  $COM_k_gamma                  ) = $SVG_main_shaft.$SVG_bearing_A.$_k_gamma ! Source object
      sender.alias (                $COM_k_gamma                  ) = '$COM_shaft_bearing_A_k_gamma' ! Alias

      sender.ref (                  $COM_d_x                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_x ! Source object
      sender.alias (                $COM_d_x                      ) = '$COM_shaft_bearing_A_d_x' ! Alias

      sender.ref (                  $COM_d_y                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_y ! Source object
      sender.alias (                $COM_d_y                      ) = '$COM_shaft_bearing_A_d_y' ! Alias

      sender.ref (                  $COM_d_z                      ) = $SVG_main_shaft.$SVG_bearing_A.$_d_z ! Source object
      sender.alias (                $COM_d_z                      ) = '$COM_shaft_bearing_A_d_z' ! Alias

      sender.ref (                  $COM_d_alpha                  ) = $SVG_main_shaft.$SVG_bearing_A.$_d_alpha ! Source object
      sender.alias (                $COM_d_alpha                  ) = '$COM_shaft_bearing_A_d_alpha' ! Alias

      sender.ref (                  $COM_d_beta                   ) = $SVG_main_shaft.$SVG_bearing_A.$_d_beta ! Source object
      sender.alias (                $COM_d_beta                   ) = '$COM_shaft_bearing_A_d_beta' ! Alias

      sender.ref (                  $COM_d_gamma                  ) = $SVG_main_shaft.$SVG_bearing_A.$_d_gamma ! Source object
      sender.alias (                $COM_d_gamma                  ) = '$COM_shaft_bearing_A_d_gamma' ! Alias

   sendergroup.end (                $SG_bearing_A                 )                           ! $SG_main_shaft.$SG_bearing_A
   sendergroup.begin (              $SG_bearing_B                 )                           ! $SG_main_shaft.$SG_bearing_B
      sender.ref (                  $COM_x                        ) = $SVG_main_shaft.$SVG_bearing_B.$_x ! Source object
      sender.alias (                $COM_x                        ) = '$COM_shaft_bearing_B_x' ! Alias

      sender.ref (                  $COM_k_x                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_x ! Source object
      sender.alias (                $COM_k_x                      ) = '$COM_shaft_bearing_B_k_x' ! Alias

      sender.ref (                  $COM_k_y                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_y ! Source object
      sender.alias (                $COM_k_y                      ) = '$COM_shaft_bearing_B_k_y' ! Alias

      sender.ref (                  $COM_k_z                      ) = $SVG_main_shaft.$SVG_bearing_B.$_k_z ! Source object
      sender.alias (                $COM_k_z                      ) = '$COM_shaft_bearing_B_k_z' ! Alias

      sender.ref (                  $COM_k_alpha                  ) = $SVG_main_shaft.$SVG_bearing_B.$_k_alpha ! Source object
      sender.alias (                $COM_k_alpha                  ) = '$COM_shaft_bearing_B_k_alpha' ! Alias

      sender.ref (                  $COM_k_beta                   ) = $SVG_main_shaft.$SVG_bearing_B.$_k_beta ! Source object
      sender.alias (                $COM_k_beta                   ) = '$COM_shaft_bearing_B_k_beta' ! Alias

      sender.ref (                  $COM_k_gamma                  ) = $SVG_main_shaft.$SVG_bearing_B.$_k_gamma ! Source object
      sender.alias (                $COM_k_gamma                  ) = '$COM_shaft_bearing_B_k_gamma' ! Alias

      sender.ref (                  $COM_d_x                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_x ! Source object
      sender.alias (                $COM_d_x                      ) = '$COM_shaft_bearing_B_d_x' ! Alias

      sender.ref (                  $COM_d_y                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_y ! Source object
      sender.alias (                $COM_d_y                      ) = '$COM_shaft_bearing_B_d_y' ! Alias

      sender.ref (                  $COM_d_z                      ) = $SVG_main_shaft.$SVG_bearing_B.$_d_z ! Source object
      sender.alias (                $COM_d_z                      ) = '$COM_shaft_bearing_B_d_z' ! Alias

      sender.ref (                  $COM_d_alpha                  ) = $SVG_main_shaft.$SVG_bearing_B.$_d_alpha ! Source object
      sender.alias (                $COM_d_alpha                  ) = '$COM_shaft_bearing_B_d_alpha' ! Alias

      sender.ref (                  $COM_d_beta                   ) = $SVG_main_shaft.$SVG_bearing_B.$_d_beta ! Source object
      sender.alias (                $COM_d_beta                   ) = '$COM_shaft_bearing_B_d_beta' ! Alias

      sender.ref (                  $COM_d_gamma                  ) = $SVG_main_shaft.$SVG_bearing_B.$_d_gamma ! Source object
      sender.alias (                $COM_d_gamma                  ) = '$COM_shaft_bearing_B_d_gamma' ! Alias

   sendergroup.end (                $SG_bearing_B                 )                           ! $SG_main_shaft.$SG_bearing_B
sendergroup.end (                   $SG_main_shaft                )                           ! $SG_main_shaft

sendergroup.begin (                 $SG_stage_01                  )                           ! $SG_stage_01
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_01.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_01_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_01.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_01_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_01.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_01_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_01.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_01_helix_angle' ! Alias

   sender.ref (                     $COM_num_planets              ) = $SVG_stage_01.$_num_planets ! Source object
   sender.alias (                   $COM_num_planets              ) = '$COM_stage_01_num_planets' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_01.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_01_normal_backlash' ! Alias

   sender.ref (                     $COM_k_SP                     ) = $SVG_stage_01.$_k_SP    ! Source object
   sender.alias (                   $COM_k_SP                     ) = '$COM_stage_01_k_SP'    ! Alias

   sender.ref (                     $COM_k_RP                     ) = $SVG_stage_01.$_k_RP    ! Source object
   sender.alias (                   $COM_k_RP                     ) = '$COM_stage_01_k_RP'    ! Alias

   sendergroup.begin (              $SG_sun                       )                           ! $SG_stage_01.$SG_sun
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_sun.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_sun_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_sun.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_sun_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_sun.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_sun_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_sun.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_sun_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_sun.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_sun_helix_sign' ! Alias

      sender.ref (                  $COM_x_input                  ) = $SVG_stage_01.$SVG_sun.$_x_input ! Source object
      sender.alias (                $COM_x_input                  ) = '$COM_stage_01_sun_x_input' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_sun.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_01_sun_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_01_sun_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_sun.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_01_sun_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_sun.$SG_material
   sendergroup.end (                $SG_sun                       )                           ! $SG_stage_01.$SG_sun
   sendergroup.begin (              $SG_planet                    )                           ! $SG_stage_01.$SG_planet
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_planet_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_planet.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_planet_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_planet.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_planet_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_planet.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_planet_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_planet.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_planet_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_planet.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_01_planet_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_01_planet_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_planet.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_01_planet_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_planet.$SG_material
      sendergroup.begin (           $SG_bearing                   )                           ! $SG_stage_01.$SG_planet.$SG_bearing
         sender.ref (               $COM_k_x                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_01_planet_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_01_planet_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_01_planet_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_01_planet_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_01_planet_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_01_planet_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_01_planet_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_01_planet_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_01_planet_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_01_planet_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_01_planet_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_01.$SVG_planet.$SVG_AB.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_01_planet_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing                   )                           ! $SG_stage_01.$SG_planet.$SG_bearing
   sendergroup.end (                $SG_planet                    )                           ! $SG_stage_01.$SG_planet
   sendergroup.begin (              $SG_ring                      )                           ! $SG_stage_01.$SG_ring
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_01_ring_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_01.$SVG_ring.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_01_ring_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_01.$SVG_ring.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_01_ring_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_01.$SVG_ring.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_01_ring_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_01.$SVG_ring.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_01_ring_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_01.$SG_ring.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_density ! Source object

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_elasticity_modulus ! Source object

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_01.$SVG_ring.$SVG_material.$_poissons_ratio ! Source object

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_01.$SG_ring.$SG_material
   sendergroup.end (                $SG_ring                      )                           ! $SG_stage_01.$SG_ring
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_01.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_01.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_01_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_01.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_01_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_01.$SG_shaft
sendergroup.end (                   $SG_stage_01                  )                           ! $SG_stage_01

sendergroup.begin (                 $SG_stage_02                  )                           ! $SG_stage_02
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_02.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_02_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_02.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_02_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_02.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_02_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_02.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_02_helix_angle' ! Alias

   sender.ref (                     $COM_num_planets              ) = $SVG_stage_02.$_num_planets ! Source object
   sender.alias (                   $COM_num_planets              ) = '$COM_stage_02_num_planets' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_02.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_02_normal_backlash' ! Alias

   sender.ref (                     $COM_k_SP                     ) = $SVG_stage_02.$_k_SP    ! Source object
   sender.alias (                   $COM_k_SP                     ) = '$COM_stage_02_k_SP'    ! Alias

   sender.ref (                     $COM_k_RP                     ) = $SVG_stage_02.$_k_RP    ! Source object
   sender.alias (                   $COM_k_RP                     ) = '$COM_stage_02_k_RP'    ! Alias

   sendergroup.begin (              $SG_sun                       )                           ! $SG_stage_02.$SG_sun
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_sun.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_sun_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_sun.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_sun_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_sun.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_sun_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_sun.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_sun_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_sun.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_sun_helix_sign' ! Alias

      sender.ref (                  $COM_x_input                  ) = $SVG_stage_02.$SVG_sun.$_x_input ! Source object
      sender.alias (                $COM_x_input                  ) = '$COM_stage_02_sun_x_input' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_sun.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_02_sun_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_02_sun_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_sun.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_02_sun_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_sun.$SG_material
   sendergroup.end (                $SG_sun                       )                           ! $SG_stage_02.$SG_sun
   sendergroup.begin (              $SG_planet                    )                           ! $SG_stage_02.$SG_planet
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_planet_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_planet.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_planet_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_planet.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_planet_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_planet.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_planet_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_planet.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_planet_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_planet.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_02_planet_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_02_planet_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_planet.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_02_planet_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_planet.$SG_material
      sendergroup.begin (           $SG_bearing                   )                           ! $SG_stage_02.$SG_planet.$SG_bearing
         sender.ref (               $COM_k_x                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_02_planet_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_02_planet_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_02_planet_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_02_planet_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_02_planet_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_02_planet_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_02_planet_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_02_planet_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_02_planet_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_02_planet_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_02_planet_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_02.$SVG_planet.$SVG_AB.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_02_planet_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing                   )                           ! $SG_stage_02.$SG_planet.$SG_bearing
   sendergroup.end (                $SG_planet                    )                           ! $SG_stage_02.$SG_planet
   sendergroup.begin (              $SG_ring                      )                           ! $SG_stage_02.$SG_ring
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_02.$SVG_ring.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_02_ring_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_02.$SVG_ring.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_02_ring_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_02.$SVG_ring.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_02_ring_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_02.$SVG_ring.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_02_ring_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_02.$SVG_ring.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_02_ring_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_02.$SG_ring.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_density ! Source object

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_elasticity_modulus ! Source object

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_02.$SVG_ring.$SVG_material.$_poissons_ratio ! Source object

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_02.$SG_ring.$SG_material
   sendergroup.end (                $SG_ring                      )                           ! $SG_stage_02.$SG_ring
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_02.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_02.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_02_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_02.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_02_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_02.$SG_shaft
sendergroup.end (                   $SG_stage_02                  )                           ! $SG_stage_02

sendergroup.begin (                 $SG_stage_03                  )                           ! $SG_stage_03
   sender.ref (                     $COM_normal_module            ) = $SVG_stage_03.$_normal_module ! Source object
   sender.alias (                   $COM_normal_module            ) = '$COM_stage_03_normal_module' ! Alias

   sender.ref (                     $COM_pressure_angle           ) = $SVG_stage_03.$_pressure_angle ! Source object
   sender.alias (                   $COM_pressure_angle           ) = '$COM_stage_03_pressure_angle' ! Alias

   sender.ref (                     $COM_center_distance          ) = $SVG_stage_03.$_center_distance ! Source object
   sender.alias (                   $COM_center_distance          ) = '$COM_stage_03_center_distance' ! Alias

   sender.ref (                     $COM_helix_angle              ) = $SVG_stage_03.$_helix_angle ! Source object
   sender.alias (                   $COM_helix_angle              ) = '$COM_stage_03_helix_angle' ! Alias

   sender.ref (                     $COM_normal_backlash          ) = $SVG_stage_03.$_normal_backlash ! Source object
   sender.alias (                   $COM_normal_backlash          ) = '$COM_stage_03_normal_backlash' ! Alias

   sender.ref (                     $COM_tooth_damping            ) = $SVG_stage_03.$_tooth_damping ! Source object
   sender.alias (                   $COM_tooth_damping            ) = '$COM_stage_03_tooth_damping' ! Alias

   sender.ref (                     $COM_tooth_stiffness_ratio    ) = $SVG_stage_03.$_tooth_stiffness_ratio ! Source object
   sender.alias (                   $COM_tooth_stiffness_ratio    ) = '$COM_stage_03_tooth_stiffness_ratio' ! Alias

   sender.ref (                     $COM_x0_full_damping          ) = $SVG_stage_03.$_x0_full_damping ! Source object
   sender.alias (                   $COM_x0_full_damping          ) = '$COM_stage_03_x0_full_damping' ! Alias

   sender.ref (                     $COM_regularization_vel       ) = $SVG_stage_03.$_regularization_vel ! Source object
   sender.alias (                   $COM_regularization_vel       ) = '$COM_stage_03_regularization_vel' ! Alias

   sender.ref (                     $COM_k_PW                     ) = $SVG_stage_03.$_k_PW    ! Source object
   sender.alias (                   $COM_k_PW                     ) = '$COM_stage_03_k_PW'    ! Alias

   sendergroup.begin (              $SG_pinion                    )                           ! $SG_stage_03.$SG_pinion
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_03_pinion_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_03.$SVG_pinion.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_03_pinion_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_03.$SVG_pinion.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_03_pinion_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_03.$SVG_pinion.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_03_pinion_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_03.$SVG_pinion.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_03_pinion_helix_sign' ! Alias

      sender.ref (                  $COM_x_input                  ) = $SVG_stage_03.$SVG_pinion.$_x_input ! Source object
      sender.alias (                $COM_x_input                  ) = '$COM_stage_03_pinion_x_input' ! Alias

      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_B
      sendergroup.begin (           $SG_bearing_C                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_C
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_pinion_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_pinion_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_pinion_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_pinion_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_pinion_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_pinion_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_pinion_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_pinion_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_pinion_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_pinion_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_pinion_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_pinion.$SVG_C.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_pinion_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_C                 )                           ! $SG_stage_03.$SG_pinion.$SG_bearing_C
      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_03.$SG_pinion.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_03_pinion_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_03_pinion_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_03.$SVG_pinion.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_03_pinion_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_03.$SG_pinion.$SG_material
   sendergroup.end (                $SG_pinion                    )                           ! $SG_stage_03.$SG_pinion
   sendergroup.begin (              $SG_wheel                     )                           ! $SG_stage_03.$SG_wheel
      sender.ref (                  $COM_num_teeth                ) = $SVG_stage_03.$SVG_wheel.$_num_teeth ! Source object
      sender.alias (                $COM_num_teeth                ) = '$COM_stage_03_wheel_num_teeth' ! Alias

      sender.ref (                  $COM_flank_width              ) = $SVG_stage_03.$SVG_wheel.$_flank_width ! Source object
      sender.alias (                $COM_flank_width              ) = '$COM_stage_03_wheel_flank_width' ! Alias

      sender.ref (                  $COM_shift_factor             ) = $SVG_stage_03.$SVG_wheel.$_shift_factor ! Source object
      sender.alias (                $COM_shift_factor             ) = '$COM_stage_03_wheel_shift_factor' ! Alias

      sender.ref (                  $COM_bore_diameter            ) = $SVG_stage_03.$SVG_wheel.$_bore_diameter ! Source object
      sender.alias (                $COM_bore_diameter            ) = '$COM_stage_03_wheel_bore_diameter' ! Alias

      sender.ref (                  $COM_helix_sign               ) = $SVG_stage_03.$SVG_wheel.$_helix_sign ! Source object
      sender.alias (                $COM_helix_sign               ) = '$COM_stage_03_wheel_helix_sign' ! Alias

      sendergroup.begin (           $SG_material                  )                           ! $SG_stage_03.$SG_wheel.$SG_material
         sender.ref (               $COM_density                  ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_density ! Source object
         sender.alias (             $COM_density                  ) = '$COM_stage_03_wheel_material_density' ! Alias

         sender.ref (               $COM_elasticity_modulus       ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_elasticity_modulus ! Source object
         sender.alias (             $COM_elasticity_modulus       ) = '$COM_stage_03_wheel_material_elasticity_modulus' ! Alias

         sender.ref (               $COM_poissons_ratio           ) = $SVG_stage_03.$SVG_wheel.$SVG_material.$_poissons_ratio ! Source object
         sender.alias (             $COM_poissons_ratio           ) = '$COM_stage_03_wheel_material_poissons_ratio' ! Alias

      sendergroup.end (             $SG_material                  )                           ! $SG_stage_03.$SG_wheel.$SG_material
      sendergroup.begin (           $SG_bearing_A                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_A
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_A                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_A
      sendergroup.begin (           $SG_bearing_B                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_B
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_B                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_B
      sendergroup.begin (           $SG_bearing_C                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_C
         sender.ref (               $COM_k_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_x ! Source object
         sender.alias (             $COM_k_x                      ) = '$COM_stage_03_wheel_k_x' ! Alias

         sender.ref (               $COM_k_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_y ! Source object
         sender.alias (             $COM_k_y                      ) = '$COM_stage_03_wheel_k_y' ! Alias

         sender.ref (               $COM_k_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_z ! Source object
         sender.alias (             $COM_k_z                      ) = '$COM_stage_03_wheel_k_z' ! Alias

         sender.ref (               $COM_k_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_alpha ! Source object
         sender.alias (             $COM_k_alpha                  ) = '$COM_stage_03_wheel_k_alpha' ! Alias

         sender.ref (               $COM_k_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_beta ! Source object
         sender.alias (             $COM_k_beta                   ) = '$COM_stage_03_wheel_k_beta' ! Alias

         sender.ref (               $COM_k_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_k_gamma ! Source object
         sender.alias (             $COM_k_gamma                  ) = '$COM_stage_03_wheel_k_gamma' ! Alias

         sender.ref (               $COM_d_x                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_x ! Source object
         sender.alias (             $COM_d_x                      ) = '$COM_stage_03_wheel_d_x' ! Alias

         sender.ref (               $COM_d_y                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_y ! Source object
         sender.alias (             $COM_d_y                      ) = '$COM_stage_03_wheel_d_y' ! Alias

         sender.ref (               $COM_d_z                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_z ! Source object
         sender.alias (             $COM_d_z                      ) = '$COM_stage_03_wheel_d_z' ! Alias

         sender.ref (               $COM_d_alpha                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_alpha ! Source object
         sender.alias (             $COM_d_alpha                  ) = '$COM_stage_03_wheel_d_alpha' ! Alias

         sender.ref (               $COM_d_beta                   ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_beta ! Source object
         sender.alias (             $COM_d_beta                   ) = '$COM_stage_03_wheel_d_beta' ! Alias

         sender.ref (               $COM_d_gamma                  ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_d_gamma ! Source object
         sender.alias (             $COM_d_gamma                  ) = '$COM_stage_03_wheel_d_gamma' ! Alias

      sendergroup.end (             $SG_bearing_C                 )                           ! $SG_stage_03.$SG_wheel.$SG_bearing_C
   sendergroup.end (                $SG_wheel                     )                           ! $SG_stage_03.$SG_wheel
   sendergroup.begin (              $SG_shaft                     )                           ! $SG_stage_03.$SG_shaft
      sender.ref (                  $COM_shaft_length             ) = $SVG_stage_03.$SVG_shaft.$_length ! Source object
      sender.alias (                $COM_shaft_length             ) = '$COM_stage_03_shaft_length' ! Alias

      sender.ref (                  $COM_shaft_diameter           ) = $SVG_stage_03.$SVG_shaft.$_diameter ! Source object
      sender.alias (                $COM_shaft_diameter           ) = '$COM_stage_03_shaft_diameter' ! Alias

   sendergroup.end (                $SG_shaft                     )                           ! $SG_stage_03.$SG_shaft
sendergroup.end (                   $SG_stage_03                  )                           ! $SG_stage_03

sendergroup.begin (                 $SG_bed_plate                 )                           ! $SG_bed_plate
   sender.ref (                     $COM_length                   ) = $SVG_bed_plate.$_length ! Source object
   sender.alias (                   $COM_length                   ) = '$COM_bed_plate_length' ! Alias

   sender.ref (                     $COM_width                    ) = $SVG_bed_plate.$_width  ! Source object
   sender.alias (                   $COM_width                    ) = '$COM_bed_plate_width'  ! Alias

   sender.ref (                     $COM_z0                       ) = $SVG_bed_plate.$_z0     ! Source object
   sender.alias (                   $COM_z0                       ) = '$COM_bed_plate_z0'     ! Alias

sendergroup.end (                   $SG_bed_plate                 )                           ! $SG_bed_plate

sendergroup.begin (                 $SG_gear_params               )                           ! $SG_gear_params
   sender.ref (                     $COM_mesh_flag                ) = $SVG_stage_01.$_mesh_flag ! Source object

   sender.ref (                     $COM_tooth_damping            ) = $SVG_stage_01.$_tooth_damping ! Source object

   sender.ref (                     $COM_tooth_stiffness_ratio    ) = $SVG_stage_01.$_tooth_stiffness_ratio ! Source object

   sender.ref (                     $COM_x0_full_damping          ) = $SVG_stage_01.$_x0_full_damping ! Source object

   sender.ref (                     $COM_regularization_vel       ) = $SVG_stage_01.$_regularization_vel ! Source object

sendergroup.end (                   $SG_gear_params               )                           ! $SG_gear_params


! Overwritten substructure values
view.fclip.value (                  $S_stage_01.$S_TPL.$V_WorkingView) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $S_stage_01.$S_TPL.$V_WorkingView) = 5.31139945983886719E+00 ! Back clipping plane value

sender.alias (                      $S_stage_01.$S_TPL.$COM_stage_ratio) = '$COM_stage_01_ratio' ! Alias

view.fclip.value (                  $S_stage_02.$S_TPL.$V_WorkingView) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $S_stage_02.$S_TPL.$V_WorkingView) = 5.31139945983886719E+00 ! Back clipping plane value

sender.alias (                      $S_stage_02.$S_TPL.$COM_stage_ratio) = '$COM_stage_02_ratio' ! Alias

joint.from (                        $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = $S_stage_01.$S_TPL.$M_shaft_output ! From Marker
joint.type (                        $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0      ! Type
joint.par (               1 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $S_stage_02.$S_TPL.$S_carrier.$S_TPL.$J_carrier) = 0.00000000000000000E+00 ! [-] Rotation sequence


joint.from (                        $S_stage_03.$S_TPL.$J_shaft   ) = $S_housing.$S_TPL.$M_housing_S03_shaft ! From Marker


joint.from (                        $S_stage_03.$S_TPL.$BG_wheel.$J_pin) = $S_stage_02.$S_TPL.$M_shaft_output ! From Marker


sender.alias (                      $S_stage_03.$S_TPL.$COM_stage_ratio) = '$COM_stage_03_ratio' ! Alias

                                       
