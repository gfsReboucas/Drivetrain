!file.version=3.4! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20200100
version.desc   = ''
version.build  = 82

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
glob.compat.track.excit                                             = 1                       ! Track Excitation rotation sequence
glob.rhs.tuning.type                                                = 0                       ! Formalism Tuning Type
glob.rhs.tuning.flags (   1                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   2                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   3                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   4                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   5                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   6                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   7                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   8                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   9                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  10                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  11                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  12                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  13                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  14                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  15                                       ) = 1                       ! Formalism Tuning Flags
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
subvarset.file (          1                                       ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/NREL_5MW.rigid.subvar' ! subvarset filename
subvarset.role (          1                                       ) = 1                       ! subvarset role: 0 = ini subvarset; 1 = overwriting (late) subvarset
prop3d.bg.base.color.r                                              = 9.90000000000000000E+01 ! Background color (red component)
prop3d.bg.base.color.g                                              = 1.84000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.55000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 5.64230442047119141E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -3.58340144157409668E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 5.06720876693725586E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.21871680021286011E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.21871671676635742E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved
view.stereo.active (                $V_WorkingView                ) = 0                       ! Stereo enabled
view.stereo.balance (               $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo balance
view.stereo.offset (                $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo offset

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 3.36757135391235352E+00 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -1.09676802158355713E+00 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.76557826995849609E+00 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Ortho                      ) = 9.99999977648258209E-03 ! Front clipping plane value
view.bclip.value (                  $V_Ortho                      ) = 1.21015462875366211E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 2.16071248203297728E+01 ! Position
view.pos (                2 ,       $V_Front                      ) = 3.36937320097058546E+00 ! Position
view.pos (                3 ,       $V_Front                      ) = 1.47965904767625034E+00 ! Position
view.orient (             1 ,       $V_Front                      ) = 4.99756008386611938E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 5.01669406890869141E-01 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 4.97751444578170776E-01 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 5.00814676284790039E-01 ! Orientation
view.height (                       $V_Front                      ) = 4.31063354960432932E+00 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Front                      ) = 2.64817681163549423E-02 ! Front clipping plane value
view.bclip.value (                  $V_Front                      ) = 2.64817676544189453E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 7.78819084167480469E-01 ! Position
view.pos (                2 ,       $V_Top                        ) = 3.04098343849182129E+00 ! Position
view.pos (                3 ,       $V_Top                        ) = 6.35563709044957470E+00 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 7.19533175735102670E+00 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_Top                        ) = 1.20346937328577042E-02 ! Front clipping plane value
view.bclip.value (                  $V_Top                        ) = 1.20346927642822266E+01 ! Back clipping plane value
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

view.type (                         $V_side_XZ                    ) = 1                       ! Projection type
view.pos (                1 ,       $V_side_XZ                    ) = 1.60230457782745361E+00 ! Position
view.pos (                2 ,       $V_side_XZ                    ) = -1.94139805110522445E+01 ! Position
view.pos (                3 ,       $V_side_XZ                    ) = 1.83810257911682129E+00 ! Position
view.orient (             1 ,       $V_side_XZ                    ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_side_XZ                    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_side_XZ                    ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_side_XZ                    ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_side_XZ                    ) = 4.84800998053449295E+00 ! View height
view.fclip.auto (                   $V_side_XZ                    ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_side_XZ                    ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_side_XZ                    ) = 2.90930345654487610E-02 ! Front clipping plane value
view.bclip.value (                  $V_side_XZ                    ) = 2.90930328369140625E+01 ! Back clipping plane value
view.rotcenter.type (               $V_side_XZ                    ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_side_XZ                    ) = 1                       ! Adjust rotation center
view.motion.active (                $V_side_XZ                    ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 20 s }                ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.atol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.mat.enabled (            $SLV_SolverSettings           ) = 1                       ! mat file generation 0 = disable; 1 = enable
slv.output.eva.enabled (            $SLV_SolverSettings           ) = 1                       ! eva file generation 0 = disable; 1 = enable
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.output.fileinlining.enabled (   $SLV_SolverSettings           ) = 0                       ! file inlining 0 = disable; 1 = enable
slv.compat.solver (                 $SLV_SolverSettings           ) = 1                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.equi.fallback.enable (          $SLV_SolverSettings           ) = 0                       ! Enable fallbacks
slv.equi.st.meth (                  $SLV_SolverSettings           ) = 2                       ! EQUI_STATIC_INTPAR_METHOD
slv.lsa.type (                      $SLV_SolverSettings           ) = 0                       ! Analysis type: 0 = Frequency Response; 1 = System Response; 2 = Power Response
slv.lsa.freq.num (                  $SLV_SolverSettings           ) = 2000                    ! Number of frequencies
slv.lsa.freq.distrib (              $SLV_SolverSettings           ) = 0                       ! Frequency distribution: 0 = linear; 1 = logarithmical
slv.lsa.plot.ampl.type (            $SLV_SolverSettings           ) = 1                       ! Amplitude axis type: 0 = linear; 1 = logarithmical
slv.lsa.freq.min (                  $SLV_SolverSettings           ) = 1.00000000000000006E-01 ! Lower frequency bound
slv.lsa.freq.max (                  $SLV_SolverSettings           ) = 1.00000000000000000E+03 ! Upper frequency bound
slv.lsa.plot.freq.min (             $SLV_SolverSettings           ) = 1.00000000000000006E-01 ! Frequency min
slv.lsa.plot.freq.max (             $SLV_SolverSettings           ) = 2.00000000000000000E+03 ! Frequency max
slv.lsa.plot.phase.min (            $SLV_SolverSettings           ) = -2.00000000000000000E+02 ! Phase min
slv.lsa.plot.phase.max (            $SLV_SolverSettings           ) = 2.00000000000000000E+02 ! Phase max
slv.lsa.plot.ampl.min (             $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Amplitude min
slv.lsa.plot.ampl.max (             $SLV_SolverSettings           ) = 1.00000000000000000E+07 ! Amplitude max
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvargroup.begin (                 $SVG_material                 )                           ! $SVG_material
subvargroup.end (                   $SVG_material                 )                           ! $SVG_material

subvargroup.begin (                 $SVG_bed_plate                )                           ! $SVG_bed_plate
subvargroup.end (                   $SVG_bed_plate                )                           ! $SVG_bed_plate

subvargroup.begin (                 $SVG_main_shaft               )                           ! $SVG_main_shaft
subvargroup.end (                   $SVG_main_shaft               )                           ! $SVG_main_shaft

subvargroup.begin (                 $SVG_GB_frame                 )                           ! $SVG_GB_frame
subvargroup.end (                   $SVG_GB_frame                 )                           ! $SVG_GB_frame

subvargroup.begin (                 $SVG_INP_A                    )                           ! $SVG_INP_A
subvargroup.end (                   $SVG_INP_A                    )                           ! $SVG_INP_A

subvargroup.begin (                 $SVG_INP_B                    )                           ! $SVG_INP_B
subvargroup.end (                   $SVG_INP_B                    )                           ! $SVG_INP_B

subvargroup.begin (                 $SVG_stage_01                 )                           ! $SVG_stage_01
   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_01.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_01.$SVG_planet.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_01.$SVG_planet.$SVG_A
      subvargroup.desc (   1 ,      $SVG_A                        ) = 'PL_A, PL_B, and PL_C'  ! Description
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_01.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_01.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_A
      subvargroup.desc (   1 ,      $SVG_A                        ) = 'PLC_A'                 ! Description
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_01.$SVG_carrier.$SVG_B
      subvargroup.desc (   1 ,      $SVG_B                        ) = 'PLC_B'                 ! Description
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_01.$SVG_carrier
   subvargroup.desc (     1 ,       $SVG_carrier                  ) = 'PLC_A and PLC_B'       ! Description
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_01.$SVG_shaft
subvargroup.end (                   $SVG_stage_01                 )                           ! $SVG_stage_01

subvargroup.begin (                 $SVG_stage_02                 )                           ! $SVG_stage_02
   subvargroup.begin (              $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
   subvargroup.end (                $SVG_sun                      )                           ! $SVG_stage_02.$SVG_sun
   subvargroup.begin (              $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_02.$SVG_planet.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_02.$SVG_planet.$SVG_A
   subvargroup.end (                $SVG_planet                   )                           ! $SVG_stage_02.$SVG_planet
   subvargroup.begin (              $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
   subvargroup.end (                $SVG_ring                     )                           ! $SVG_stage_02.$SVG_ring
   subvargroup.begin (              $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_02.$SVG_carrier.$SVG_B
   subvargroup.end (                $SVG_carrier                  )                           ! $SVG_stage_02.$SVG_carrier
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_02.$SVG_shaft
subvargroup.end (                   $SVG_stage_02                 )                           ! $SVG_stage_02

subvargroup.begin (                 $SVG_stage_03                 )                           ! $SVG_stage_03
   subvargroup.begin (              $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_pinion.$SVG_C
   subvargroup.end (                $SVG_pinion                   )                           ! $SVG_stage_03.$SVG_pinion
   subvargroup.begin (              $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
      subvargroup.begin (           $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
      subvargroup.end (             $SVG_A                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_A
      subvargroup.begin (           $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
      subvargroup.end (             $SVG_B                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_B
      subvargroup.begin (           $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
      subvargroup.end (             $SVG_C                        )                           ! $SVG_stage_03.$SVG_wheel.$SVG_C
   subvargroup.end (                $SVG_wheel                    )                           ! $SVG_stage_03.$SVG_wheel
   subvargroup.begin (              $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
   subvargroup.end (                $SVG_shaft                    )                           ! $SVG_stage_03.$SVG_shaft
subvargroup.end (                   $SVG_stage_03                 )                           ! $SVG_stage_03

subvargroup.begin (                 $SVG_bearing_damping          )                           ! $SVG_bearing_damping
subvargroup.end (                   $SVG_bearing_damping          )                           ! $SVG_bearing_damping

subvargroup.begin (                 $SVG_mesh_stiffness           )                           ! $SVG_mesh_stiffness
subvargroup.end (                   $SVG_mesh_stiffness           )                           ! $SVG_mesh_stiffness

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $B_bed_plate                  ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_bed_plate                  ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_bed_plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.brf.st.pos (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_bed_plate                  ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.flx.cosim.job.type (           $B_bed_plate                  ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
body.flx.cosim.job.previous (       $B_bed_plate                  ) = ''                      ! previous abaqus job run
body.flx.cosim.job.cmdoptions (     $B_bed_plate                  ) = ''                      ! additional command line options for the abaqus run
body.flx.cosim.job.solver (         $B_bed_plate                  ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard
body.attr.2d.pos.x (                $B_bed_plate                  ) = -3.00000000000000000E+01
body.attr.2d.pos.y (                $B_bed_plate                  ) = 3.00000000000000000E+01
body.attr.2d.width (                $B_bed_plate                  ) = 1.10000000000000000E+02
body.attr.2d.height (               $B_bed_plate                  ) = 8.00000000000000000E+01

marker.type (                       $M_bed_plate_BRF              ) = 1                       ! Type
marker.parent (                     $M_bed_plate_BRF              ) = $B_bed_plate            ! Body
marker.flx.type (                   $M_bed_plate_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_bed_plate_main_shaft       ) = 2                       ! Type
marker.parent (                     $M_bed_plate_main_shaft       ) = $B_bed_plate            ! Body
marker.pos (              2 ,       $M_bed_plate_main_shaft       ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_main_shaft       ) = $_height                ! Position

marker.type (                       $M_bed_plate_INP_A            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_INP_A            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_A            ) = $SVG_INP_A.$_x          ! Position
marker.pos (              2 ,       $M_bed_plate_INP_A            ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_INP_A            ) = $_height                ! Position

marker.type (                       $M_bed_plate_INP_B            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_INP_B            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_INP_B            ) = $SVG_INP_B.$_x          ! Position
marker.pos (              2 ,       $M_bed_plate_INP_B            ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_INP_B            ) = $_height                ! Position

marker.type (                       $M_bed_plate_PLC_A            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_PLC_A            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_PLC_A            ) = $SVG_main_shaft.$_length ! Position
marker.pos (              2 ,       $M_bed_plate_PLC_A            ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_PLC_A            ) = $_height                ! Position

marker.type (                       $M_bed_plate_PLC_B            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_PLC_B            ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_PLC_B            ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_x ! Position
marker.pos (              2 ,       $M_bed_plate_PLC_B            ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_PLC_B            ) = $_height                ! Position

marker.type (                       $M_bed_plate_rotor            ) = 2                       ! Type
marker.parent (                     $M_bed_plate_rotor            ) = $B_bed_plate            ! Body
marker.pos (              2 ,       $M_bed_plate_rotor            ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_rotor            ) = $_height                ! Position

marker.type (                       $M_bed_plate_IMS_PLC_A        ) = 2                       ! Type
marker.parent (                     $M_bed_plate_IMS_PLC_A        ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_IMS_PLC_A        ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_x ! Position
marker.pos (              2 ,       $M_bed_plate_IMS_PLC_A        ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_IMS_PLC_A        ) = $_height                ! Position

marker.type (                       $M_bed_plate_IMS_PLC_B        ) = 2                       ! Type
marker.parent (                     $M_bed_plate_IMS_PLC_B        ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_IMS_PLC_B        ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_x ! Position
marker.pos (              2 ,       $M_bed_plate_IMS_PLC_B        ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_bed_plate_IMS_PLC_B        ) = $_height                ! Position

marker.type (                       $M_bed_plate_generator        ) = 2                       ! Type
marker.parent (                     $M_bed_plate_generator        ) = $B_bed_plate            ! Body
marker.pos (              1 ,       $M_bed_plate_generator        ) = $SVG_bed_plate.$_x_gen  ! Position
marker.pos (              2 ,       $M_bed_plate_generator        ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_y ! Position
marker.pos (              3 ,       $M_bed_plate_generator        ) = $_height                ! Position

joint.from (                        $J_bed_plate                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_bed_plate                  ) = $M_bed_plate_BRF        ! To Marker
joint.type (                        $J_bed_plate                  ) = 35                      ! Type
joint.disabled (                    $J_bed_plate                  ) = 0                       ! Disabled
joint.par (               1 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_x     ! [-] IFctn for x
joint.par (               2 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_y     ! [-] IFctn for y
joint.par (               3 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_z     ! [-] IFctn for z
joint.par (               4 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_alpha ! [-] IFctn for al
joint.par (               5 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_beta  ! [-] IFctn for be
joint.par (               6 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_gamma ! [-] IFctn for ga
joint.par (               7 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_x_dot ! [-] IFctn for v_x
joint.par (               8 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_y_dot ! [-] IFctn for v_y
joint.par (               9 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_z_dot ! [-] IFctn for v_z
joint.par (              10 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_alpha_dot ! [-] IFctn for w_x
joint.par (              11 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_beta_dot ! [-] IFctn for w_y
joint.par (              12 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_gamma_dot ! [-] IFctn for w_z
joint.par (              13 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_x_ddot ! [-] IFctn for a_x
joint.par (              14 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_y_ddot ! [-] IFctn for a_y
joint.par (              15 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_z_ddot ! [-] IFctn for a_z
joint.par (              16 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_alpha_ddot ! [-] IFctn for wd_x
joint.par (              17 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_beta_ddot ! [-] IFctn for wd_y
joint.par (              18 ,       $J_bed_plate                  ) = $IFG_bed_plate.$I_gamma_ddot ! [-] IFctn for wd_z
joint.par (              19 ,       $J_bed_plate                  ) = 1.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_bed_plate                  ) = 20
joint.attr.2d.pos.y (     1 ,       $J_bed_plate                  ) = 170
joint.attr.2d.ori (       1 ,       $J_bed_plate                  ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_bed_plate ) = 20, 20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_bed_plate ) = 210, 187
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_bed_plate   ) = 20, 20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_bed_plate   ) = 110, 153

prim.type (                         $P_bed_plate                  ) = 1                       ! Type
prim.ref (                          $P_bed_plate                  ) = $M_bed_plate_BRF        ! Reference Marker
prim.pos (                1 ,       $P_bed_plate                  ) = { $SVG_bed_plate.$_length/2.0 } ! Position
prim.pos (                2 ,       $P_bed_plate                  ) = { $SVG_bed_plate.$_width/2.0 } ! Position
prim.pos (                3 ,       $P_bed_plate                  ) = { -$SVG_bed_plate.$_thickness/2.0 } ! Position
prim.color.r (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_bed_plate                  ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_bed_plate                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.transparency (                 $P_bed_plate                  ) = 2.50000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_bed_plate                  ) = $SVG_material.$_rho     ! Density
prim.par (                2 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_length ! [m] Length in X
prim.par (                3 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_width  ! [m] Length in Y
prim.par (                4 ,       $P_bed_plate                  ) = $SVG_bed_plate.$_thickness ! [m] Length in Z


body.sb.node.id (         1 ,       $B_main_shaft                 ) = 1                       ! Node ID
body.sb.node.pos (        1 ,   1 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        2 ,   1 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   1 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         2 ,       $B_main_shaft                 ) = 2                       ! Node ID
body.sb.node.pos (        1 ,   2 , $B_main_shaft                 ) = $SVG_INP_A.$_x          ! Node Position
body.sb.node.pos (        2 ,   2 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   2 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         3 ,       $B_main_shaft                 ) = 3                       ! Node ID
body.sb.node.pos (        1 ,   3 , $B_main_shaft                 ) = $SVG_INP_B.$_x          ! Node Position
body.sb.node.pos (        2 ,   3 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   3 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         4 ,       $B_main_shaft                 ) = 4                       ! Node ID
body.sb.node.pos (        1 ,   4 , $B_main_shaft                 ) = $SVG_main_shaft.$_length ! Node Position
body.sb.node.pos (        2 ,   4 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   4 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Node Position
body.sb.ele.from (        1 ,       $B_main_shaft                 ) = 1                       ! From Node
body.sb.ele.to (          1 ,       $B_main_shaft                 ) = 2                       ! To Node
body.sb.ele.type (        1 ,       $B_main_shaft                 ) = 3                       ! Type
body.sb.ele.xsec (        1 ,   1 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.xsec (        2 ,   1 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.ori.vec (     1 ,   1 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   1 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   1 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.nodes.num (   1 ,       $B_main_shaft                 ) = 2                       ! Number of intermediate nodes along element axis
body.sb.ele.dmp.par (     1 ,   1 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   1 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      1 ,       $B_main_shaft                 ) = 1                       ! Active
body.sb.ele.from (        2 ,       $B_main_shaft                 ) = 2                       ! From Node
body.sb.ele.to (          2 ,       $B_main_shaft                 ) = 3                       ! To Node
body.sb.ele.type (        2 ,       $B_main_shaft                 ) = 3                       ! Type
body.sb.ele.xsec (        1 ,   2 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.xsec (        2 ,   2 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.ori.vec (     1 ,   2 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   2 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   2 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.nodes.num (   2 ,       $B_main_shaft                 ) = 2                       ! Number of intermediate nodes along element axis
body.sb.ele.dmp.par (     1 ,   2 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   2 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      2 ,       $B_main_shaft                 ) = 1                       ! Active
body.sb.ele.from (        3 ,       $B_main_shaft                 ) = 3                       ! From Node
body.sb.ele.to (          3 ,       $B_main_shaft                 ) = 4                       ! To Node
body.sb.ele.type (        3 ,       $B_main_shaft                 ) = 3                       ! Type
body.sb.ele.xsec (        1 ,   3 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.xsec (        2 ,   3 , $B_main_shaft                 ) = $XSc_main_shaft         ! Cross Section
body.sb.ele.ori.vec (     1 ,   3 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   3 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   3 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.nodes.num (   3 ,       $B_main_shaft                 ) = 2                       ! Number of intermediate nodes along element axis
body.sb.ele.dmp.par (     1 ,   3 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   3 , $B_main_shaft                 ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      3 ,       $B_main_shaft                 ) = 1                       ! Active
body.m (                            $B_main_shaft                 ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_main_shaft                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_main_shaft                 ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_main_shaft                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.type (                         $B_main_shaft                 ) = 0                       ! Body type: 0=rigid; 1=linear flex; 2=linear SIMBEAM; 4=nonlinear SIMBEAM; 6=nonlinear flex; 7=Abq Co-Sim; 8=flextrack
body.brf.st.pos (         1 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.flx.st.pos (         1 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         2 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         3 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         4 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         5 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         6 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         7 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         8 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         9 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        10 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        11 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        12 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        13 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        14 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        15 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        16 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        17 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (        18 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.vel (         1 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         2 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         3 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         4 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         5 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         6 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         7 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         8 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         9 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        10 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        11 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        12 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        13 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        14 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        15 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        16 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        17 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (        18 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.dep (         1 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         2 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         3 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         4 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         5 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         6 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         7 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         8 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (         9 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        10 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        11 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        12 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        13 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        14 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        15 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        16 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        17 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.dep (        18 ,       $B_main_shaft                 ) = 0                       ! State dependency
body.flx.st.scal.stiff (   1 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   2 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   3 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   4 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   5 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   6 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   7 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   8 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (   9 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  10 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  11 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  12 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  13 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  14 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  15 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  16 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  17 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.scal.stiff (  18 ,      $B_main_shaft                 ) = 1.00000000000000000E+00 ! Frequency scaling factor
body.flx.st.prestress (   1 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   2 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   3 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   4 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   5 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   6 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   7 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   8 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   9 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  10 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  11 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  12 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  13 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  14 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  15 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  16 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  17 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (  18 ,       $B_main_shaft                 ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.cosim.job.type (           $B_main_shaft                 ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
body.flx.cosim.job.previous (       $B_main_shaft                 ) = ''                      ! previous abaqus job run
body.flx.cosim.job.cmdoptions (     $B_main_shaft                 ) = ''                      ! additional command line options for the abaqus run
body.flx.cosim.job.solver (         $B_main_shaft                 ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

marker.type (                       $M_main_shaft_BRF             ) = 1                       ! Type
marker.parent (                     $M_main_shaft_BRF             ) = $B_main_shaft           ! Body
marker.flx.type (                   $M_main_shaft_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_main_shaft_INP_A           ) = 2                       ! Type
marker.parent (                     $M_main_shaft_INP_A           ) = $B_main_shaft           ! Body
marker.pos (              1 ,       $M_main_shaft_INP_A           ) = $SVG_INP_A.$_x          ! Position

marker.type (                       $M_main_shaft_INP_B           ) = 2                       ! Type
marker.parent (                     $M_main_shaft_INP_B           ) = $B_main_shaft           ! Body
marker.pos (              1 ,       $M_main_shaft_INP_B           ) = $SVG_INP_B.$_x          ! Position

marker.type (                       $M_main_shaft_carrier         ) = 2                       ! Type
marker.parent (                     $M_main_shaft_carrier         ) = $B_main_shaft           ! Body
marker.pos (              1 ,       $M_main_shaft_carrier         ) = $SVG_main_shaft.$_length ! Position

marker.type (                       $M_main_shaft_rotor           ) = 2                       ! Type
marker.parent (                     $M_main_shaft_rotor           ) = $B_main_shaft           ! Body

joint.from (                        $J_main_shaft                 ) = $M_bed_plate_main_shaft ! From Marker
joint.to (                          $J_main_shaft                 ) = $M_main_shaft_BRF       ! To Marker
joint.type (                        $J_main_shaft                 ) = 15                      ! Type
joint.st.pos (            1 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            2 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            3 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            4 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            5 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.pos (            6 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Position
joint.st.vel (            1 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! Velocity
joint.st.equi (           1 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.st.equi (           2 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.st.equi (           3 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.st.equi (           4 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.st.equi (           5 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.st.equi (           6 ,       $J_main_shaft                 ) = 3                       ! Equilibrium
joint.par (               2 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Rotation axis
joint.par (               3 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Tilting
joint.par (               4 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Translation in x
joint.par (               5 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Translation in y
joint.par (               6 ,       $J_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Translation in z

prim.type (                         $P_main_shaft                 ) = 2                       ! Type
prim.ref (                          $P_main_shaft                 ) = $M_main_shaft_BRF       ! Reference Marker
prim.pos (                1 ,       $P_main_shaft                 ) = { $SVG_main_shaft.$_length/2.0 } ! Position
prim.ang (                3 ,       $P_main_shaft                 ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_main_shaft                 ) = 1.74900000000000006E+02 ! Colors (red component)
prim.color.r (            2 ,       $P_main_shaft                 ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_main_shaft                 ) = 1.02900000000000006E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_main_shaft                 ) = 6.15000000000000000E+01 ! Colors (blue component)
prim.color.b (            2 ,       $P_main_shaft                 ) = 2.55000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_main_shaft                 ) = $SVG_material.$_rho     ! Density
prim.par (                2 ,       $P_main_shaft                 ) = $SVG_main_shaft.$_length ! [m] Height
prim.par (                3 ,       $P_main_shaft                 ) = $SVG_main_shaft.$_diameter ! [m] Outer diameter
prim.par (                4 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_main_shaft                 ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! [-] Number of planes
prim.par (                6 ,       $P_main_shaft                 ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_main_shaft                 ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_main_shaft                 ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_main_shaft                 ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_GB_frame                   ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_GB_frame                   ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_GB_frame                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_GB_frame                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_GB_frame                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_GB_frame                   ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.brf.st.pos (         1 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         2 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         3 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         4 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         5 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.pos (         6 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
body.brf.st.vel (         1 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         2 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         3 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         4 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         5 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.brf.st.vel (         6 ,       $B_GB_frame                   ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
body.flx.cosim.job.type (           $B_GB_frame                   ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
body.flx.cosim.job.previous (       $B_GB_frame                   ) = ''                      ! previous abaqus job run
body.flx.cosim.job.cmdoptions (     $B_GB_frame                   ) = ''                      ! additional command line options for the abaqus run
body.flx.cosim.job.solver (         $B_GB_frame                   ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

marker.type (                       $M_GB_frame_BRF               ) = 1                       ! Type
marker.parent (                     $M_GB_frame_BRF               ) = $B_GB_frame             ! Body
marker.flx.type (                   $M_GB_frame_BRF               ) = 4                       ! Flexible type

marker.type (                       $M_GB_frame_ring_01           ) = 2                       ! Type
marker.parent (                     $M_GB_frame_ring_01           ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_ring_01           ) = $SVG_stage_01.$SVG_ring.$_x ! Position
marker.pos (              2 ,       $M_GB_frame_ring_01           ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_ring_01           ) = $_height                ! Position

marker.type (                       $M_GB_frame_shaft_01          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_shaft_01          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_shaft_01          ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_x ! Position
marker.pos (              2 ,       $M_GB_frame_shaft_01          ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_shaft_01          ) = $_height                ! Position

marker.type (                       $M_GB_frame_ring_02           ) = 2                       ! Type
marker.parent (                     $M_GB_frame_ring_02           ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_ring_02           ) = $SVG_stage_02.$SVG_ring.$_x ! Position
marker.pos (              2 ,       $M_GB_frame_ring_02           ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_ring_02           ) = $_height                ! Position

marker.type (                       $M_GB_frame_shaft_02          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_shaft_02          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_shaft_02          ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_x ! Position
marker.pos (              2 ,       $M_GB_frame_shaft_02          ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_shaft_02          ) = $_height                ! Position

marker.type (                       $M_GB_frame_wheel_A           ) = 2                       ! Type
marker.parent (                     $M_GB_frame_wheel_A           ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_wheel_A           ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_wheel_A           ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_wheel_A           ) = $_height                ! Position

marker.type (                       $M_GB_frame_wheel_B           ) = 2                       ! Type
marker.parent (                     $M_GB_frame_wheel_B           ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_wheel_B           ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_wheel_B           ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_wheel_B           ) = $_height                ! Position

marker.type (                       $M_GB_frame_wheel_C           ) = 2                       ! Type
marker.parent (                     $M_GB_frame_wheel_C           ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_wheel_C           ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_wheel_C           ) = { $SVG_bed_plate.$_width/2.0 } ! Position
marker.pos (              3 ,       $M_GB_frame_wheel_C           ) = $_height                ! Position

marker.type (                       $M_GB_frame_shaft_03          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_shaft_03          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_shaft_03          ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_shaft_03          ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_y ! Position
marker.pos (              3 ,       $M_GB_frame_shaft_03          ) = $_height                ! Position

marker.type (                       $M_GB_frame_pinion_A          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_pinion_A          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_pinion_A          ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_pinion_A          ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_y ! Position
marker.pos (              3 ,       $M_GB_frame_pinion_A          ) = $_height                ! Position

marker.type (                       $M_GB_frame_pinion_B          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_pinion_B          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_pinion_B          ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_pinion_B          ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_y ! Position
marker.pos (              3 ,       $M_GB_frame_pinion_B          ) = $_height                ! Position

marker.type (                       $M_GB_frame_pinion_C          ) = 2                       ! Type
marker.parent (                     $M_GB_frame_pinion_C          ) = $B_GB_frame             ! Body
marker.pos (              1 ,       $M_GB_frame_pinion_C          ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_x_GB ! Position
marker.pos (              2 ,       $M_GB_frame_pinion_C          ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_y ! Position
marker.pos (              3 ,       $M_GB_frame_pinion_C          ) = $_height                ! Position

joint.from (                        $J_GB_frame                   ) = $M_bed_plate_BRF        ! From Marker
joint.to (                          $J_GB_frame                   ) = $M_GB_frame_BRF         ! To Marker
joint.type (                        $J_GB_frame                   ) = 0                       ! Type
joint.par (               1 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_GB_frame                   ) = 0.00000000000000000E+00 ! [-] Rotation sequence

prim.type (                         $P_GB_frame                   ) = 1                       ! Type
prim.ref (                          $P_GB_frame                   ) = $M_GB_frame_BRF         ! Reference Marker
prim.pos (                1 ,       $P_GB_frame                   ) = { $SVG_GB_frame.$_length/2.0 + $SVG_main_shaft.$_length*7/8 } ! Position
prim.pos (                2 ,       $P_GB_frame                   ) = { $SVG_bed_plate.$_width/2.0 } ! Position
prim.pos (                3 ,       $P_GB_frame                   ) = { $SVG_GB_frame.$_width/2.0 } ! Position
prim.color.r (            1 ,       $P_GB_frame                   ) = 0.00000000000000000E+00 ! Colors (red component)
prim.color.g (            1 ,       $P_GB_frame                   ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_GB_frame                   ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_GB_frame                   ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.drawstyle (                    $P_GB_frame                   ) = 2                       ! Draw style
prim.mp.dens.solid (                $P_GB_frame                   ) = $SVG_material.$_rho     ! Density
prim.par (                2 ,       $P_GB_frame                   ) = $SVG_GB_frame.$_length  ! [m] Length in X
prim.par (                3 ,       $P_GB_frame                   ) = $SVG_GB_frame.$_width   ! [m] Length in Y
prim.par (                4 ,       $P_GB_frame                   ) = $SVG_GB_frame.$_width   ! [m] Length in Z


bodygroup.begin (                   $BG_stage_01                  )                           ! $BG_stage_01
   body.m (                         $B_carrier                    ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_carrier                    ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_carrier                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_carrier                    ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_carrier                    ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_carrier                    ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_carrier                    ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_carrier_BRF                ) = 1                       ! Type
   marker.parent (                  $M_carrier_BRF                ) = $BG_stage_01.$B_carrier ! Body
   marker.flx.type (                $M_carrier_BRF                ) = 4                       ! Flexible type

   marker.type (                    $M_carrier_pin_01             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_01             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_01             ) = { $SVG_stage_01.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_01             ) = $SVG_stage_01.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_A1             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A1             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A1             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A1             ) = $SVG_stage_01.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_B1             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B1             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B1             ) = $SVG_stage_01.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B1             ) = $SVG_stage_01.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_02             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_02             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_02             ) = { $SVG_stage_01.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_02             ) = { $SVG_stage_01.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_02             ) = { $SVG_stage_01.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_A2             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A2             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A2             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A2             ) = { $SVG_stage_01.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_A2             ) = { $SVG_stage_01.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_B2             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B2             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B2             ) = $SVG_stage_01.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B2             ) = { $SVG_stage_01.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_B2             ) = { $SVG_stage_01.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_03             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_03             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_03             ) = { $SVG_stage_01.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_03             ) = { $SVG_stage_01.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_03             ) = { $SVG_stage_01.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_pin_A3             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A3             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A3             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A3             ) = { $SVG_stage_01.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_A3             ) = { $SVG_stage_01.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_pin_B3             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B3             ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B3             ) = $SVG_stage_01.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B3             ) = { $SVG_stage_01.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_B3             ) = { $SVG_stage_01.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_PLC_A              ) = 2                       ! Type
   marker.parent (                  $M_carrier_PLC_A              ) = $BG_stage_01.$B_carrier ! Body

   marker.type (                    $M_carrier_PLC_B              ) = 2                       ! Type
   marker.parent (                  $M_carrier_PLC_B              ) = $BG_stage_01.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_PLC_B              ) = $SVG_stage_01.$SVG_carrier.$_width ! Position

   joint.from (                     $J_carrier                    ) = $M_main_shaft_carrier   ! From Marker
   joint.to (                       $J_carrier                    ) = $BG_stage_01.$M_carrier_BRF ! To Marker
   joint.type (                     $J_carrier                    ) = 0                       ! Type
   joint.par (            1 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_carrier                    ) = 2                       ! Type
   prim.ref (                       $P_carrier                    ) = $BG_stage_01.$M_carrier_BRF ! Reference Marker
   prim.pos (             1 ,       $P_carrier                    ) = { $SVG_stage_01.$SVG_carrier.$_width/2.0 } ! Position
   prim.pos (             3 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Position
   prim.ang (             3 ,       $P_carrier                    ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_carrier                    ) = 1.39800000000000011E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_carrier                    ) = 2.55000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_carrier                    ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_carrier                    ) = $SVG_stage_01.$SVG_carrier.$_width ! [m] Height
   prim.par (             3 ,       $P_carrier                    ) = $SVG_stage_01.$SVG_carrier.$_diameter_out ! [m] Outer diameter
   prim.par (             4 ,       $P_carrier                    ) = $SVG_stage_01.$SVG_carrier.$_diameter_in ! [m] Inner diameter
   prim.par (             5 ,       $P_carrier                    ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! [rad] Start angle


   body.m (                         $B_ring                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_ring                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_ring                       ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_ring                       ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_ring                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_ring_BRF                   ) = $BG_stage_01.$B_ring    ! Body
   marker.flx.type (                $M_ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_ring_rot                   ) = 2                       ! Type
   marker.parent (                  $M_ring_rot                   ) = $BG_stage_01.$B_ring    ! Body
   marker.ang (           2 ,       $M_ring_rot                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_ring                       ) = $M_GB_frame_ring_01     ! From Marker
   joint.to (                       $J_ring                       ) = $BG_stage_01.$M_ring_BRF ! To Marker
   joint.type (                     $J_ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_ring                       ) = 25                      ! Type
   prim.ref (                       $P_ring                       ) = $BG_stage_01.$M_ring_rot ! Reference Marker
   prim.color.r (         1 ,       $P_ring                       ) = 9.47999999999999972E+01 ! Colors (red component)
   prim.color.r (         2 ,       $P_ring                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_ring                       ) = 1.83000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_ring                       ) = 9.20999999999999943E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_ring                       ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_ring                       ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_ring                       ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_ring                       ) = $SVG_stage_01.$SVG_ring.$_angle ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_ring                 ) = $SVG_stage_01.$_normal_module ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_ring                 ) = $SVG_stage_01.$_pressure_angle ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_ring                 ) = $SVG_stage_01.$SVG_ring.$_prof_shift_coeff ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_ring                 ) = $SVG_stage_01.$_helix_angle ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_ring                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_ring           ) = $_addendum_coeff        ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_ring           ) = $_dedendum_coeff        ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_ring           ) = 8.00000000000000017E-03 ! [-] Value
   prim.par (             2 ,   3 ,   8 , $P_ring                 ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_ring                 ) = $SVG_stage_01.$_face_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_ring     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_ring     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_ring                       ) = 0.00000000000000000E+00 ! [m] Ring Diameter
   prim.par (             3 ,   3 , $P_ring                       ) = $SVG_stage_01.$SVG_ring.$_num_teeth ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_ring                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_ring                       ) = 0.00000000000000000E+00 ! [-] Ring discretisation per tooth
   prim.par (             4 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_ring                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_ring                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_ring                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_ring           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_shaft                      ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_shaft                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_shaft                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_shaft                      ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_shaft                      ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_shaft                      ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_shaft                      ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_shaft_BRF                  ) = 1                       ! Type
   marker.parent (                  $M_shaft_BRF                  ) = $BG_stage_01.$B_shaft   ! Body
   marker.flx.type (                $M_shaft_BRF                  ) = 4                       ! Flexible type

   marker.type (                    $M_shaft_sun                  ) = 2                       ! Type
   marker.parent (                  $M_shaft_sun                  ) = $BG_stage_01.$B_shaft   ! Body
   marker.pos (           1 ,       $M_shaft_sun                  ) = { -0.1*$SVG_stage_01.$_face_width } ! Position

   marker.type (                    $M_shaft_carrier_02           ) = 2                       ! Type
   marker.parent (                  $M_shaft_carrier_02           ) = $BG_stage_01.$B_shaft   ! Body
   marker.pos (           1 ,       $M_shaft_carrier_02           ) = $SVG_stage_01.$SVG_shaft.$_length ! Position

   joint.from (                     $J_shaft                      ) = $M_GB_frame_shaft_01    ! From Marker
   joint.to (                       $J_shaft                      ) = $BG_stage_01.$M_shaft_BRF ! To Marker
   joint.type (                     $J_shaft                      ) = 15                      ! Type
   joint.st.pos (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.vel (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.par (            2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Rotation axis
   joint.par (            3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Tilting
   joint.par (            4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in x
   joint.par (            5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in y
   joint.par (            6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in z

   prim.type (                      $P_shaft                      ) = 2                       ! Type
   prim.ref (                       $P_shaft                      ) = $BG_stage_01.$M_shaft_BRF ! Reference Marker
   prim.pos (             1 ,       $P_shaft                      ) = { $SVG_stage_01.$SVG_shaft.$_length/2.0 } ! Position
   prim.ang (             2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Angles
   prim.ang (             3 ,       $P_shaft                      ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_shaft                      ) = 2.20574999999999989E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_shaft                      ) = 2.06805000000000007E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_shaft                      ) = 1.10415000000000006E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_shaft                      ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_shaft                      ) = $SVG_stage_01.$SVG_shaft.$_length ! [m] Height
   prim.par (             3 ,       $P_shaft                      ) = $SVG_stage_01.$SVG_shaft.$_diameter ! [m] Outer diameter
   prim.par (             4 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_shaft                      ) = $SVG_stage_01.$SVG_sun.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_sun                        ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_sun                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_sun                        ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_sun                        ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_sun                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_sun_BRF                    ) = $BG_stage_01.$B_sun     ! Body
   marker.flx.type (                $M_sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_sun_rot                    ) = 2                       ! Type
   marker.parent (                  $M_sun_rot                    ) = $BG_stage_01.$B_sun     ! Body
   marker.ang (           2 ,       $M_sun_rot                    ) = { 90 deg }              ! Angles

   marker.type (                    $M_sun_shaft                  ) = 2                       ! Type
   marker.parent (                  $M_sun_shaft                  ) = $BG_stage_01.$B_sun     ! Body
   marker.pos (           1 ,       $M_sun_shaft                  ) = { $SVG_stage_01.$_face_width/2.0 } ! Position

   joint.from (                     $J_sun                        ) = $BG_stage_01.$M_shaft_sun ! From Marker
   joint.to (                       $J_sun                        ) = $BG_stage_01.$M_sun_shaft ! To Marker
   joint.type (                     $J_sun                        ) = 0                       ! Type
   joint.par (            1 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_sun                        ) = 25                      ! Type
   prim.ref (                       $P_sun                        ) = $BG_stage_01.$M_sun_rot ! Reference Marker
   prim.color.r (         1 ,       $P_sun                        ) = 2.30699999999999989E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_sun                        ) = 4.88999999999999986E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_sun                        ) = 5.07000000000000028E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_sun                        ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_sun                        ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_sun                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_sun                        ) = $SVG_stage_01.$SVG_sun.$_angle ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_sun                  ) = $SVG_stage_01.$_normal_module ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_sun                  ) = $SVG_stage_01.$_pressure_angle ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_sun                  ) = $SVG_stage_01.$SVG_sun.$_prof_shift_coeff ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_sun                  ) = $SVG_stage_01.$_helix_angle ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_sun                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_sun            ) = $_addendum_coeff        ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_sun            ) = $_dedendum_coeff        ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_sun            ) = 8.00000000000000017E-03 ! [-] Value
   prim.par (             2 ,   3 ,   8 , $P_sun                  ) = $SVG_stage_01.$SVG_sun.$_num_teeth ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_sun                  ) = $SVG_stage_01.$_face_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_sun      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_sun      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_sun                        ) = $SVG_stage_01.$SVG_sun.$_diam_bore ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_sun                        ) = $SVG_stage_01.$SVG_sun.$_num_teeth ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_sun                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_sun                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_sun                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_sun            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.begin (                $BG_planet_01                 )                           ! $BG_stage_01.$BG_planet_01
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_01.$BG_planet_01.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_01.$BG_planet_01.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_01.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_01.$BG_planet_01.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_01.$M_carrier_pin_01 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_01.$BG_planet_01.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_01.$BG_planet_01.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_01.$BG_planet_01.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_01.$BG_planet_01.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_01.$BG_planet_01.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_01.$BG_planet_01.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_01.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_01.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_01.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_01.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_01                 )                           ! $BG_stage_01.$BG_planet_01
   bodygroup.begin (                $BG_planet_02                 )                           ! $BG_stage_01.$BG_planet_02
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_01.$BG_planet_02.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_01.$BG_planet_02.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_01.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_01.$BG_planet_02.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_01.$M_carrier_pin_02 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_01.$BG_planet_02.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_01.$BG_planet_02.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_01.$BG_planet_02.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_01.$BG_planet_02.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_01.$BG_planet_02.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_01.$BG_planet_02.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_01.$BG_planet_02.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_01.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_01.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_01.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_01.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_02                 )                           ! $BG_stage_01.$BG_planet_02
   bodygroup.begin (                $BG_planet_03                 )                           ! $BG_stage_01.$BG_planet_03
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_01.$BG_planet_03.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_01.$BG_planet_03.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_01.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_01.$BG_planet_03.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_01.$M_carrier_pin_03 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_01.$BG_planet_03.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_01.$BG_planet_03.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_01.$BG_planet_03.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_01.$BG_planet_03.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_01.$BG_planet_03.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_01.$BG_planet_03.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_01.$BG_planet_03.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_01.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_01.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_01.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_01.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_01.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_03                 )                           ! $BG_stage_01.$BG_planet_03
bodygroup.end (                     $BG_stage_01                  )                           ! $BG_stage_01

bodygroup.begin (                   $BG_stage_02                  )                           ! $BG_stage_02
   body.m (                         $B_carrier                    ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_carrier                    ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_carrier                    ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_carrier                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_carrier                    ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_carrier                    ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_carrier                    ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_carrier                    ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_carrier                    ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_carrier_BRF                ) = 1                       ! Type
   marker.parent (                  $M_carrier_BRF                ) = $BG_stage_02.$B_carrier ! Body
   marker.flx.type (                $M_carrier_BRF                ) = 4                       ! Flexible type

   marker.type (                    $M_carrier_pin_01             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_01             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_01             ) = { $SVG_stage_02.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_01             ) = $SVG_stage_02.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_A1             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A1             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A1             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A1             ) = $SVG_stage_02.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_B1             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B1             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B1             ) = $SVG_stage_02.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B1             ) = $SVG_stage_02.$_center_distance ! Position

   marker.type (                    $M_carrier_pin_02             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_02             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_02             ) = { $SVG_stage_02.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_02             ) = { $SVG_stage_02.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_02             ) = { $SVG_stage_02.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_A2             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A2             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A2             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A2             ) = { $SVG_stage_02.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_A2             ) = { $SVG_stage_02.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_B2             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B2             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B2             ) = $SVG_stage_02.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B2             ) = { $SVG_stage_02.$_center_distance*cos(120 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_B2             ) = { $SVG_stage_02.$_center_distance*sin(120 deg) } ! Position

   marker.type (                    $M_carrier_pin_03             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_03             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_03             ) = { $SVG_stage_02.$SVG_carrier.$_width/2.0 } ! Position
   marker.pos (           2 ,       $M_carrier_pin_03             ) = { $SVG_stage_02.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_03             ) = { $SVG_stage_02.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_pin_A3             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_A3             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_A3             ) = 0.00000000000000000E+00 ! Position
   marker.pos (           2 ,       $M_carrier_pin_A3             ) = { $SVG_stage_02.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_A3             ) = { $SVG_stage_02.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_pin_B3             ) = 2                       ! Type
   marker.parent (                  $M_carrier_pin_B3             ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_pin_B3             ) = $SVG_stage_02.$SVG_carrier.$_width ! Position
   marker.pos (           2 ,       $M_carrier_pin_B3             ) = { $SVG_stage_02.$_center_distance*cos(240 deg) } ! Position
   marker.pos (           3 ,       $M_carrier_pin_B3             ) = { $SVG_stage_02.$_center_distance*sin(240 deg) } ! Position

   marker.type (                    $M_carrier_IMS_PLC_A          ) = 2                       ! Type
   marker.parent (                  $M_carrier_IMS_PLC_A          ) = $BG_stage_02.$B_carrier ! Body

   marker.type (                    $M_carrier_IMS_PLC_B          ) = 2                       ! Type
   marker.parent (                  $M_carrier_IMS_PLC_B          ) = $BG_stage_02.$B_carrier ! Body
   marker.pos (           1 ,       $M_carrier_IMS_PLC_B          ) = $SVG_stage_02.$SVG_carrier.$_width ! Position

   joint.from (                     $J_carrier                    ) = $BG_stage_01.$M_shaft_carrier_02 ! From Marker
   joint.to (                       $J_carrier                    ) = $BG_stage_02.$M_carrier_BRF ! To Marker
   joint.type (                     $J_carrier                    ) = 0                       ! Type
   joint.par (            1 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_carrier                    ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_carrier                    ) = 2                       ! Type
   prim.ref (                       $P_carrier                    ) = $BG_stage_02.$M_carrier_BRF ! Reference Marker
   prim.pos (             1 ,       $P_carrier                    ) = { $SVG_stage_02.$SVG_carrier.$_width/2.0 } ! Position
   prim.pos (             3 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Position
   prim.ang (             3 ,       $P_carrier                    ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_carrier                    ) = 1.39800000000000011E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_carrier                    ) = 2.55000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_carrier                    ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_carrier                    ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_carrier                    ) = $SVG_stage_02.$SVG_carrier.$_width ! [m] Height
   prim.par (             3 ,       $P_carrier                    ) = $SVG_stage_02.$SVG_carrier.$_diameter_out ! [m] Outer diameter
   prim.par (             4 ,       $P_carrier                    ) = $SVG_stage_02.$SVG_carrier.$_diameter_in ! [m] Inner diameter
   prim.par (             5 ,       $P_carrier                    ) = $SVG_stage_02.$SVG_ring.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_carrier                    ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_carrier                    ) = 0.00000000000000000E+00 ! [rad] Start angle


   body.m (                         $B_ring                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_ring                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_ring                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_ring                       ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_ring                       ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_ring                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_ring_BRF                   ) = $BG_stage_02.$B_ring    ! Body
   marker.flx.type (                $M_ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_ring_rot                   ) = 2                       ! Type
   marker.parent (                  $M_ring_rot                   ) = $BG_stage_02.$B_ring    ! Body
   marker.ang (           2 ,       $M_ring_rot                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_ring                       ) = $M_GB_frame_ring_02     ! From Marker
   joint.to (                       $J_ring                       ) = $BG_stage_02.$M_ring_BRF ! To Marker
   joint.type (                     $J_ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_ring                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_ring                       ) = 25                      ! Type
   prim.ref (                       $P_ring                       ) = $BG_stage_02.$M_ring_rot ! Reference Marker
   prim.color.r (         1 ,       $P_ring                       ) = 9.47999999999999972E+01 ! Colors (red component)
   prim.color.r (         2 ,       $P_ring                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_ring                       ) = 1.83000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_ring                       ) = 9.20999999999999943E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_ring                       ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_ring                       ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_ring                       ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_ring                       ) = $SVG_stage_02.$SVG_ring.$_angle ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_ring                 ) = $SVG_stage_02.$_normal_module ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_ring                 ) = $SVG_stage_02.$_pressure_angle ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_ring                 ) = $SVG_stage_02.$SVG_ring.$_prof_shift_coeff ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_ring                 ) = $SVG_stage_02.$_helix_angle ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_ring                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_ring           ) = $_addendum_coeff        ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_ring           ) = $_dedendum_coeff        ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_ring           ) = 8.00000000000000017E-03 ! [-] Value
   prim.par (             2 ,   3 ,   8 , $P_ring                 ) = $SVG_stage_02.$SVG_ring.$_num_teeth ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_ring                 ) = $SVG_stage_02.$_face_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_ring           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_ring     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_ring     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_ring           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_ring                       ) = 0.00000000000000000E+00 ! [m] Ring Diameter
   prim.par (             3 ,   3 , $P_ring                       ) = $SVG_stage_02.$SVG_ring.$_num_teeth ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_ring                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_ring                       ) = 0.00000000000000000E+00 ! [-] Ring discretisation per tooth
   prim.par (             4 ,       $P_ring                       ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_ring                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_ring                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_ring                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_ring                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_ring           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_shaft                      ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_shaft                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_shaft                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_shaft                      ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_shaft                      ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_shaft                      ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_shaft                      ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_shaft_BRF                  ) = 1                       ! Type
   marker.parent (                  $M_shaft_BRF                  ) = $BG_stage_02.$B_shaft   ! Body
   marker.flx.type (                $M_shaft_BRF                  ) = 4                       ! Flexible type

   marker.type (                    $M_shaft_sun                  ) = 2                       ! Type
   marker.parent (                  $M_shaft_sun                  ) = $BG_stage_02.$B_shaft   ! Body
   marker.pos (           1 ,       $M_shaft_sun                  ) = { -0.1*$SVG_stage_02.$_face_width } ! Position

   marker.type (                    $M_shaft_wheel                ) = 2                       ! Type
   marker.parent (                  $M_shaft_wheel                ) = $BG_stage_02.$B_shaft   ! Body
   marker.pos (           1 ,       $M_shaft_wheel                ) = $SVG_stage_02.$SVG_shaft.$_length ! Position

   joint.from (                     $J_shaft                      ) = $M_GB_frame_shaft_02    ! From Marker
   joint.to (                       $J_shaft                      ) = $BG_stage_02.$M_shaft_BRF ! To Marker
   joint.type (                     $J_shaft                      ) = 15                      ! Type
   joint.st.pos (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.vel (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.par (            2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Rotation axis
   joint.par (            3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Tilting
   joint.par (            4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in x
   joint.par (            5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in y
   joint.par (            6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in z

   prim.type (                      $P_shaft                      ) = 2                       ! Type
   prim.ref (                       $P_shaft                      ) = $BG_stage_02.$M_shaft_BRF ! Reference Marker
   prim.pos (             1 ,       $P_shaft                      ) = { $SVG_stage_02.$SVG_shaft.$_length/2.0 } ! Position
   prim.ang (             2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Angles
   prim.ang (             3 ,       $P_shaft                      ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_shaft                      ) = 2.20574999999999989E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_shaft                      ) = 2.06805000000000007E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_shaft                      ) = 1.10415000000000006E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_shaft                      ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_shaft                      ) = $SVG_stage_02.$SVG_shaft.$_length ! [m] Height
   prim.par (             3 ,       $P_shaft                      ) = $SVG_stage_02.$SVG_shaft.$_diameter ! [m] Outer diameter
   prim.par (             4 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_shaft                      ) = $SVG_stage_02.$SVG_sun.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_sun                        ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_sun                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_sun                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_sun                        ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_sun                        ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_sun                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_sun_BRF                    ) = $BG_stage_02.$B_sun     ! Body
   marker.flx.type (                $M_sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_sun_rot                    ) = 2                       ! Type
   marker.parent (                  $M_sun_rot                    ) = $BG_stage_02.$B_sun     ! Body
   marker.ang (           2 ,       $M_sun_rot                    ) = { 90 deg }              ! Angles

   marker.type (                    $M_sun_shaft                  ) = 2                       ! Type
   marker.parent (                  $M_sun_shaft                  ) = $BG_stage_02.$B_sun     ! Body
   marker.pos (           1 ,       $M_sun_shaft                  ) = { $SVG_stage_02.$_face_width/2.0 } ! Position

   joint.from (                     $J_sun                        ) = $BG_stage_02.$M_shaft_sun ! From Marker
   joint.to (                       $J_sun                        ) = $BG_stage_02.$M_sun_shaft ! To Marker
   joint.type (                     $J_sun                        ) = 0                       ! Type
   joint.par (            1 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_sun                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

   prim.type (                      $P_sun                        ) = 25                      ! Type
   prim.ref (                       $P_sun                        ) = $BG_stage_02.$M_sun_rot ! Reference Marker
   prim.color.r (         1 ,       $P_sun                        ) = 2.30699999999999989E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_sun                        ) = 4.88999999999999986E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_sun                        ) = 5.07000000000000028E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_sun                        ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_sun                        ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
   prim.par (             2 ,   1 , $P_sun                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_sun                        ) = $SVG_stage_02.$SVG_sun.$_angle ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_sun                  ) = $SVG_stage_02.$_normal_module ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_sun                  ) = $SVG_stage_02.$_pressure_angle ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_sun                  ) = $SVG_stage_02.$SVG_sun.$_prof_shift_coeff ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_sun                  ) = $SVG_stage_02.$_helix_angle ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_sun                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_sun            ) = $_addendum_coeff        ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_sun            ) = $_dedendum_coeff        ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_sun            ) = 8.00000000000000017E-03 ! [-] Value
   prim.par (             2 ,   3 ,   8 , $P_sun                  ) = $SVG_stage_02.$SVG_sun.$_num_teeth ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_sun                  ) = $SVG_stage_02.$_face_width ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_sun            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_sun      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_sun      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_sun            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Graphical representation
   prim.par (             3 ,   1 , $P_sun                        ) = $SVG_stage_02.$SVG_sun.$_diam_bore ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_sun                        ) = $SVG_stage_02.$SVG_sun.$_num_teeth ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_sun                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,       $P_sun                        ) = 0.00000000000000000E+00 ! [-] Profile modification
   prim.par (             4 ,   1 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_sun                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_sun                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_sun                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_sun            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.begin (                $BG_planet_01                 )                           ! $BG_stage_02.$BG_planet_01
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_02.$BG_planet_01.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_02.$BG_planet_01.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_02.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_02.$BG_planet_01.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_02.$M_carrier_pin_01 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_02.$BG_planet_01.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_02.$BG_planet_01.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_02.$BG_planet_01.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_02.$BG_planet_01.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_02.$BG_planet_01.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_02.$BG_planet_01.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_02.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_02.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_02.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_02.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_01                 )                           ! $BG_stage_02.$BG_planet_01
   bodygroup.begin (                $BG_planet_02                 )                           ! $BG_stage_02.$BG_planet_02
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_02.$BG_planet_02.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_02.$BG_planet_02.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_02.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_02.$BG_planet_02.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_02.$M_carrier_pin_02 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_02.$BG_planet_02.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_02.$BG_planet_02.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_02.$BG_planet_02.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_02.$BG_planet_02.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_02.$BG_planet_02.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_02.$BG_planet_02.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_02.$BG_planet_02.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_02.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_02.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_02.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_02.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_02                 )                           ! $BG_stage_02.$BG_planet_02
   bodygroup.begin (                $BG_planet_03                 )                           ! $BG_stage_02.$BG_planet_03
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_02.$BG_planet_03.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_02.$BG_planet_03.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_02.$SVG_planet.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_02.$BG_planet_03.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_x ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_02.$M_carrier_pin_03 ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_02.$BG_planet_03.$M_pin_BRF ! To Marker
      joint.type (                  $J_pin                        ) = 15                      ! Type
      joint.st.pos (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.pos (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Position
      joint.st.vel (      1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.st.vel (      6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! Velocity
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation axis
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Tilting
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Translation in z

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_02.$BG_planet_03.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_02.$BG_planet_03.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_02.$BG_planet_03.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_02.$BG_planet_03.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_02.$BG_planet_03.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_02.$BG_planet_03.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_02.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_02.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_02.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_02.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_02.$SVG_planet.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_planet_03                 )                           ! $BG_stage_02.$BG_planet_03
bodygroup.end (                     $BG_stage_02                  )                           ! $BG_stage_02

bodygroup.begin (                   $BG_stage_03                  )                           ! $BG_stage_03
   body.m (                         $B_shaft                      ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_shaft                      ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_shaft                      ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_shaft                      ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.brf.st.pos (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.pos (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
   body.brf.st.vel (      1 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      2 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      3 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      4 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      5 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.brf.st.vel (      6 ,       $B_shaft                      ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
   body.flx.cosim.job.type (        $B_shaft                      ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
   body.flx.cosim.job.previous (    $B_shaft                      ) = ''                      ! previous abaqus job run
   body.flx.cosim.job.cmdoptions (  $B_shaft                      ) = ''                      ! additional command line options for the abaqus run
   body.flx.cosim.job.solver (      $B_shaft                      ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

   marker.type (                    $M_shaft_BRF                  ) = 1                       ! Type
   marker.parent (                  $M_shaft_BRF                  ) = $BG_stage_03.$B_shaft   ! Body
   marker.flx.type (                $M_shaft_BRF                  ) = 4                       ! Flexible type

   marker.type (                    $M_shaft_generator            ) = 2                       ! Type
   marker.parent (                  $M_shaft_generator            ) = $BG_stage_03.$B_shaft   ! Body
   marker.pos (           1 ,       $M_shaft_generator            ) = $SVG_stage_03.$SVG_shaft.$_length ! Position

   joint.from (                     $J_shaft                      ) = $M_GB_frame_shaft_03    ! From Marker
   joint.to (                       $J_shaft                      ) = $BG_stage_03.$M_shaft_BRF ! To Marker
   joint.type (                     $J_shaft                      ) = 15                      ! Type
   joint.st.pos (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.pos (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Position
   joint.st.vel (         1 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! Velocity
   joint.par (            2 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Rotation axis
   joint.par (            3 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Tilting
   joint.par (            4 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in x
   joint.par (            5 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in y
   joint.par (            6 ,       $J_shaft                      ) = 0.00000000000000000E+00 ! [-] Translation in z

   prim.type (                      $P_shaft                      ) = 2                       ! Type
   prim.ref (                       $P_shaft                      ) = $BG_stage_03.$M_shaft_BRF ! Reference Marker
   prim.pos (             1 ,       $P_shaft                      ) = { $SVG_stage_03.$SVG_shaft.$_length/2.0 } ! Position
   prim.ang (             2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Angles
   prim.ang (             3 ,       $P_shaft                      ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_shaft                      ) = 2.20574999999999989E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_shaft                      ) = 2.06805000000000007E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_shaft                      ) = 1.10415000000000006E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_shaft                      ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.t (         1 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_shaft                      ) = $SVG_material.$_rho     ! Density
   prim.par (             2 ,       $P_shaft                      ) = $SVG_stage_03.$SVG_shaft.$_length ! [m] Height
   prim.par (             3 ,       $P_shaft                      ) = $SVG_stage_03.$SVG_shaft.$_diameter ! [m] Outer diameter
   prim.par (             4 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_shaft                      ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! [-] Number of planes
   prim.par (             6 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_shaft                      ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_shaft                      ) = 0.00000000000000000E+00 ! [-] Close geometry with


   bodygroup.begin (                $BG_wheel                     )                           ! $BG_stage_03.$BG_wheel
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_03.$BG_wheel.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_03.$BG_wheel.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_03.$SVG_wheel.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_03.$BG_wheel.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_x ! Position

      marker.type (                 $M_pin_C                      ) = 2                       ! Type
      marker.parent (               $M_pin_C                      ) = $BG_stage_03.$BG_wheel.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_x ! Position

      marker.type (                 $M_pin_shaft_02               ) = 2                       ! Type
      marker.parent (               $M_pin_shaft_02               ) = $BG_stage_03.$BG_wheel.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_shaft_02               ) = { -$SVG_stage_03.$SVG_wheel.$_pin_width/2.0 } ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_02.$M_shaft_wheel ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_03.$BG_wheel.$M_pin_shaft_02 ! To Marker
      joint.type (                  $J_pin                        ) = 0                       ! Type
      joint.par (         1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_03.$BG_wheel.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_03.$SVG_wheel.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_03.$SVG_wheel.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_03.$SVG_wheel.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_03.$BG_wheel.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_03.$BG_wheel.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_03.$BG_wheel.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_03.$BG_wheel.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_03.$BG_wheel.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 7.50000000000000000E+01 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 1.38900000000000006E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 1.91099999999999994E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_03.$SVG_wheel.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_03.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_03.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_03.$SVG_wheel.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = { -$SVG_stage_03.$_helix_angle } ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_03.$SVG_wheel.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_03.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_03.$SVG_wheel.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   2 , $P_gear                       ) = 0.00000000000000000E+00 ! [m] Rim thickness
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_03.$SVG_wheel.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_wheel                     )                           ! $BG_stage_03.$BG_wheel
   bodygroup.begin (                $BG_pinion                    )                           ! $BG_stage_03.$BG_pinion
      body.m (                      $B_pin                        ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_pin                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_pin                        ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_pin                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_pin                        ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_pin                        ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_pin                        ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_pin                      ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_pin                        ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_pin_BRF                    ) = 1                       ! Type
      marker.parent (               $M_pin_BRF                    ) = $BG_stage_03.$BG_pinion.$B_pin ! Body
      marker.flx.type (             $M_pin_BRF                    ) = 4                       ! Flexible type

      marker.type (                 $M_pin_A                      ) = 2                       ! Type
      marker.parent (               $M_pin_A                      ) = $BG_stage_03.$BG_pinion.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_A                      ) = { -$SVG_stage_03.$SVG_wheel.$SVG_A.$_x } ! Position

      marker.type (                 $M_pin_B                      ) = 2                       ! Type
      marker.parent (               $M_pin_B                      ) = $BG_stage_03.$BG_pinion.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_x ! Position

      marker.type (                 $M_pin_C                      ) = 2                       ! Type
      marker.parent (               $M_pin_C                      ) = $BG_stage_03.$BG_pinion.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_x ! Position

      marker.type (                 $M_pin_shaft_02               ) = 2                       ! Type
      marker.parent (               $M_pin_shaft_02               ) = $BG_stage_03.$BG_pinion.$B_pin ! Body
      marker.pos (        1 ,       $M_pin_shaft_02               ) = { -$SVG_stage_03.$SVG_wheel.$_pin_width/2.0 } ! Position

      joint.from (                  $J_pin                        ) = $BG_stage_03.$M_shaft_BRF ! From Marker
      joint.to (                    $J_pin                        ) = $BG_stage_03.$BG_pinion.$M_pin_C ! To Marker
      joint.type (                  $J_pin                        ) = 0                       ! Type
      joint.par (         1 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_pin                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_pin                        ) = 2                       ! Type
      prim.ref (                    $P_pin                        ) = $BG_stage_03.$BG_pinion.$M_pin_BRF ! Reference Marker
      prim.ang (          3 ,       $P_pin                        ) = { 90 deg }              ! Angles
      prim.color.r (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (green component)
      prim.color.g (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_pin                        ) = 1.28000000000000000E+02 ! Colors (blue component)
      prim.color.b (      2 ,       $P_pin                        ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_pin                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_pin                        ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_pin                        ) = $SVG_stage_03.$SVG_pinion.$_pin_width ! [m] Height
      prim.par (          3 ,       $P_pin                        ) = $SVG_stage_03.$SVG_pinion.$_diam_bore ! [m] Outer diameter
      prim.par (          4 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [m] Inner diameter
      prim.par (          5 ,       $P_pin                        ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! [-] Number of planes
      prim.par (          6 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
      prim.par (          7 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
      prim.par (          8 ,       $P_pin                        ) = 1.00000000000000000E+00 ! [-] Show top cap
      prim.par (          9 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Start angle
      prim.par (         10 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [rad] Delta angle
      prim.par (         11 ,       $P_pin                        ) = 0.00000000000000000E+00 ! [-] Close geometry with


      body.m (                      $B_gear                       ) = 1.00000000000000000E+00 ! Mass of the Body
      body.mp (                     $B_gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
      body.I.tens (       1 ,   1 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       2 ,   2 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.tens (       3 ,   3 , $B_gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
      body.I.kind (                 $B_gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
      body.brf.st.pos (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.pos (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Position x/y/z/al/be/ga
      body.brf.st.vel (   1 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   2 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   3 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   4 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   5 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.brf.st.vel (   6 ,       $B_gear                       ) = 0.00000000000000000E+00 ! Velocity x/y/z/al/be/ga
      body.flx.cosim.job.type (     $B_gear                       ) = 0                       ! 0=new run; 1=import co-sim with database results; 2=restart co-sim
      body.flx.cosim.job.previous ( $B_gear                       ) = ''                      ! previous abaqus job run
      body.flx.cosim.job.cmdoptions ( $B_gear                     ) = ''                      ! additional command line options for the abaqus run
      body.flx.cosim.job.solver (   $B_gear                       ) = 0                       ! 0=Abaqus/Explicit; 1=Abaqus/Standard

      marker.type (                 $M_gear_BRF                   ) = 1                       ! Type
      marker.parent (               $M_gear_BRF                   ) = $BG_stage_03.$BG_pinion.$B_gear ! Body
      marker.flx.type (             $M_gear_BRF                   ) = 4                       ! Flexible type

      marker.type (                 $M_gear_rot                   ) = 2                       ! Type
      marker.parent (               $M_gear_rot                   ) = $BG_stage_03.$BG_pinion.$B_gear ! Body
      marker.ang (        2 ,       $M_gear_rot                   ) = { 90 deg }              ! Angles

      joint.from (                  $J_gear                       ) = $BG_stage_03.$BG_pinion.$M_pin_BRF ! From Marker
      joint.to (                    $J_gear                       ) = $BG_stage_03.$BG_pinion.$M_gear_BRF ! To Marker
      joint.type (                  $J_gear                       ) = 0                       ! Type
      joint.par (         1 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
      joint.par (         2 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
      joint.par (         3 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
      joint.par (         4 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
      joint.par (         5 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
      joint.par (         6 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
      joint.par (         7 ,       $J_gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence

      prim.type (                   $P_gear                       ) = 25                      ! Type
      prim.ref (                    $P_gear                       ) = $BG_stage_03.$BG_pinion.$M_gear_rot ! Reference Marker
      prim.color.r (      1 ,       $P_gear                       ) = 2.30699999999999989E+02 ! Colors (red component)
      prim.color.r (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
      prim.color.g (      1 ,       $P_gear                       ) = 4.88999999999999986E+01 ! Colors (green component)
      prim.color.g (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
      prim.color.b (      1 ,       $P_gear                       ) = 5.07000000000000028E+01 ! Colors (blue component)
      prim.color.b (      2 ,       $P_gear                       ) = 2.55000000000000000E+02 ! Colors (blue component)
      prim.color.t (      1 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.color.t (      2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
      prim.mp.dens.solid (          $P_gear                       ) = $SVG_material.$_rho     ! Density
      prim.par (          2 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile Definition Parameters
      prim.par (          2 ,   1 , $P_gear                       ) = 3.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   2 , $P_gear                       ) = $SVG_stage_03.$SVG_pinion.$_angle ! [rad] Initial gear angle
      prim.par (          2 ,   3 ,   1 , $P_gear                 ) = $SVG_stage_03.$_normal_module ! [m] Normal module
      prim.par (          2 ,   3 ,   2 , $P_gear                 ) = $SVG_stage_03.$_pressure_angle ! [rad] Normal pressure angle
      prim.par (          2 ,   3 ,   3 , $P_gear                 ) = $SVG_stage_03.$SVG_pinion.$_prof_shift_coeff ! [-] Shift factor
      prim.par (          2 ,   3 ,   4 , $P_gear                 ) = $SVG_stage_03.$_helix_angle ! [rad] Helix angle
      prim.par (          2 ,   3 ,   5 , $P_gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
      prim.par (          2 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   6 ,   2 , $P_gear           ) = $_addendum_coeff        ! [-] Addendum value
      prim.par (          2 ,   3 ,   6 ,   3 , $P_gear           ) = $_dedendum_coeff        ! [-] Dedendum value
      prim.par (          2 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   3 ,   7 ,   2 , $P_gear           ) = 8.00000000000000017E-03 ! [-] Value
      prim.par (          2 ,   3 ,   8 , $P_gear                 ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! [-] Number of teeth
      prim.par (          2 ,   3 ,   9 , $P_gear                 ) = $SVG_stage_03.$_face_width ! [m] Flank width
      prim.par (          2 ,   4 ,   1 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Method
      prim.par (          2 ,   4 ,   1 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
      prim.par (          2 ,   4 ,   1 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
      prim.par (          2 ,   4 ,   1 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
      prim.par (          2 ,   4 ,   1 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
      prim.par (          2 ,   4 ,   1 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
      prim.par (          2 ,   4 ,   1 ,   9 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
      prim.par (          2 ,   4 ,   1 ,  11 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
      prim.par (          2 ,   4 ,   1 ,  12 , $P_gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
      prim.par (          2 ,   4 ,   2 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,   2 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
      prim.par (          2 ,   4 ,   2 ,   3 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
      prim.par (          2 ,   4 ,   2 ,   5 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
      prim.par (          2 ,   4 ,   2 ,   6 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
      prim.par (          2 ,   4 ,   2 ,   7 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
      prim.par (          2 ,   4 ,   2 ,   8 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
      prim.par (          2 ,   4 ,   2 ,  13 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Backlash
      prim.par (          2 ,   4 ,   2 ,  13 ,   1 , $P_gear     ) = 0.00000000000000000E+00 ! [-] Type
      prim.par (          2 ,   4 ,   2 ,  13 ,   2 , $P_gear     ) = 0.00000000000000000E+00 ! [m] Value
      prim.par (          2 ,   4 ,   2 ,  14 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
      prim.par (          2 ,   4 ,   2 ,  15 , $P_gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
      prim.par (          3 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Graphical representation
      prim.par (          3 ,   1 , $P_gear                       ) = $SVG_stage_03.$SVG_pinion.$_diam_bore ! [m] Bore Diameter
      prim.par (          3 ,   2 , $P_gear                       ) = 0.00000000000000000E+00 ! [m] Rim thickness
      prim.par (          3 ,   3 , $P_gear                       ) = $SVG_stage_03.$SVG_pinion.$_num_teeth ! [-] Number of visible teeth
      prim.par (          3 ,   4 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
      prim.par (          3 ,   5 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Tip discretisation
      prim.par (          3 ,   6 , $P_gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
      prim.par (          3 ,   7 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
      prim.par (          3 ,   8 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
      prim.par (          3 ,   9 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Bore discretisation per tooth
      prim.par (          4 ,       $P_gear                       ) = 0.00000000000000000E+00 ! [-] Profile modification
      prim.par (          4 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
      prim.par (          4 ,   2 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   2 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   3 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   4 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   5 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   6 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   7 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   8 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,   9 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  10 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   3 ,  11 ,   1 , $P_gear           ) = 0.00000000000000000E+00 ! [-] Mode
      prim.par (          4 ,   4 ,   1 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
      prim.par (          4 ,   4 ,   2 , $P_gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
      prim.par (          5 ,   1 , $P_gear                       ) = 0.00000000000000000E+00 ! [-] Type
      prim.plot.par (     1 ,       $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 , $P_gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 , $P_gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   2 , $P_gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   3 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   4 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   5 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   1 ,   6 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      prim.plot.par (     1 ,   1 ,   2 ,   1 , $P_gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   bodygroup.end (                  $BG_pinion                    )                           ! $BG_stage_03.$BG_pinion
bodygroup.end (                     $BG_stage_03                  )                           ! $BG_stage_03

!**********************************************************************
! Constraints
!**********************************************************************
constr.from (                       $L_output_shaft               ) = $M_GB_frame_shaft_03    ! From Marker
constr.to (                         $L_output_shaft               ) = $BG_stage_03.$M_shaft_BRF ! To Marker
constr.type (                       $L_output_shaft               ) = 25                      ! Type
constr.f (                1 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! Forces
constr.disabled (                   $L_output_shaft               ) = 0                       ! Disabled
constr.par (              1 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! [-] Lock Rotation in alpha
constr.par (              2 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! [-] Lock Rotation in beta
constr.par (              3 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! [-] Lock Rotation in gamma
constr.par (              4 ,       $L_output_shaft               ) = 1.00000000000000000E+00 ! [-] Lock Transl.  in x  of M_k
constr.par (              5 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in y  of M_k
constr.par (              6 ,       $L_output_shaft               ) = 0.00000000000000000E+00 ! [-] Lock Transl.  in z  of M_k

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_rotor                      ) = 93                      ! Type
force.from (                        $F_rotor                      ) = $M_bed_plate_main_shaft ! From Marker
force.to (                          $F_rotor                      ) = $M_main_shaft_rotor     ! To Marker
force.disabled (                    $F_rotor                      ) = $_calc_static_eq        ! Disabled
force.par (               1 ,       $F_rotor                      ) = $UE_F_x                 ! [-] u-Vector Element force x
force.par (               2 ,       $F_rotor                      ) = $UE_F_y                 ! [-] u-Vector Element force y
force.par (               3 ,       $F_rotor                      ) = $UE_F_z                 ! [-] u-Vector Element force z
force.par (               4 ,       $F_rotor                      ) = $UE_M_x                 ! [-] u-Vector Element torque x
force.par (               5 ,       $F_rotor                      ) = $UE_M_y                 ! [-] u-Vector Element torque y
force.par (               6 ,       $F_rotor                      ) = $UE_M_z                 ! [-] u-Vector Element torque z

force.type (                        $F_INP_A                      ) = 43                      ! Type
force.from (                        $F_INP_A                      ) = $M_bed_plate_INP_A      ! From Marker
force.to (                          $F_INP_A                      ) = $M_main_shaft_INP_A     ! To Marker
force.preld.calc (        1 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.preld.calc (        5 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.preld.calc (        6 ,       $F_INP_A                      ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_INP_A                      ) = -8.86935065241331467E+05 ! [N] Nominal force in x
force.par (               2 ,       $F_INP_A                      ) = 1.81083705398103994E+04 ! [N] Nominal force in y
force.par (               3 ,       $F_INP_A                      ) = 1.14314503662576596E+06 ! [N] Nominal force in z
force.par (               4 ,       $F_INP_A                      ) = -4.15259836883568950E+06 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_INP_A                      ) = 2.01213451548357774E+06 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_INP_A                      ) = 3.38033365398681432E+05 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_x        ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_y        ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_z        ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_alpha    ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_beta     ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_INP_A                      ) = $SVG_INP_A.$_K_gamma    ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_INP_A                      ) = $SVG_INP_A.$_D_x        ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_INP_A                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_INP_A                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_INP_A                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_INP_A                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_INP_A                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_INP_A                      ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_INP_A                      ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_INP_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_INP_A                      ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_INP_A                      ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_INP_A                      ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_INP_A                      ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_INP_A                      ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_INP_A                      ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_INP_A                      ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_INP_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_INP_A                      ) = 1.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_INP_B                      ) = 43                      ! Type
force.from (                        $F_INP_B                      ) = $M_bed_plate_INP_B      ! From Marker
force.to (                          $F_INP_B                      ) = $M_main_shaft_INP_B     ! To Marker
force.preld.calc (        1 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.preld.calc (        2 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.preld.calc (        3 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.preld.calc (        4 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.preld.calc (        5 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.preld.calc (        6 ,       $F_INP_B                      ) = 1                       ! Select Preload cal.
force.par (               1 ,       $F_INP_B                      ) = -8.76870901620979794E+02 ! [N] Nominal force in x
force.par (               2 ,       $F_INP_B                      ) = -2.61222147915200615E+01 ! [N] Nominal force in y
force.par (               3 ,       $F_INP_B                      ) = -5.10473686623448666E+04 ! [N] Nominal force in z
force.par (               4 ,       $F_INP_B                      ) = 4.27748711192760311E-01 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_INP_B                      ) = 1.67543344095244247E+04 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_INP_B                      ) = -9.65483957643850843E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_INP_B                      ) = $SVG_INP_A.$_K_x        ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_INP_B                      ) = $SVG_INP_B.$_K_y        ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_INP_B                      ) = $SVG_INP_B.$_K_z        ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_INP_B                      ) = $SVG_INP_B.$_K_alpha    ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_INP_B                      ) = $SVG_INP_B.$_K_beta     ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_INP_B                      ) = $SVG_INP_B.$_K_gamma    ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_INP_B                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_INP_B                      ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_INP_B                      ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_INP_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_INP_B                      ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_INP_B                      ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_INP_B                      ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_INP_B                      ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_INP_B                      ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_INP_B                      ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_INP_B                      ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_INP_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

force.type (                        $F_PI_generator               ) = 110                     ! Type
force.from (                        $F_PI_generator               ) = $M_bed_plate_generator  ! From Marker
force.to (                          $F_PI_generator               ) = $BG_stage_03.$M_shaft_generator ! To Marker
force.disabled (                    $F_PI_generator               ) = $_calc_static_eq        ! Disabled
force.par (               1 ,       $F_PI_generator               ) = $C_PI                   ! [-] Input Control Element 1
force.par (               2 ,       $F_PI_generator               ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_PI_generator               ) = $C_PI                   ! [-] Input Control Element 2
force.par (               4 ,       $F_PI_generator               ) = 1.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_PI_generator               ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               6 ,       $F_PI_generator               ) = 1.00000000000000000E+00 ! [-] Axis of force
force.par (               7 ,       $F_PI_generator               ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_PI_generator               ) = { -1/2 }                ! [Nm] K: Drive constant L=K*(u1+u2)
force.par (               9 ,       $F_PI_generator               ) = 1.00000000000000000E+00 ! [m⁻¹] P: Drive constant F=P*L

force.type (                        $F_generator                  ) = 110                     ! Type
force.from (                        $F_generator                  ) = $M_bed_plate_generator  ! From Marker
force.to (                          $F_generator                  ) = $BG_stage_03.$M_shaft_generator ! To Marker
force.disabled (                    $F_generator                  ) = $_calc_static_eq        ! Disabled
force.par (               1 ,       $F_generator                  ) = $C_PI                   ! [-] Input Control Element 1
force.par (               2 ,       $F_generator                  ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_generator                  ) = $C_PI                   ! [-] Input Control Element 2
force.par (               4 ,       $F_generator                  ) = 1.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_generator                  ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               6 ,       $F_generator                  ) = 1.00000000000000000E+00 ! [-] Axis of force
force.par (               7 ,       $F_generator                  ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_generator                  ) = { -1/2 }                ! [Nm] K: Drive constant L=K*(u1+u2)
force.par (               9 ,       $F_generator                  ) = 1.00000000000000000E+00 ! [m⁻¹] P: Drive constant F=P*L

forcegroup.begin (                  $FEG_stage_01                 )                           ! $FEG_stage_01
   force.type (                     $F_PLC_A                      ) = 43                      ! Type
   force.from (                     $F_PLC_A                      ) = $M_bed_plate_PLC_A      ! From Marker
   force.to (                       $F_PLC_A                      ) = $BG_stage_01.$M_carrier_PLC_A ! To Marker
   force.preld.calc (     1 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PLC_A                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PLC_A                      ) = -8.76870901620420796E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PLC_A                      ) = -3.09496345837238138E+01 ! [N] Nominal force in y
   force.par (            3 ,       $F_PLC_A                      ) = -5.94245358666253087E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PLC_A                      ) = 4.27748708263537891E-01 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PLC_A                      ) = 1.67543344095233224E+04 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PLC_A                      ) = -9.65483957623841960E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_carrier.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PLC_A                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PLC_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PLC_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PLC_B                      ) = 43                      ! Type
   force.from (                     $F_PLC_B                      ) = $M_bed_plate_PLC_B      ! From Marker
   force.to (                       $F_PLC_B                      ) = $BG_stage_01.$M_carrier_PLC_B ! To Marker
   force.preld.calc (     1 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PLC_B                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PLC_B                      ) = -8.76870901620259019E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PLC_B                      ) = -3.66382660642950242E+01 ! [N] Nominal force in y
   force.par (            3 ,       $F_PLC_B                      ) = -6.92961897009952227E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PLC_B                      ) = 4.27748709005214223E-01 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PLC_B                      ) = 1.67543344095229841E+04 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PLC_B                      ) = -9.65483957627298039E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_carrier.$SVG_B.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PLC_B                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PLC_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PLC_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A1                      ) = 43                      ! Type
   force.from (                     $F_PL_A1                      ) = $BG_stage_01.$M_carrier_pin_A1 ! From Marker
   force.to (                       $F_PL_A1                      ) = $BG_stage_01.$BG_planet_01.$M_pin_A ! To Marker
   force.preld.calc (     1 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PL_A1                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PL_A1                      ) = -1.86323431228009184E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A1                      ) = -5.56175871272416522E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A1                      ) = -1.09604888042128714E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A1                      ) = 1.06334712460237502E-02 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A1                      ) = -1.06693016362157167E-01 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A1                      ) = -5.19856026047791353E-02 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A1                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A1                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B1                      ) = 43                      ! Type
   force.from (                     $F_PL_B1                      ) = $BG_stage_01.$M_carrier_pin_B1 ! From Marker
   force.to (                       $F_PL_B1                      ) = $BG_stage_01.$BG_planet_01.$M_pin_B ! To Marker
   force.preld.calc (     1 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PL_B1                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PL_B1                      ) = -1.86323431228004182E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B1                      ) = -5.59238862715656548E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B1                      ) = -1.09604259411932198E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B1                      ) = 1.06334712460237502E-02 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B1                      ) = -1.06693016362157167E-01 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B1                      ) = -5.19856026047791353E-02 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B1                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B1                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B1                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A2                      ) = 43                      ! Type
   force.from (                     $F_PL_A2                      ) = $BG_stage_01.$M_carrier_pin_A2 ! From Marker
   force.to (                       $F_PL_A2                      ) = $BG_stage_01.$BG_planet_02.$M_pin_A ! To Marker
   force.preld.calc (     1 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PL_A2                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PL_A2                      ) = -1.88727772010704200E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A2                      ) = -5.65959882131645120E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A2                      ) = -1.09606410904678360E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A2                      ) = 1.06334718581767209E-02 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A2                      ) = -1.06693018571670170E-01 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A2                      ) = -5.19856098945062836E-02 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A2                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A2                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B2                      ) = 43                      ! Type
   force.from (                     $F_PL_B2                      ) = $BG_stage_01.$M_carrier_pin_B2 ! From Marker
   force.to (                       $F_PL_B2                      ) = $BG_stage_01.$BG_planet_02.$M_pin_B ! To Marker
   force.preld.calc (     1 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PL_B2                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PL_B2                      ) = -1.88727772010704200E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B2                      ) = -5.69022874010596258E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B2                      ) = -1.09605782274447665E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B2                      ) = 1.06334718581767209E-02 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B2                      ) = -1.06693018571670170E-01 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B2                      ) = -5.19856098945062836E-02 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B2                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B2                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B2                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A3                      ) = 43                      ! Type
   force.from (                     $F_PL_A3                      ) = $BG_stage_01.$M_carrier_pin_A3 ! From Marker
   force.to (                       $F_PL_A3                      ) = $BG_stage_01.$BG_planet_03.$M_pin_A ! To Marker
   force.preld.calc (     1 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     2 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     3 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     4 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     5 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.preld.calc (     6 ,       $F_PL_A3                      ) = 1                       ! Select Preload cal.
   force.par (            1 ,       $F_PL_A3                      ) = -3.72240046399740265E+02 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A3                      ) = -1.09585415616746111E+01 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A3                      ) = -2.19212822818600471E+04 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A3                      ) = 2.12669434833814980E-02 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A3                      ) = 6.45777785475811379E+03 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A3                      ) = -3.34138112060918235E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A3                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A3                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B3                      ) = 43                      ! Type
   force.from (                     $F_PL_B3                      ) = $BG_stage_01.$M_carrier_pin_B3 ! From Marker
   force.to (                       $F_PL_B3                      ) = $BG_stage_01.$BG_planet_03.$M_pin_B ! To Marker
   force.par (            1 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B3                      ) = $SVG_stage_01.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B3                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B3                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   forcegroup.begin (               $FEG_mesh                     )                           ! $FEG_stage_01.$FEG_mesh
      force.type (                  $F_ring_planet_01             ) = 225                     ! Type
      force.from (                  $F_ring_planet_01             ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_01             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_01             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_01             ) = $BG_stage_01.$BG_planet_01.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_01             ) = $BG_stage_01.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_01             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_01             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_01             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_01             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_01             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_01             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_01             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_01             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_01             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_01       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_01 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_02             ) = 225                     ! Type
      force.from (                  $F_ring_planet_02             ) = $BG_stage_01.$BG_planet_02.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_02             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_02             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_02             ) = $BG_stage_01.$BG_planet_02.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_02             ) = $BG_stage_01.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_02             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_02             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_02             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_02             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_02             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_02             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_02             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_02             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_02             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_02       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_02 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_03             ) = 225                     ! Type
      force.from (                  $F_ring_planet_03             ) = $BG_stage_01.$BG_planet_03.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_03             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_03             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_03             ) = $BG_stage_01.$BG_planet_03.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_03             ) = $BG_stage_01.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_03             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_03             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_03             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_03             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_03             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_03             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_03             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_03             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_03             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_03       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_03 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_01              ) = 225                     ! Type
      force.from (                  $F_sun_planet_01              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_01              ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_01              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_01              ) = $BG_stage_01.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_01              ) = $BG_stage_01.$BG_planet_01.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_01              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_01              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_01              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_01              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_01              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_01              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_01              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_01              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_01              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_01        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_01  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_02              ) = 225                     ! Type
      force.from (                  $F_sun_planet_02              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_02              ) = $BG_stage_01.$BG_planet_02.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_02              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_02              ) = $BG_stage_01.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_02              ) = $BG_stage_01.$BG_planet_02.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_02              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_02              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_02              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_02              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_02              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_02              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_02              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_02              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_02              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_02        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_02  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_03              ) = 225                     ! Type
      force.from (                  $F_sun_planet_03              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_03              ) = $BG_stage_01.$BG_planet_03.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_03              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_03              ) = $BG_stage_01.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_03              ) = $BG_stage_01.$BG_planet_03.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_03              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_03              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_03              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_03              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_03              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_03              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_03              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_03              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_03              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_03        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_03  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   forcegroup.end (                 $FEG_mesh                     )                           ! $FEG_stage_01.$FEG_mesh
   forcegroup.begin (               $FEG_mesh_linear              )                           ! $FEG_stage_01.$FEG_mesh_linear
      force.type (                  $F_ring_planet_01             ) = 204                     ! Type
      force.from (                  $F_ring_planet_01             ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_01             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_01             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_01             ) = $BG_stage_01.$BG_planet_01.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_01             ) = $BG_stage_01.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_01             ) = $SVG_stage_01.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_01             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_01       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_01 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_02             ) = 204                     ! Type
      force.from (                  $F_ring_planet_02             ) = $BG_stage_01.$BG_planet_02.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_02             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_02             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_02             ) = $BG_stage_01.$BG_planet_02.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_02             ) = $BG_stage_01.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_02             ) = $SVG_stage_01.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_02             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_02       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_02 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_03             ) = 204                     ! Type
      force.from (                  $F_ring_planet_03             ) = $BG_stage_01.$BG_planet_03.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_03             ) = $BG_stage_01.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_03             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_03             ) = $BG_stage_01.$BG_planet_03.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_03             ) = $BG_stage_01.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_03             ) = $SVG_stage_01.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_03             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_03       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_03 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_01              ) = 204                     ! Type
      force.from (                  $F_sun_planet_01              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_01              ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_01              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_01              ) = $BG_stage_01.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_01              ) = $BG_stage_01.$BG_planet_01.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_01              ) = $SVG_stage_01.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_01              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_01        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_01  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_02              ) = 204                     ! Type
      force.from (                  $F_sun_planet_02              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_02              ) = $BG_stage_01.$BG_planet_02.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_02              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_02              ) = $BG_stage_01.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_02              ) = $BG_stage_01.$BG_planet_02.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_02              ) = $SVG_stage_01.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_02              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_02        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_02  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_03              ) = 204                     ! Type
      force.from (                  $F_sun_planet_03              ) = $BG_stage_01.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_03              ) = $BG_stage_01.$BG_planet_03.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_03              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_03              ) = $BG_stage_01.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_03              ) = $BG_stage_01.$BG_planet_03.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_03              ) = $SVG_stage_01.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_03              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_03        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_03  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   forcegroup.end (                 $FEG_mesh_linear              )                           ! $FEG_stage_01.$FEG_mesh_linear
forcegroup.end (                    $FEG_stage_01                 )                           ! $FEG_stage_01

forcegroup.begin (                  $FEG_stage_02                 )                           ! $FEG_stage_02
   force.type (                     $F_IMS_PLC_A                  ) = 43                      ! Type
   force.from (                     $F_IMS_PLC_A                  ) = $M_bed_plate_IMS_PLC_A  ! From Marker
   force.to (                       $F_IMS_PLC_A                  ) = $BG_stage_02.$M_carrier_IMS_PLC_A ! To Marker
   force.par (            1 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_PLC_A                  ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_PLC_A                  ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_IMS_PLC_B                  ) = 43                      ! Type
   force.from (                     $F_IMS_PLC_B                  ) = $M_bed_plate_IMS_PLC_B  ! From Marker
   force.to (                       $F_IMS_PLC_B                  ) = $BG_stage_02.$M_carrier_IMS_PLC_B ! To Marker
   force.par (            1 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_carrier.$SVG_B.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_PLC_B                  ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_PLC_B                  ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A1                      ) = 43                      ! Type
   force.from (                     $F_PL_A1                      ) = $BG_stage_02.$M_carrier_pin_A1 ! From Marker
   force.to (                       $F_PL_A1                      ) = $BG_stage_02.$BG_planet_01.$M_pin_A ! To Marker
   force.par (            1 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A1                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A1                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A1                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A1                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A1                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A1                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A1                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A1                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B1                      ) = 43                      ! Type
   force.from (                     $F_PL_B1                      ) = $BG_stage_02.$M_carrier_pin_B1 ! From Marker
   force.to (                       $F_PL_B1                      ) = $BG_stage_02.$BG_planet_01.$M_pin_B ! To Marker
   force.par (            1 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B1                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B1                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B1                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B1                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B1                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B1                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B1                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B1                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B1                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A2                      ) = 43                      ! Type
   force.from (                     $F_PL_A2                      ) = $BG_stage_02.$M_carrier_pin_A2 ! From Marker
   force.to (                       $F_PL_A2                      ) = $BG_stage_02.$BG_planet_02.$M_pin_A ! To Marker
   force.par (            1 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A2                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A2                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A2                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A2                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A2                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A2                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A2                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A2                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B2                      ) = 43                      ! Type
   force.from (                     $F_PL_B2                      ) = $BG_stage_02.$M_carrier_pin_B2 ! From Marker
   force.to (                       $F_PL_B2                      ) = $BG_stage_02.$BG_planet_02.$M_pin_B ! To Marker
   force.par (            1 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B2                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B2                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B2                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B2                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B2                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B2                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B2                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B2                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B2                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_A3                      ) = 43                      ! Type
   force.from (                     $F_PL_A3                      ) = $BG_stage_02.$M_carrier_pin_A3 ! From Marker
   force.to (                       $F_PL_A3                      ) = $BG_stage_02.$BG_planet_03.$M_pin_A ! To Marker
   force.par (            1 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_A3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_A3                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_A3                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_A3                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_A3                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_A3                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_A3                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_A3                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_A3                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_PL_B3                      ) = 43                      ! Type
   force.from (                     $F_PL_B3                      ) = $BG_stage_02.$M_carrier_pin_B3 ! From Marker
   force.to (                       $F_PL_B3                      ) = $BG_stage_02.$BG_planet_03.$M_pin_B ! To Marker
   force.par (            1 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL_B3                      ) = $SVG_stage_02.$SVG_planet.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL_B3                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL_B3                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL_B3                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL_B3                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL_B3                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL_B3                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL_B3                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL_B3                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   forcegroup.begin (               $FEG_mesh                     )                           ! $FEG_stage_02.$FEG_mesh
      force.type (                  $F_ring_planet_01             ) = 225                     ! Type
      force.from (                  $F_ring_planet_01             ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_01             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_01             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_01             ) = $BG_stage_02.$BG_planet_01.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_01             ) = $BG_stage_02.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_01             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_01             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_01             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_01             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_01             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_01             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_01             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_01             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_01             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_01       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_01 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_02             ) = 225                     ! Type
      force.from (                  $F_ring_planet_02             ) = $BG_stage_02.$BG_planet_02.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_02             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_02             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_02             ) = $BG_stage_02.$BG_planet_02.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_02             ) = $BG_stage_02.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_02             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_02             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_02             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_02             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_02             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_02             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_02             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_02             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_02             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_02       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_02 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_03             ) = 225                     ! Type
      force.from (                  $F_ring_planet_03             ) = $BG_stage_02.$BG_planet_03.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_03             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_03             ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_ring_planet_03             ) = $BG_stage_02.$BG_planet_02.$P_gear ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_ring_planet_03             ) = $BG_stage_02.$P_ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_ring_planet_03             ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_ring_planet_03             ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_ring_planet_03             ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_ring_planet_03             ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_ring_planet_03             ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_ring_planet_03             ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_ring_planet_03             ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_ring_planet_03             ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_ring_planet_03             ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_03       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_03 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_01              ) = 225                     ! Type
      force.from (                  $F_sun_planet_01              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_01              ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_01              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_01              ) = $BG_stage_02.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_01              ) = $BG_stage_02.$BG_planet_01.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_01              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_01              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_01              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_01              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_01              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_01              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_01              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_01              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_01              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_01        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_01  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_02              ) = 225                     ! Type
      force.from (                  $F_sun_planet_02              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_02              ) = $BG_stage_02.$BG_planet_02.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_02              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_02              ) = $BG_stage_02.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_02              ) = $BG_stage_02.$BG_planet_02.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_02              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_02              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_02              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_02              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_02              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_02              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_02              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_02              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_02              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_02        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_02  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_03              ) = 225                     ! Type
      force.from (                  $F_sun_planet_03              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_03              ) = $BG_stage_02.$BG_planet_03.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_03              ) = $SVG_mesh_stiffness.$_advanced ! Disabled
      force.par (         1 ,       $F_sun_planet_03              ) = $BG_stage_02.$P_sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_sun_planet_03              ) = $BG_stage_02.$BG_planet_03.$P_gear ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_sun_planet_03              ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_sun_planet_03              ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_sun_planet_03              ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
      force.par (        13 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
      force.par (        14 ,       $F_sun_planet_03              ) = $Mat_steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_sun_planet_03              ) = $Mat_steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_sun_planet_03              ) = $_damping_coeff         ! [m] Full damping starts at
      force.par (        31 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_sun_planet_03              ) = $_regularization_vel    ! [m/s] Regularization velocity
      force.par (        44 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_sun_planet_03              ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_sun_planet_03              ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_03        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_03  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   forcegroup.end (                 $FEG_mesh                     )                           ! $FEG_stage_02.$FEG_mesh
   forcegroup.begin (               $FEG_mesh_linear              )                           ! $FEG_stage_02.$FEG_mesh_linear
      force.type (                  $F_ring_planet_01             ) = 204                     ! Type
      force.from (                  $F_ring_planet_01             ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_01             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_01             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_01             ) = $BG_stage_02.$BG_planet_01.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_01             ) = $BG_stage_02.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_01             ) = $SVG_stage_02.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_01             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_01             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_01             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_01             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_01       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_01 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_01 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_02             ) = 204                     ! Type
      force.from (                  $F_ring_planet_02             ) = $BG_stage_02.$BG_planet_02.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_02             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_02             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_02             ) = $BG_stage_02.$BG_planet_02.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_02             ) = $BG_stage_02.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_02             ) = $SVG_stage_02.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_02             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_02             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_02             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_02             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_02       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_02 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_02 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_ring_planet_03             ) = 204                     ! Type
      force.from (                  $F_ring_planet_03             ) = $BG_stage_02.$BG_planet_03.$M_gear_BRF ! From Marker
      force.to (                    $F_ring_planet_03             ) = $BG_stage_02.$M_ring_BRF ! To Marker
      force.disabled (              $F_ring_planet_03             ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_ring_planet_03             ) = $BG_stage_02.$BG_planet_03.$P_gear ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_ring_planet_03             ) = $BG_stage_02.$P_ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_ring_planet_03             ) = $SVG_stage_02.$_ring_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_ring_planet_03             ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_ring_planet_03             ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_ring_planet_03             ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_ring_planet_03             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_ring_planet_03       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_ring_planet_03 ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_ring_planet_03 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_01              ) = 204                     ! Type
      force.from (                  $F_sun_planet_01              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_01              ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_01              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_01              ) = $BG_stage_02.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_01              ) = $BG_stage_02.$BG_planet_01.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_01              ) = $SVG_stage_02.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_01              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_01              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_01              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_01              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_01        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_01  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_01  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_02              ) = 204                     ! Type
      force.from (                  $F_sun_planet_02              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_02              ) = $BG_stage_02.$BG_planet_02.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_02              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_02              ) = $BG_stage_02.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_02              ) = $BG_stage_02.$BG_planet_02.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_02              ) = $SVG_stage_02.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_02              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_02              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_02              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_02              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_02        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_02  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_02  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_sun_planet_03              ) = 204                     ! Type
      force.from (                  $F_sun_planet_03              ) = $BG_stage_02.$M_sun_BRF ! From Marker
      force.to (                    $F_sun_planet_03              ) = $BG_stage_02.$BG_planet_03.$M_gear_BRF ! To Marker
      force.disabled (              $F_sun_planet_03              ) = $SVG_mesh_stiffness.$_linear ! Disabled
      force.par (         2 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_sun_planet_03              ) = $BG_stage_02.$P_sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_sun_planet_03              ) = $BG_stage_02.$BG_planet_03.$P_gear ! [-] Geometry Gear 2
      force.par (        31 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_sun_planet_03              ) = $SVG_stage_02.$_sun_planet_stiffness ! [N/m] Stiffness constant
      force.par (        35 ,       $F_sun_planet_03              ) = $_tooth_damping         ! [Ns/m] Damping constant
      force.par (        36 ,       $F_sun_planet_03              ) = $_damping_coeff         ! [m] Damping transition depth
      force.par (        40 ,       $F_sun_planet_03              ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_sun_planet_03              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_sun_planet_03        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_sun_planet_03  ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_sun_planet_03  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   forcegroup.end (                 $FEG_mesh_linear              )                           ! $FEG_stage_02.$FEG_mesh_linear
forcegroup.end (                    $FEG_stage_02                 )                           ! $FEG_stage_02

forcegroup.begin (                  $FEG_stage_03                 )                           ! $FEG_stage_03
   force.type (                     $F_IMS_A                      ) = 43                      ! Type
   force.from (                     $F_IMS_A                      ) = $M_GB_frame_wheel_A     ! From Marker
   force.to (                       $F_IMS_A                      ) = $BG_stage_03.$BG_wheel.$M_pin_A ! To Marker
   force.par (            1 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_wheel.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_A                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_IMS_B                      ) = 43                      ! Type
   force.from (                     $F_IMS_B                      ) = $M_GB_frame_wheel_B     ! From Marker
   force.to (                       $F_IMS_B                      ) = $BG_stage_03.$BG_wheel.$M_pin_B ! To Marker
   force.par (            1 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_wheel.$SVG_B.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_B                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_IMS_C                      ) = 43                      ! Type
   force.from (                     $F_IMS_C                      ) = $M_GB_frame_wheel_C     ! From Marker
   force.to (                       $F_IMS_C                      ) = $BG_stage_03.$BG_wheel.$M_pin_C ! To Marker
   force.par (            1 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_wheel.$SVG_C.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_C                      ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_C                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_C                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_HS_A                       ) = 43                      ! Type
   force.from (                     $F_HS_A                       ) = $M_GB_frame_pinion_A    ! From Marker
   force.to (                       $F_HS_A                       ) = $BG_stage_03.$BG_pinion.$M_pin_A ! To Marker
   force.par (            1 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_A                       ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_A                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_A                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_HS_B                       ) = 43                      ! Type
   force.from (                     $F_HS_B                       ) = $M_GB_frame_pinion_B    ! From Marker
   force.to (                       $F_HS_B                       ) = $BG_stage_03.$BG_pinion.$M_pin_B ! To Marker
   force.par (            1 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_pinion.$SVG_B.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_B                       ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_B                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_B                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_HS_C                       ) = 43                      ! Type
   force.from (                     $F_HS_C                       ) = $M_GB_frame_pinion_A    ! From Marker
   force.to (                       $F_HS_C                       ) = $BG_stage_03.$BG_pinion.$M_pin_A ! To Marker
   force.par (            1 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_alpha ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_beta ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_pinion.$SVG_A.$_K_gamma ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_alpha ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_beta ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_C                       ) = $SVG_bearing_damping.$_D_gamma ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_C                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_C                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker

   force.type (                     $F_pinion_wheel               ) = 225                     ! Type
   force.from (                     $F_pinion_wheel               ) = $BG_stage_03.$BG_pinion.$M_gear_BRF ! From Marker
   force.to (                       $F_pinion_wheel               ) = $BG_stage_03.$BG_wheel.$M_gear_BRF ! To Marker
   force.disabled (                 $F_pinion_wheel               ) = $SVG_mesh_stiffness.$_advanced ! Disabled
   force.par (            1 ,       $F_pinion_wheel               ) = $BG_stage_03.$BG_pinion.$P_gear ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_pinion_wheel               ) = $BG_stage_03.$BG_wheel.$P_gear ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Basic Output Values
   force.par (            4 ,       $F_pinion_wheel               ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
   force.par (            6 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Damping model
   force.par (            7 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Friction model
   force.par (            8 ,       $F_pinion_wheel               ) = 5.00000000000000000E+00 ! [-] Number of slices
   force.par (           10 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Gear blank factor
   force.par (           11 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
   force.par (           12 ,       $F_pinion_wheel               ) = $_tooth_stiff_ratio     ! [-] Teeth stiffness ratio
   force.par (           13 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Premature/Posterior meshing
   force.par (           14 ,       $F_pinion_wheel               ) = $Mat_steel              ! [-] Material (Gear 1)
   force.par (           15 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_pinion_wheel               ) = $Mat_steel              ! [-] Material (Gear 2)
   force.par (           18 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Poisson's ratio (Gear 2)
   force.par (           20 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
   force.par (           21 ,       $F_pinion_wheel               ) = $_tooth_damping         ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_pinion_wheel               ) = $_tooth_damping         ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_pinion_wheel               ) = $_damping_coeff         ! [m] Full damping starts at
   force.par (           31 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Friction coefficient
   force.par (           32 ,       $F_pinion_wheel               ) = $_regularization_vel    ! [m/s] Regularization velocity
   force.par (           44 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_pinion_wheel               ) = null                    ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_pinion_wheel               ) = null                    ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
   force.par (           53 ,       $F_pinion_wheel               ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
   force.plot.par (       1 ,       $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 , $F_pinion_wheel               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 , $F_pinion_wheel         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   1 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   2 , $F_pinion_wheel   ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   3 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   4 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   5 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   6 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   7 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   8 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   2 ,   1 , $F_pinion_wheel   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   force.type (                     $F_pinion_wheel_linear        ) = 204                     ! Type
   force.from (                     $F_pinion_wheel_linear        ) = $BG_stage_03.$BG_pinion.$M_gear_BRF ! From Marker
   force.to (                       $F_pinion_wheel_linear        ) = $BG_stage_03.$BG_wheel.$M_gear_BRF ! To Marker
   force.disabled (                 $F_pinion_wheel_linear        ) = $SVG_mesh_stiffness.$_linear ! Disabled
   force.par (            2 ,       $F_pinion_wheel_linear        ) = 0.00000000000000000E+00 ! [-] Gear type
   force.par (            3 ,       $F_pinion_wheel_linear        ) = 1.00000000000000000E+00 ! [-] Modeling approach
   force.par (            5 ,       $F_pinion_wheel_linear        ) = 1.00000000000000000E+00 ! [-] Geometry input mode
   force.par (            6 ,       $F_pinion_wheel_linear        ) = $BG_stage_03.$BG_pinion.$P_gear ! [-] Geometry Gear 1
   force.par (            7 ,       $F_pinion_wheel_linear        ) = $BG_stage_03.$BG_wheel.$P_gear ! [-] Geometry Gear 2
   force.par (           31 ,       $F_pinion_wheel_linear        ) = 0.00000000000000000E+00 ! [-] Stiffness method
   force.par (           32 ,       $F_pinion_wheel_linear        ) = $SVG_stage_03.$_mesh_stiffness ! [N/m] Stiffness constant
   force.par (           35 ,       $F_pinion_wheel_linear        ) = $_tooth_damping         ! [Ns/m] Damping constant
   force.par (           36 ,       $F_pinion_wheel_linear        ) = $_damping_coeff         ! [m] Damping transition depth
   force.par (           40 ,       $F_pinion_wheel_linear        ) = 0.00000000000000000E+00 ! [-] Power loss input mode
   force.plot.par (       1 ,       $F_pinion_wheel_linear        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 , $F_pinion_wheel_linear        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 , $F_pinion_wheel_linear  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   1 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   2 , $F_pinion_wheel_linear) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   3 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   4 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   5 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   6 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   7 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   8 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   2 ,   1 , $F_pinion_wheel_linear) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

forcegroup.end (                    $FEG_stage_03                 )                           ! $FEG_stage_03

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_PI                         ) = 129                     ! Type
control.st.dyn (          1 ,       $C_PI                         ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_PI                         ) = 0                       ! Equilibrium
control.disabled (                  $C_PI                         ) = 0                       ! Disabled
control.txt (                       $C_PI                         ) = 'Based on SIMPACK Assistant section G.5.10.129 PIDT1 Controller' ! Comment
control.par (             7 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_PI                         ) = $C_diff_speed           ! [-] Input Element ch. 1
control.par (             9 ,       $C_PI                         ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_PI                         ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_PI                         ) = 2.20000000000000000E+03 ! [-] Proportional gain factor
control.par (            16 ,       $C_PI                         ) = 1.00000000000000000E+01 ! [s] Integral time constant
control.par (            22 ,       $C_PI                         ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_diff_speed                 ) = 143                     ! Type
control.par (             1 ,       $C_diff_speed                 ) = $C_output_speed         ! [-] Input Element ch. 1
control.par (             2 ,       $C_diff_speed                 ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (             3 ,       $C_diff_speed                 ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_diff_speed                 ) = $C_ref_speed            ! [-] Input Element ch. 2
control.par (             5 ,       $C_diff_speed                 ) = 1.00000000000000000E+00 ! [-] Output Value ch. 2
control.par (             6 ,       $C_diff_speed                 ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_diff_speed                 ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_diff_speed                 ) = 1.00000000000000000E+00 ! [-] Function parameter P
control.par (             9 ,       $C_diff_speed                 ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_diff_speed                 ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

control.type (                      $C_ref_speed                  ) = 170                     ! Type
control.disabled (                  $C_ref_speed                  ) = 0                       ! Disabled
control.par (             1 ,       $C_ref_speed                  ) = 1.00000000000000000E+00 ! [-] Number of constant values
control.par (            10 ,       $C_ref_speed                  ) = { dimless(97*$_rated_speed) } ! [-] Constant value 1

control.type (                      $C_output_speed               ) = 160                     ! Type
control.disabled (                  $C_output_speed               ) = 0                       ! Disabled
control.par (             1 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_output_speed               ) = $BG_stage_03.$J_shaft   ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_output_speed               ) = 1.00000000000000000E+00 ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_output_speed               ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_output_speed               ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

!**********************************************************************
! Input Functions
!**********************************************************************
ifctngroup.begin (                  $IFG_bed_plate                )                           ! $IFG_bed_plate
   ifctn.file (                     $I_x                          ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_X.if2' ! File or URI
   ifctn.scal.z (                   $I_x                          ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_x                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_y                          ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Y.if2' ! File or URI
   ifctn.scal.z (                   $I_y                          ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_y                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_z                          ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Z.if2' ! File or URI
   ifctn.scal.z (                   $I_z                          ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_z                          ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z                          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z                          ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z                          ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z                    ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_alpha                      ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_X_rot.if2' ! File or URI
   ifctn.scal.z (                   $I_alpha                      ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_alpha                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_beta                       ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Y_rot.if2' ! File or URI
   ifctn.scal.z (                   $I_beta                       ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_beta                       ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta                       ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta                       ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_gamma                      ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Z_rot.if2' ! File or URI
   ifctn.scal.z (                   $I_gamma                      ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_gamma                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_x_dot                      ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_XD.if2' ! File or URI
   ifctn.scal.z (                   $I_x_dot                      ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_x_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_y_dot                      ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_YD.if2' ! File or URI
   ifctn.scal.z (                   $I_y_dot                      ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_y_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_z_dot                      ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_ZD.if2' ! File or URI
   ifctn.scal.z (                   $I_z_dot                      ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_z_dot                      ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z_dot                      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z_dot                      ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z_dot                      ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z_dot                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z_dot                ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_alpha_dot                  ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_X_rotD.if2' ! File or URI
   ifctn.scal.z (                   $I_alpha_dot                  ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_alpha_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_beta_dot                   ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Y_rotD.if2' ! File or URI
   ifctn.scal.z (                   $I_beta_dot                   ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_beta_dot                   ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta_dot                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta_dot                   ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta_dot                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta_dot             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta_dot             ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_gamma_dot                  ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Z_rotD.if2' ! File or URI
   ifctn.scal.z (                   $I_gamma_dot                  ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_gamma_dot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma_dot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma_dot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma_dot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma_dot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma_dot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_x_ddot                     ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_XDD.if2' ! File or URI
   ifctn.scal.z (                   $I_x_ddot                     ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_x_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_x_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_x_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_x_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_x_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_x_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_y_ddot                     ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_YDD.if2' ! File or URI
   ifctn.scal.z (                   $I_y_ddot                     ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_y_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_y_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_y_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_y_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_y_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_y_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_z_ddot                     ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_ZDD.if2' ! File or URI
   ifctn.scal.z (                   $I_z_ddot                     ) = { $_gamma_x*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_z_ddot                     ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_z_ddot                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_z_ddot                     ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_z_ddot                     ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_z_ddot               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_z_ddot               ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_alpha_ddot                 ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_X_rotDD.if2' ! File or URI
   ifctn.scal.z (                   $I_alpha_ddot                 ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_alpha_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_alpha_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_alpha_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_alpha_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_alpha_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_alpha_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_beta_ddot                  ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_Y_rotDD.if2' ! File or URI
   ifctn.scal.z (                   $I_beta_ddot                  ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_beta_ddot                  ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_beta_ddot                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_beta_ddot                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_beta_ddot                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_beta_ddot            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_beta_ddot            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_gamma_ddot                 ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/EC4_s01_ZDD.if2' ! File or URI
   ifctn.scal.z (                   $I_gamma_ddot                 ) = { 1*(1 - $_calc_static_eq) } ! Scaling factor
   ifctn.range.handling (           $I_gamma_ddot                 ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_gamma_ddot                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_gamma_ddot                 ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_gamma_ddot                 ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_gamma_ddot           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_gamma_ddot           ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctngroup.end (                    $IFG_bed_plate                )                           ! $IFG_bed_plate

ifctngroup.begin (                  $IFG_rotor                    )                           ! $IFG_rotor
   ifctn.file (                     $I_F_x                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/Fx.if2' ! File or URI
   ifctn.scal.z (                   $I_F_x                        ) = $_gamma_load            ! Scaling factor
   ifctn.range.handling (           $I_F_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_F_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_F_y                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/Fy.if2' ! File or URI
   ifctn.scal.z (                   $I_F_y                        ) = $_gamma_load            ! Scaling factor
   ifctn.range.handling (           $I_F_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_F_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_F_z                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/Fz.if2' ! File or URI
   ifctn.scal.z (                   $I_F_z                        ) = $_gamma_load            ! Scaling factor
   ifctn.range.handling (           $I_F_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_F_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_M_x                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/Mx.if2' ! File or URI
   ifctn.scal.z (                   $I_M_x                        ) = { $_gamma_load*$_gamma_x } ! Scaling factor
   ifctn.range.handling (           $I_M_x                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_M_x                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_M_y                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/My.if2' ! File or URI
   ifctn.scal.z (                   $I_M_y                        ) = { $_gamma_load*$_gamma_x } ! Scaling factor
   ifctn.range.handling (           $I_M_y                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_M_y                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

   ifctn.file (                     $I_M_z                        ) = '//home.ansatt.ntnu.no/geraldod/Documents/coding/Drivetrain_2/@NREL_5MW/input_functions/Mz.if2' ! File or URI
   ifctn.scal.z (                   $I_M_z                        ) = { $_gamma_load*$_gamma_x } ! Scaling factor
   ifctn.range.handling (           $I_M_z                        ) = 0                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
   ifctn.plot.par (       1 ,       $I_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   1 , $I_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   2 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   3 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   4 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   5 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   6 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   7 , $I_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   8 ,   1 , $I_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,   9 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
   ifctn.plot.par (       1 ,  10 ,   1 , $I_M_z                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctngroup.end (                    $IFG_rotor                    )                           ! $IFG_rotor

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_F_x                        ) = 2                       ! Type
excit.disabled (                    $E_F_x                        ) = { 0 }                   ! Disabled
excit.par (               1 ,       $E_F_x                        ) = $IFG_rotor.$I_F_x       ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_y                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_y                        ) = $IFG_rotor.$I_F_y       ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_F_z                        ) = 2                       ! Type
excit.par (               1 ,       $E_F_z                        ) = $IFG_rotor.$I_F_z       ! [-] Input Function f(t)
excit.par (               2 ,       $E_F_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_F_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_F_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_F_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_F_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_F_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_F_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_F_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_x                        ) = 2                       ! Type
excit.disabled (                    $E_M_x                        ) = { 0 }                   ! Disabled
excit.par (               1 ,       $E_M_x                        ) = $IFG_rotor.$I_M_x       ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_x                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_x                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_x                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_x                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_x                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_x                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_x                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_x                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_y                        ) = 2                       ! Type
excit.disabled (                    $E_M_y                        ) = { 0 }                   ! Disabled
excit.par (               1 ,       $E_M_y                        ) = $IFG_rotor.$I_M_y       ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_y                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_y                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_y                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_y                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_y                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_y                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_y                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_y                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_M_z                        ) = 2                       ! Type
excit.disabled (                    $E_M_z                        ) = { 0 }                   ! Disabled
excit.par (               1 ,       $E_M_z                        ) = $IFG_rotor.$I_M_z       ! [-] Input Function f(t)
excit.par (               2 ,       $E_M_z                        ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_M_z                        ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_M_z                        ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Scaling factor c
excit.plot.par (          1 ,       $E_M_z                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_M_z                        ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_M_z                        ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_M_z                        ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_M_z                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

excit.type (                        $E_generator                  ) = 1                       ! Type
excit.par (               1 ,       $E_generator                  ) = 0.00000000000000000E+00 ! [-] Offset f0
excit.par (               2 ,       $E_generator                  ) = 0.00000000000000000E+00 ! [-] Amplitude A
excit.par (               3 ,       $E_generator                  ) = 0.00000000000000000E+00 ! [rad/s] Angular frequency omega
excit.par (               4 ,       $E_generator                  ) = 0.00000000000000000E+00 ! [rad] Phase phi
excit.par (               5 ,       $E_generator                  ) = 0.00000000000000000E+00 ! [-] Exponent n
excit.plot.par (          1 ,       $E_generator                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_generator                  ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_generator                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_generator                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_generator                  ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_generator                  ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_generator            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_generator            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_generator            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_F_x                       ) = 1                       ! Type
uele.excit (                        $UE_F_x                       ) = $E_F_x                  ! Referenced Excitation

uele.type (                         $UE_F_y                       ) = 1                       ! Type
uele.excit (                        $UE_F_y                       ) = $E_F_y                  ! Referenced Excitation

uele.type (                         $UE_F_z                       ) = 1                       ! Type
uele.excit (                        $UE_F_z                       ) = $E_F_z                  ! Referenced Excitation

uele.type (                         $UE_M_x                       ) = 1                       ! Type
uele.excit (                        $UE_M_x                       ) = $E_M_x                  ! Referenced Excitation

uele.type (                         $UE_M_y                       ) = 1                       ! Type
uele.excit (                        $UE_M_y                       ) = $E_M_y                  ! Referenced Excitation

uele.type (                         $UE_M_z                       ) = 1                       ! Type
uele.excit (                        $UE_M_z                       ) = $E_M_z                  ! Referenced Excitation

uele.type (                         $UE_generator                 ) = 1                       ! Type
uele.excit (                        $UE_generator                 ) = $E_generator            ! Referenced Excitation
uele.index (                        $UE_generator                 ) = 0                       ! Index

!**********************************************************************
! Y Output
!**********************************************************************
youtgroup.begin (                   $YOG_INP_A                    )                           ! $YOG_INP_A
   yout.type (                      $Y_x                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_x                          ) = $F_INP_A                ! [-] Force Element
   yout.par (             2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

   yout.type (                      $Y_y                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_y                          ) = $F_INP_A                ! [-] Force Element
   yout.par (             2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

   yout.type (                      $Y_z                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_z                          ) = $F_INP_A                ! [-] Force Element
   yout.par (             2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

youtgroup.end (                     $YOG_INP_A                    )                           ! $YOG_INP_A

youtgroup.begin (                   $YOG_INP_B                    )                           ! $YOG_INP_B
   yout.type (                      $Y_x                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_x                          ) = $F_INP_B                ! [-] Force Element
   yout.par (             2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

   yout.type (                      $Y_y                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_y                          ) = $F_INP_B                ! [-] Force Element
   yout.par (             2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

   yout.type (                      $Y_z                          ) = 10                      ! Type
   yout.par (             1 ,       $Y_z                          ) = $F_INP_B                ! [-] Force Element
   yout.par (             2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

youtgroup.end (                     $YOG_INP_B                    )                           ! $YOG_INP_B

youtgroup.begin (                   $YOG_stage_01                 )                           ! $YOG_stage_01
   youtgroup.begin (                $G_PLC_A                      )                           ! $YOG_stage_01.$G_PLC_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_01.$F_PLC_A  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_01.$F_PLC_A  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_01.$F_PLC_A  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_PLC_A                      )                           ! $YOG_stage_01.$G_PLC_A
   youtgroup.begin (                $G_PLC_B                      )                           ! $YOG_stage_01.$G_PLC_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_01.$F_PLC_B  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_01.$F_PLC_B  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_01.$F_PLC_B  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_PLC_B                      )                           ! $YOG_stage_01.$G_PLC_B
   youtgroup.begin (                $G_PL_A                       )                           ! $YOG_stage_01.$G_PL_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_01.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_01.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_01.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_PL_A                       )                           ! $YOG_stage_01.$G_PL_A
   youtgroup.begin (                $G_PL_B                       )                           ! $YOG_stage_01.$G_PL_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_01.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_01.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_01.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_PL_B                       )                           ! $YOG_stage_01.$G_PL_B
youtgroup.end (                     $YOG_stage_01                 )                           ! $YOG_stage_01

youtgroup.begin (                   $YOG_stage_02                 )                           ! $YOG_stage_02
   youtgroup.begin (                $G_IMS_PLC_A                  )                           ! $YOG_stage_02.$G_IMS_PLC_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_02.$F_IMS_PLC_A ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_02.$F_IMS_PLC_A ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_02.$F_IMS_PLC_A ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_PLC_A                  )                           ! $YOG_stage_02.$G_IMS_PLC_A
   youtgroup.begin (                $G_IMS_PLC_B                  )                           ! $YOG_stage_02.$G_IMS_PLC_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_02.$F_IMS_PLC_B ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_02.$F_IMS_PLC_B ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_02.$F_IMS_PLC_B ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_PLC_B                  )                           ! $YOG_stage_02.$G_IMS_PLC_B
   youtgroup.begin (                $G_IMS_PL_A                   )                           ! $YOG_stage_02.$G_IMS_PL_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_02.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_02.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_02.$F_PL_A1  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_PL_A                   )                           ! $YOG_stage_02.$G_IMS_PL_A
   youtgroup.begin (                $G_IMS_PL_B                   )                           ! $YOG_stage_02.$G_IMS_PL_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_02.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_02.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_02.$F_PL_B1  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_PL_B                   )                           ! $YOG_stage_02.$G_IMS_PL_B
youtgroup.end (                     $YOG_stage_02                 )                           ! $YOG_stage_02

youtgroup.begin (                   $YOG_stage_03                 )                           ! $YOG_stage_03
   youtgroup.begin (                $G_IMS_A                      )                           ! $YOG_stage_03.$G_IMS_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_IMS_A  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_IMS_A  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_IMS_A  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_A                      )                           ! $YOG_stage_03.$G_IMS_A
   youtgroup.begin (                $G_IMS_B                      )                           ! $YOG_stage_03.$G_IMS_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_IMS_B  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_IMS_B  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_IMS_B  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_B                      )                           ! $YOG_stage_03.$G_IMS_B
   youtgroup.begin (                $G_IMS_C                      )                           ! $YOG_stage_03.$G_IMS_C
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_IMS_C  ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_IMS_C  ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_IMS_C  ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_IMS_C                      )                           ! $YOG_stage_03.$G_IMS_C
   youtgroup.begin (                $G_HS_A                       )                           ! $YOG_stage_03.$G_HS_A
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_HS_A   ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_HS_A   ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_HS_A   ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_HS_A                       )                           ! $YOG_stage_03.$G_HS_A
   youtgroup.begin (                $G_HS_B                       )                           ! $YOG_stage_03.$G_HS_B
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_HS_B   ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_HS_B   ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_HS_B   ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_HS_B                       )                           ! $YOG_stage_03.$G_HS_B
   youtgroup.begin (                $G_HS_C                       )                           ! $YOG_stage_03.$G_HS_C
      yout.type (                   $Y_x                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_x                          ) = $FEG_stage_03.$F_HS_C   ! [-] Force Element
      yout.par (          2 ,       $Y_x                          ) = 1.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_y                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_y                          ) = $FEG_stage_03.$F_HS_C   ! [-] Force Element
      yout.par (          2 ,       $Y_y                          ) = 2.00000000000000000E+00 ! [-] Direction/magnitude

      yout.type (                   $Y_z                          ) = 10                      ! Type
      yout.par (          1 ,       $Y_z                          ) = $FEG_stage_03.$F_HS_C   ! [-] Force Element
      yout.par (          2 ,       $Y_z                          ) = 3.00000000000000000E+00 ! [-] Direction/magnitude

   youtgroup.end (                  $G_HS_C                       )                           ! $YOG_stage_03.$G_HS_C
youtgroup.end (                     $YOG_stage_03                 )                           ! $YOG_stage_03

!**********************************************************************
! Sensors
!**********************************************************************
sensor.from (                       $S_INP_A                      ) = $M_bed_plate_INP_A      ! From Marker
sensor.to (                         $S_INP_A                      ) = $M_main_shaft_INP_A     ! To Marker

sensor.from (                       $S_INP_B                      ) = $M_bed_plate_INP_B      ! From Marker
sensor.to (                         $S_INP_B                      ) = $M_main_shaft_INP_B     ! To Marker

sensorgroup.begin (                 $SG_stage_01                  )                           ! $SG_stage_01
   sensor.from (                    $S_PLC_A                      ) = $M_bed_plate_PLC_A      ! From Marker
   sensor.to (                      $S_PLC_A                      ) = $BG_stage_01.$M_carrier_PLC_A ! To Marker

   sensor.from (                    $S_PLC_B                      ) = $M_bed_plate_PLC_B      ! From Marker
   sensor.to (                      $S_PLC_B                      ) = $BG_stage_01.$M_carrier_PLC_B ! To Marker

   sensor.from (                    $S_PL_A                       ) = $BG_stage_01.$M_carrier_pin_A1 ! From Marker
   sensor.to (                      $S_PL_A                       ) = $BG_stage_01.$BG_planet_01.$M_pin_A ! To Marker

   sensor.from (                    $S_PL_B                       ) = $BG_stage_01.$M_carrier_pin_B1 ! From Marker
   sensor.to (                      $S_PL_B                       ) = $BG_stage_01.$BG_planet_01.$M_pin_B ! To Marker

   sensor.from (                    $S_sun                        ) = $M_GB_frame_BRF         ! From Marker
   sensor.to (                      $S_sun                        ) = $BG_stage_01.$M_sun_BRF ! To Marker

   sensor.from (                    $S_planet                     ) = $M_GB_frame_BRF         ! From Marker
   sensor.to (                      $S_planet                     ) = $BG_stage_01.$BG_planet_01.$M_gear_BRF ! To Marker

sensorgroup.end (                   $SG_stage_01                  )                           ! $SG_stage_01

sensorgroup.begin (                 $SG_stage_02                  )                           ! $SG_stage_02
   sensor.from (                    $S_IMS_PLC_A                  ) = $M_bed_plate_IMS_PLC_A  ! From Marker
   sensor.to (                      $S_IMS_PLC_A                  ) = $BG_stage_02.$M_carrier_IMS_PLC_A ! To Marker

   sensor.from (                    $S_IMS_PLC_B                  ) = $M_bed_plate_IMS_PLC_B  ! From Marker
   sensor.to (                      $S_IMS_PLC_B                  ) = $BG_stage_02.$M_carrier_IMS_PLC_B ! To Marker

   sensor.from (                    $S_IMS_PL_A                   ) = $BG_stage_02.$M_carrier_pin_A1 ! From Marker
   sensor.to (                      $S_IMS_PL_A                   ) = $BG_stage_02.$BG_planet_01.$M_pin_A ! To Marker

   sensor.from (                    $S_IMS_PL_B                   ) = $BG_stage_02.$M_carrier_pin_B1 ! From Marker
   sensor.to (                      $S_IMS_PL_B                   ) = $BG_stage_02.$BG_planet_01.$M_pin_B ! To Marker

   sensor.from (                    $S_sun                        ) = $M_GB_frame_BRF         ! From Marker
   sensor.to (                      $S_sun                        ) = $BG_stage_02.$M_sun_BRF ! To Marker

   sensor.from (                    $S_planet                     ) = $M_GB_frame_BRF         ! From Marker
   sensor.to (                      $S_planet                     ) = $BG_stage_02.$BG_planet_01.$M_gear_BRF ! To Marker

sensorgroup.end (                   $SG_stage_02                  )                           ! $SG_stage_02

sensorgroup.begin (                 $SG_stage_03                  )                           ! $SG_stage_03
   sensor.from (                    $S_IMS_A                      ) = $M_GB_frame_wheel_A     ! From Marker
   sensor.to (                      $S_IMS_A                      ) = $BG_stage_03.$BG_wheel.$M_pin_A ! To Marker

   sensor.from (                    $S_IMS_B                      ) = $M_GB_frame_wheel_B     ! From Marker
   sensor.to (                      $S_IMS_B                      ) = $BG_stage_03.$BG_wheel.$M_pin_B ! To Marker

   sensor.from (                    $S_IMS_C                      ) = $M_GB_frame_wheel_C     ! From Marker
   sensor.to (                      $S_IMS_C                      ) = $BG_stage_03.$BG_wheel.$M_pin_C ! To Marker

   sensor.from (                    $S_HS_A                       ) = $M_GB_frame_pinion_A    ! From Marker
   sensor.to (                      $S_HS_A                       ) = $BG_stage_03.$BG_pinion.$M_pin_A ! To Marker

   sensor.from (                    $S_HS_B                       ) = $M_GB_frame_pinion_B    ! From Marker
   sensor.to (                      $S_HS_B                       ) = $BG_stage_03.$BG_pinion.$M_pin_B ! To Marker

   sensor.from (                    $S_HS_C                       ) = $M_GB_frame_pinion_C    ! From Marker
   sensor.to (                      $S_HS_C                       ) = $BG_stage_03.$BG_pinion.$M_pin_C ! To Marker

sensorgroup.end (                   $SG_stage_03                  )                           ! $SG_stage_03

!**********************************************************************
! Materials
!**********************************************************************
material.type (                     $Mat_steel                    ) = 1                       ! Type
material.par (            2 ,       $Mat_steel                    ) = $SVG_material.$_rho     ! [kg/m³] Density
material.par (            3 ,       $Mat_steel                    ) = 0.00000000000000000E+00 ! [-] Input mode
material.par (            4 ,       $Mat_steel                    ) = $SVG_material.$_E       ! [Pa] Young's modulus
material.par (            5 ,       $Mat_steel                    ) = $SVG_material.$_nu      ! [-] Poisson's ratio
material.par (            6 ,       $Mat_steel                    ) = 7.50000000000000000E+10 ! [Pa] Shear modulus

!**********************************************************************
! Cross Sections
!**********************************************************************
xsection.type (                     $XSc_main_shaft               ) = 1                       ! Type
xsection.par (            1 ,       $XSc_main_shaft               ) = $Mat_steel              ! [-] Material
xsection.par (            3 ,       $XSc_main_shaft               ) = $SVG_main_shaft.$_diameter ! [m] Diameter
xsection.par (            4 ,       $XSc_main_shaft               ) = 3.60000000000000000E+01 ! [-] Number of cross section nodes
xsection.plot.par (       1 ,       $XSc_main_shaft               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
xsection.plot.par (       1 ,   1 ,   1 , $XSc_main_shaft         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
xsection.plot.par (       1 ,   2 ,   1 , $XSc_main_shaft         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

model.data.redundancy                                               = 'eJxjYCANGBiZG5kmmaamGBiZJCcmWqYkWRinWJobpRhYGhsZGCUBAI04CIJQAAAAAAAAAA==' ! Constraint redundancy data
model.data.dependency                                               = 'eJxjYGBgYGOgDaC2uSPNPFqZO9LNY8ShjlRxEDAwMjcyTTJNTTEwMklOTLRMSbIwTrE0N0oxsDQ2MjBKAgAD4wjBYAMAAAAAAAA=' ! Solver state dependency data
