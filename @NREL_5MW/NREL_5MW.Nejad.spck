!file.version=1.7! Removing this line will make the file unreadable

!**********************************************************************
! SIMPACK Version Information
!**********************************************************************
version.number = 90600
version.desc   = ''
version.build  = 93

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
searchpath (              2                                       ) = 'input_functions'
gravity (                 1                                       ) = 0.0000000000000000E+00  ! Gravity
gravity (                 2                                       ) = 0.0000000000000000E+00  ! Gravity
gravity (                 3                                       ) = -9.8100000000000005E+00 ! Gravity
vehicle.startvel                                                    = 0.0000000000000000E+00  ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
glob.form.tuning                                                    = 0                       ! Formalism Tuning
glob.ifctn.warn                                                     = 0                       ! Spline Warnings
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.0000000000000000E+00  ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = 0                       ! Active Track element
prop3d.bg.base.color.r                                              = 9.9000000000000000E+01  ! Background color (red component)
prop3d.bg.base.color.g                                              = 1.8400000000000000E+02  ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.5500000000000000E+02  ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.0000000000000000E+00  ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.5500000000000000E+02  ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.5500000000000000E+02  ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.5500000000000000E+02  ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.0000000000000000E+00  ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.0000000000000000E+00  ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.0000000000000000E+00  ! Marker color (red component)
prop3d.marker.color.g                                               = 0.0000000000000000E+00  ! Marker color (green component)
prop3d.marker.color.b                                               = 0.0000000000000000E+00  ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.0000000000000000E+00  ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.0000000000000000E+00  ! Horizontal offset
prop2d.grid.hor.step                                                = 1.0000000000000000E+01  ! Horizontal step
prop2d.grid.vert.start                                              = 0.0000000000000000E+00  ! Vertical offset
prop2d.grid.vert.step                                               = 1.0000000000000000E+01  ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 3.1355451596900821E+00  ! Position
view.pos (                2 ,       $V_WorkingView                ) = -6.4382166136056185E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 2.2157993277069181E+00  ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.6308603286743164E-01  ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 1.5287408232688904E-01  ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 2.3863121867179871E-01  ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 7.7628517150878906E-01  ! Orientation
view.angle (                        $V_WorkingView                ) = 7.8539818525314331E-01  ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.5030236914753914E-02  ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.5030236244201660E+01  ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.8524776119738817E-01  ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.1946778753772378E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.5240458619955461E-01  ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.2440571784973145E-01  ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.1178941428661346E-01  ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.8827568888664246E-01  ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.7268427610397339E-01  ! Orientation
view.angle (                        $V_Ortho                      ) = 7.8539818525314331E-01  ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.0000000000000000E+00  ! Position
view.pos (                2 ,       $V_Front                      ) = -5.9984529018402100E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.9802329493122670E-08  ! Position
view.orient (             1 ,       $V_Front                      ) = 7.0710676908493042E-01  ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.0000000000000000E+00  ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.0000000000000000E+00  ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.0710676908493042E-01  ! Orientation
view.height (                       $V_Front                      ) = 8.0000000000000004E-01  ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.0000000000000000E+00  ! Position
view.pos (                2 ,       $V_Top                        ) = -7.4989371933043003E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.9909558296203613E-01  ! Position
view.orient (             1 ,       $V_Top                        ) = 2.5144752058281483E-08  ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.0000000000000000E+00  ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.0000000000000000E+00  ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.0000000000000000E+00  ! Orientation
view.height (                       $V_Top                        ) = 8.0000000000000004E-01  ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.9999999999999995E-07  ! Kinematics tolerance
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.linalg.struc (            $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_INTPAR_SODASRT_LINALG_ROUTINES
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.class (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.9999999999999995E-08  ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.0000000000000000E+00  ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.3300000000000002E-01  ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.0000000000000000E-01  ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.9999999999999995E-07  ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 3800 s }              ! TIME_INTEG_PAR_END_TIME
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 200 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.0000000000000001E-05  ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.0000000000000000E-04  ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.0000000000000000E-04  ! TIME_INTEG_PARSTATE_VEL
slv.integ.atol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.0000000000000000E-04  ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.9999999999999995E-08  ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.0000000000000000E-04  ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.0000000000000001E-05  ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.0000000000000000E-04  ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.type (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_INTEG_METHOD
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT_INCR_TYPE_DIFF_APPROX
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.meas.time.start (               $SLV_SolverSettings           ) = 0.0000000000000000E+00  ! MEAS_PAR_TIME_START
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.assmbl.tol (                    $SLV_SolverSettings           ) = 1.0000000000000000E-08  ! ASSMBL_PAR_SOLVER_ERROR_TOLERANCE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvargroup.begin (                 $G_LS                         )                           ! $G_LS
   subvar.str (                     $_alpha                       ) = '20 deg'                ! $G_LS.$_alpha, Definition

   subvar.str (                     $_mn                          ) = '45 mm'                 ! $G_LS.$_mn, Definition

   subvar.str (                     $_x_sun                       ) = '0.617'                 ! $G_LS.$_x_sun, Definition

   subvar.str (                     $_x_planet                    ) = '0.802'                 ! $G_LS.$_x_planet, Definition

   subvar.str (                     $_x_ring                      ) = '-0.501'                ! $G_LS.$_x_ring, Definition

   subvar.str (                     $_z_sun                       ) = '19'                    ! $G_LS.$_z_sun, Definition

   subvar.str (                     $_z_planet                    ) = '17'                    ! $G_LS.$_z_planet, Definition

   subvar.str (                     $_z_ring                      ) = '56'                    ! $G_LS.$_z_ring, Definition

   subvar.str (                     $_b                           ) = '491 mm'                ! $G_LS.$_b, Definition

   subvar.str (                     $_Norm_Backlash               ) = '0.40 mm'               ! $G_LS.$_Norm_Backlash, Definition

   subvar.str (                     $_Tooth_Damping               ) = '500000000'             ! $G_LS.$_Tooth_Damping, Definition

   subvar.str (                     $_Tooth_Stiff_ratio           ) = '0.8'                   ! $G_LS.$_Tooth_Stiff_ratio, Definition

   subvar.str (                     $_PL_c_x                      ) = '91016'                 ! $G_LS.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '9.37E+9'               ! $G_LS.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '3.20E+9'               ! $G_LS.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_LS.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1.39E+6'               ! $G_LS.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '4.45E+6'               ! $G_LS.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_LS.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_LS.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_LS.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_LS.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_LS.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_LS.$_PL_d_ga, Definition

subvargroup.end (                   $G_LS                         )                           ! $G_LS

subvargroup.begin (                 $G_IMS                        )                           ! $G_IMS
   subvar.str (                     $_alpha                       ) = '20 deg'                ! $G_IMS.$_alpha, Definition

   subvar.str (                     $_mn                          ) = '21 mm'                 ! $G_IMS.$_mn, Definition

   subvar.str (                     $_x_sun                       ) = '0.389'                 ! $G_IMS.$_x_sun, Definition

   subvar.str (                     $_x_planet                    ) = '0.504'                 ! $G_IMS.$_x_planet, Definition

   subvar.str (                     $_x_ring                      ) = '0.117'                 ! $G_IMS.$_x_ring, Definition

   subvar.str (                     $_z_sun                       ) = '18'                    ! $G_IMS.$_z_sun, Definition

   subvar.str (                     $_z_planet                    ) = '36'                    ! $G_IMS.$_z_planet, Definition

   subvar.str (                     $_z_ring                      ) = '93'                    ! $G_IMS.$_z_ring, Definition

   subvar.str (                     $_b                           ) = '550 mm'                ! $G_IMS.$_b, Definition

   subvar.str (                     $_Norm_Backlash               ) = '0.40 mm'               ! $G_IMS.$_Norm_Backlash, Definition

   subvar.str (                     $_Tooth_Damping               ) = '50000000'              ! $G_IMS.$_Tooth_Damping, Definition

   subvar.str (                     $_Tooth_Stiff_ratio           ) = '0.8'                   ! $G_IMS.$_Tooth_Stiff_ratio, Definition

   subvar.str (                     $_PL_c_x                      ) = '91016'                 ! $G_IMS.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '6.12E+7'               ! $G_IMS.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1.16E+9'               ! $G_IMS.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_IMS.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '7.5e+4'                ! $G_IMS.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '7.5e+4'                ! $G_IMS.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_IMS.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_IMS.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_IMS.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_IMS.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_IMS.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_IMS.$_PL_d_ga, Definition

subvargroup.end (                   $G_IMS                        )                           ! $G_IMS

subvargroup.begin (                 $G_HS                         )                           ! $G_HS
   subvar.str (                     $_alpha                       ) = '20 deg'                ! $G_HS.$_alpha, Definition

   subvar.str (                     $_mn                          ) = '14 mm'                 ! $G_HS.$_mn, Definition

   subvar.str (                     $_helix                       ) = '10 deg'                ! $G_HS.$_helix, Definition

   subvar.str (                     $_x_pinion                    ) = '0.480'                 ! $G_HS.$_x_pinion, Definition

   subvar.str (                     $_x_gear                      ) = '0.669'                 ! $G_HS.$_x_gear, Definition

   subvar.str (                     $_z_pinion                    ) = '24'                    ! $G_HS.$_z_pinion, Definition

   subvar.str (                     $_z_gear                      ) = '95'                    ! $G_HS.$_z_gear, Definition

   subvar.str (                     $_b                           ) = '360 mm'                ! $G_HS.$_b, Definition

   subvar.str (                     $_Norm_Backlash               ) = '0.40 mm'               ! $G_HS.$_Norm_Backlash, Definition

   subvar.str (                     $_Tooth_Damping               ) = '5000000'               ! $G_HS.$_Tooth_Damping, Definition

   subvar.str (                     $_Tooth_Stiff_ratio           ) = '0.8'                   ! $G_HS.$_Tooth_Stiff_ratio, Definition

subvargroup.end (                   $G_HS                         )                           ! $G_HS

subvargroup.begin (                 $G_Bearing_IMS_A              )                           ! $G_Bearing_IMS_A
   subvar.str (                     $_PL_c_x                      ) = '0'                     ! $G_Bearing_IMS_A.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '6.12E+7'               ! $G_Bearing_IMS_A.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1.16E+9'               ! $G_Bearing_IMS_A.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_IMS_A.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '74428'                 ! $G_Bearing_IMS_A.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '3239.8'                ! $G_Bearing_IMS_A.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_IMS_A.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_IMS_A.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_IMS_A.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_IMS_A.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_IMS_A.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_IMS_A.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_IMS_A              )                           ! $G_Bearing_IMS_A

subvargroup.begin (                 $G_Bearing_IMS_B              )                           ! $G_Bearing_IMS_B
   subvar.str (                     $_PL_c_x                      ) = '7.41e+7'               ! $G_Bearing_IMS_B.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '5.17E+8'               ! $G_Bearing_IMS_B.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '484000000'             ! $G_Bearing_IMS_B.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_IMS_B.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1.67e+6'               ! $G_Bearing_IMS_B.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '1.78e+6'               ! $G_Bearing_IMS_B.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_IMS_B.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_IMS_B.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_IMS_B.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_IMS_B.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_IMS_B.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_IMS_B.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_IMS_B              )                           ! $G_Bearing_IMS_B

subvargroup.begin (                 $G_Bearing_IMS_C              )                           ! $G_Bearing_IMS_C
   subvar.str (                     $_PL_c_x                      ) = '78723000'              ! $G_Bearing_IMS_C.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '7.3708E+8'             ! $G_Bearing_IMS_C.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '3.2612e+8'             ! $G_Bearing_IMS_C.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_IMS_C.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1123400'               ! $G_Bearing_IMS_C.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '2539000'               ! $G_Bearing_IMS_C.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_IMS_C.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_IMS_C.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_IMS_C.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_IMS_C.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_IMS_C.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_IMS_C.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_IMS_C              )                           ! $G_Bearing_IMS_C

subvargroup.begin (                 $G_Bearing_HS_A               )                           ! $G_Bearing_HS_A
   subvar.str (                     $_PL_c_x                      ) = '1.26e+8'               ! $G_Bearing_HS_A.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '8.21e+8'               ! $G_Bearing_HS_A.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '821000000'             ! $G_Bearing_HS_A.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_HS_A.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1123400'               ! $G_Bearing_HS_A.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '2539000'               ! $G_Bearing_HS_A.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_HS_A.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_HS_A.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_HS_A.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_HS_A.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_HS_A.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_HS_A.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_HS_A               )                           ! $G_Bearing_HS_A

subvargroup.begin (                 $G_Bearing_HS_B               )                           ! $G_Bearing_HS_B
   subvar.str (                     $_PL_c_x                      ) = '6.7e+7'                ! $G_Bearing_HS_B.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '8.09e+8'               ! $G_Bearing_HS_B.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1.33e+8'               ! $G_Bearing_HS_B.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_HS_B.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1.71e+5'               ! $G_Bearing_HS_B.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '1.04e+6'               ! $G_Bearing_HS_B.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_HS_B.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_HS_B.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_HS_B.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_HS_B.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_HS_B.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_HS_B.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_HS_B               )                           ! $G_Bearing_HS_B

subvargroup.begin (                 $G_Bearing_HS_C               )                           ! $G_Bearing_HS_C
   subvar.str (                     $_PL_c_x                      ) = '7.93e+7'               ! $G_Bearing_HS_C.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '1.04e+9'               ! $G_Bearing_HS_C.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '7.29e+7'               ! $G_Bearing_HS_C.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_Bearing_HS_C.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '97637.5'               ! $G_Bearing_HS_C.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '1.39e+6'               ! $G_Bearing_HS_C.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_Bearing_HS_C.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_Bearing_HS_C.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_Bearing_HS_C.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_Bearing_HS_C.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_Bearing_HS_C.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_Bearing_HS_C.$_PL_d_ga, Definition

subvargroup.end (                   $G_Bearing_HS_C               )                           ! $G_Bearing_HS_C

subvargroup.begin (                 $G_INP_A                      )                           ! $G_INP_A
   subvar.str (                     $_PL_c_x                      ) = '0'                     ! $G_INP_A.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '1.54e+10'              ! $G_INP_A.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '15400000000'           ! $G_INP_A.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_INP_A.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '5e+6'                  ! $G_INP_A.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '5e+6'                  ! $G_INP_A.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '0'                     ! $G_INP_A.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_INP_A.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_INP_A.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_INP_A.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_INP_A.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_INP_A.$_PL_d_ga, Definition

subvargroup.end (                   $G_INP_A                      )                           ! $G_INP_A

subvargroup.begin (                 $G_INP_B                      )                           ! $G_INP_B
   subvar.str (                     $_PL_c_x                      ) = '4.06e+8'               ! $G_INP_B.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '1.54e+10'              ! $G_INP_B.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '15400000000'           ! $G_INP_B.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_INP_B.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '97637.5'               ! $G_INP_B.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '97637.5'               ! $G_INP_B.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_INP_B.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_INP_B.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_INP_B.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_INP_B.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_INP_B.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_INP_B.$_PL_d_ga, Definition

subvargroup.end (                   $G_INP_B                      )                           ! $G_INP_B

subvargroup.begin (                 $G_PLC_A                      )                           ! $G_PLC_A
   subvar.str (                     $_PL_c_x                      ) = '6.6e+4'                ! $G_PLC_A.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '1770000000'            ! $G_PLC_A.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1770000000'            ! $G_PLC_A.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_PLC_A.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1390000'               ! $G_PLC_A.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '1.39e+6'               ! $G_PLC_A.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_PLC_A.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_PLC_A.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_PLC_A.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_PLC_A.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_PLC_A.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_PLC_A.$_PL_d_ga, Definition

subvargroup.end (                   $G_PLC_A                      )                           ! $G_PLC_A

subvargroup.begin (                 $G_PLC_B                      )                           ! $G_PLC_B
   subvar.str (                     $_PL_c_x                      ) = '6.6e+7'                ! $G_PLC_B.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '1770000000'            ! $G_PLC_B.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1770000000'            ! $G_PLC_B.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_PLC_B.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '1390000'               ! $G_PLC_B.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '1.39e+6'               ! $G_PLC_B.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_PLC_B.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_PLC_B.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_PLC_B.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_PLC_B.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_PLC_B.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_PLC_B.$_PL_d_ga, Definition

subvargroup.end (                   $G_PLC_B                      )                           ! $G_PLC_B

subvargroup.begin (                 $G_IMS_PLC_A                  )                           ! $G_IMS_PLC_A
   subvar.str (                     $_PL_c_x                      ) = '9.1e+4'                ! $G_IMS_PLC_A.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '6.12e+7'               ! $G_IMS_PLC_A.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1.16e+9'               ! $G_IMS_PLC_A.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_IMS_PLC_A.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '74428'                 ! $G_IMS_PLC_A.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '3239.8'                ! $G_IMS_PLC_A.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_IMS_PLC_A.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_IMS_PLC_A.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_IMS_PLC_A.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_IMS_PLC_A.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_IMS_PLC_A.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_IMS_PLC_A.$_PL_d_ga, Definition

subvargroup.end (                   $G_IMS_PLC_A                  )                           ! $G_IMS_PLC_A

subvargroup.begin (                 $G_IMS_PLC_B                  )                           ! $G_IMS_PLC_B
   subvar.str (                     $_PL_c_x                      ) = '9.1e+7'                ! $G_IMS_PLC_B.$_PL_c_x, Definition

   subvar.str (                     $_PL_c_y                      ) = '6.12e+7'               ! $G_IMS_PLC_B.$_PL_c_y, Definition

   subvar.str (                     $_PL_c_z                      ) = '1.16e+9'               ! $G_IMS_PLC_B.$_PL_c_z, Definition

   subvar.str (                     $_PL_c_al                     ) = '0'                     ! $G_IMS_PLC_B.$_PL_c_al, Definition

   subvar.str (                     $_PL_c_be                     ) = '74428'                 ! $G_IMS_PLC_B.$_PL_c_be, Definition

   subvar.str (                     $_PL_c_ga                     ) = '3239.8'                ! $G_IMS_PLC_B.$_PL_c_ga, Definition

   subvar.str (                     $_PL_d_x                      ) = '4.53e+002'             ! $G_IMS_PLC_B.$_PL_d_x, Definition

   subvar.str (                     $_PL_d_y                      ) = '4.20e+004'             ! $G_IMS_PLC_B.$_PL_d_y, Definition

   subvar.str (                     $_PL_d_z                      ) = '3.06e+004'             ! $G_IMS_PLC_B.$_PL_d_z, Definition

   subvar.str (                     $_PL_d_al                     ) = '0'                     ! $G_IMS_PLC_B.$_PL_d_al, Definition

   subvar.str (                     $_PL_d_be                     ) = '3.43e+001'             ! $G_IMS_PLC_B.$_PL_d_be, Definition

   subvar.str (                     $_PL_d_ga                     ) = '4.78e+001'             ! $G_IMS_PLC_B.$_PL_d_ga, Definition

subvargroup.end (                   $G_IMS_PLC_B                  )                           ! $G_IMS_PLC_B

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.0000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.0000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.4000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.2000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.4800000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.4800000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.4800000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.0000000000000001E-01  ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $Gearbox_Frame                ) = 1.0000000000000000E+00  ! Mass of the Body
body.mp (                           $Gearbox_Frame                ) = 0                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $Gearbox_Frame                ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $Gearbox_Frame                ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $Gearbox_Frame                ) = 1.0000000000000000E+00  ! Moments of inertia
body.attr.2d.pos.x (                $Gearbox_Frame                ) = -3.0000000000000000E+01
body.attr.2d.pos.y (                $Gearbox_Frame                ) = 3.0000000000000000E+01
body.attr.2d.width (                $Gearbox_Frame                ) = 1.1000000000000000E+02
body.attr.2d.height (               $Gearbox_Frame                ) = 8.0000000000000000E+01

marker.type (                       $M_Gearbox_Frame_BRF          ) = 1                       ! Type
marker.parent (                     $M_Gearbox_Frame_BRF          ) = $Gearbox_Frame          ! Body
marker.flx.type (                   $M_Gearbox_Frame_BRF          ) = 4                       ! Flexible type

marker.type (                       $M_Gearbox_Frame_IMS          ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS          ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS          ) = 1.5000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_SHAFT_LS_IMS ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_SHAFT_LS_IMS ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_SHAFT_LS_IMS ) = 7.5000000000000000E-01  ! Position

marker.type (                       $M_Gearbox_Frame_SHAFT_IMS_HS ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_SHAFT_IMS_HS ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_SHAFT_IMS_HS ) = { (2250-250) mm }       ! Position

marker.type (                       $M_Gearbox_Frame_HS_Pinion    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_HS_Pinion    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_HS_Pinion    ) = { (3000-500) mm }       ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_HS_Pinion    ) = { -861 mm }             ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_HS_Pinion    ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_A) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_A) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_A) = { (2770-500) mm }       ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_B) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_B) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_B) = { (3230-500) mm }       ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_C) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_C) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_C) = { (3280-500) mm }       ! Position

marker.type (                       $M_Gearbox_Frame_Shaft_Gen    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Shaft_Gen    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Shaft_Gen    ) = { (3000-500) mm }       ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Shaft_Gen    ) = { -861 mm }             ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Shaft_Gen    ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_A ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_A ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_A ) = { (2770-500) mm }       ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_A ) = { -861 mm }             ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_A ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_B ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_B ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_B ) = { (3230-500) mm }       ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_B ) = { -861 mm }             ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_B ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_C ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_C ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_C ) = { (3280-500) mm }       ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_C ) = { -861 mm }             ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_C ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_LS_PLC_A     ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_LS_PLC_A     ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_LS_PLC_A     ) = -5.0000000000000000E-01 ! Position

marker.type (                       $M_Gearbox_Frame_LS_PLC_B     ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_LS_PLC_B     ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_LS_PLC_B     ) = 5.0000000000000000E-01  ! Position

marker.type (                       $M_Gearbox_Frame_IMS_PLC_A    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS_PLC_A    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS_PLC_A    ) = 1.0000000000000000E+00  ! Position

marker.type (                       $M_Gearbox_Frame_IMS_PLC_B    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS_PLC_B    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS_PLC_B    ) = 2.0000000000000000E+00  ! Position

joint.from (                        $J_Gearbox_Frame              ) = $M_Bed_Plate_GB_Frame   ! From Marker
joint.to (                          $J_Gearbox_Frame              ) = $M_Gearbox_Frame_BRF    ! To Marker
joint.type (                        $J_Gearbox_Frame              ) = 0                       ! Type
joint.st.vel (            1 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! Velocity
joint.par (               1 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
joint.par (               2 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
joint.par (               3 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
joint.par (               4 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [m] Translation in x
joint.par (               5 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [m] Translation in y
joint.par (               6 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [m] Translation in z
joint.par (               7 ,       $J_Gearbox_Frame              ) = 0.0000000000000000E+00  ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_Gearbox_Frame              ) = 20
joint.attr.2d.pos.y (     1 ,       $J_Gearbox_Frame              ) = 170
joint.attr.2d.ori (       1 ,       $J_Gearbox_Frame              ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Gearbox_Frame   ) = 380, 380, 20, 20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Gearbox_Frame   ) = 10, 197, 197, 187
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Gearbox_Frame     ) = 20, 20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Gearbox_Frame     ) = 110, 153

prim.type (                         $P_Gearbox_Frame_Cuboid       ) = 1                       ! Type
prim.ref (                          $P_Gearbox_Frame_Cuboid       ) = $M_Gearbox_Frame_BRF    ! Reference Marker
prim.pos (                1 ,       $P_Gearbox_Frame_Cuboid       ) = 1.2000000000000000E+00  ! Position
prim.color.r (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 3.0000000000000000E+01  ! Colors (red component)
prim.color.g (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 1.4400000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 2.5500000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.drawstyle (                    $P_Gearbox_Frame_Cuboid       ) = 2                       ! Draw style
prim.transparency (                 $P_Gearbox_Frame_Cuboid       ) = 2.5000000000000000E-01  ! Transparency
prim.mp.dens.solid (                $P_Gearbox_Frame_Cuboid       ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_Gearbox_Frame_Cuboid       ) = { 4 m }                 ! [m] Length in X
prim.par (                3 ,       $P_Gearbox_Frame_Cuboid       ) = { 3 m }                 ! [m] Length in Y
prim.par (                4 ,       $P_Gearbox_Frame_Cuboid       ) = { 3 m }                 ! [m] Length in Z


body.m (                            $B_Bed_Plate                  ) = 1.0000000000000000E+00  ! Mass of the Body
body.I.tens (             1 ,   1 , $B_Bed_Plate                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Bed_Plate                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Bed_Plate                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.kind (                       $B_Bed_Plate                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_Bed_Plate                  ) = 3.7000000000000000E+02
body.attr.2d.pos.y (                $B_Bed_Plate                  ) = -2.0000000000000000E+01
body.attr.2d.width (                $B_Bed_Plate                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_Bed_Plate                  ) = 3.0000000000000000E+01

marker.type (                       $M_Bed_Plate_BRF              ) = 1                       ! Type
marker.parent (                     $M_Bed_Plate_BRF              ) = $B_Bed_Plate            ! Body
marker.flx.type (                   $M_Bed_Plate_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_Bed_Plate_GB_Frame         ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_GB_Frame         ) = $B_Bed_Plate            ! Body

marker.type (                       $M_Bed_Plate_Main_Shaft       ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Main_Shaft       ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Main_Shaft       ) = -1.5000000000000000E+00 ! Position

marker.type (                       $M_Bed_Plate_Bearing_INP_A    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Bearing_INP_A    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Bearing_INP_A    ) = -2.5000000000000000E+00 ! Position

marker.type (                       $M_Bed_Plate_Bearing_INP_B    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Bearing_INP_B    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Bearing_INP_B    ) = { -0.5-0.25 }           ! Position

marker.type (                       $M_Bed_Plate_Input_Loading    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Input_Loading    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Input_Loading    ) = -3.0000000000000000E+00 ! Position

joint.from (                        $J_Bed_Plate                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_Bed_Plate                  ) = $M_Bed_Plate_BRF        ! To Marker
joint.type (                        $J_Bed_Plate                  ) = 35                      ! Type
joint.par (               1 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_X ! [-] IFctn for x
joint.par (               2 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Y ! [-] IFctn for y
joint.par (               3 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Z ! [-] IFctn for z
joint.par (               4 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_X_Rot ! [-] IFctn for al
joint.par (               5 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Y_Rot ! [-] IFctn for be
joint.par (               6 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Z_Rot ! [-] IFctn for ga
joint.par (               7 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_XD ! [-] IFctn for v_x
joint.par (               8 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_YD ! [-] IFctn for v_y
joint.par (               9 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_ZD ! [-] IFctn for v_z
joint.par (              10 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_X_Rot_D ! [-] IFctn for w_x
joint.par (              11 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Y_Rot_D ! [-] IFctn for w_y
joint.par (              12 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Z_Rot_D ! [-] IFctn for w_z
joint.par (              13 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_XDD ! [-] IFctn for a_x
joint.par (              14 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_YDD ! [-] IFctn for a_y
joint.par (              15 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_ZDD ! [-] IFctn for a_z
joint.par (              16 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_X_Rot_DD ! [-] IFctn for wd_x
joint.par (              17 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Y_Rot_DD ! [-] IFctn for wd_y
joint.par (              18 ,       $J_Bed_Plate                  ) = $G_Bed_Plate_Motions.$I_Z_Rot_DD ! [-] IFctn for wd_z
joint.par (              19 ,       $J_Bed_Plate                  ) = 1.0000000000000000E+00  ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_Bed_Plate                  ) = 320
joint.attr.2d.pos.y (     1 ,       $J_Bed_Plate                  ) = -20
joint.attr.2d.ori (       1 ,       $J_Bed_Plate                  ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Bed_Plate       ) = 100, 100, 110, 120, 130, 140, 283, 283, 293, 303
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Bed_Plate       ) = -10, 0, 0, 0, 0, 0, 0, -20, -20, -20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Bed_Plate         ) = 370, 354.25, 354.25, 337
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Bed_Plate         ) = -10, -10, -20, -20

prim.type (                         $P_Bed_Plate                  ) = 1                       ! Type
prim.ref (                          $P_Bed_Plate                  ) = $M_Bed_Plate_BRF        ! Reference Marker
prim.pos (                3 ,       $P_Bed_Plate                  ) = -2.0000000000000000E+00 ! Position
prim.color.r (            1 ,       $P_Bed_Plate                  ) = 1.2800000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Bed_Plate                  ) = 1.2800000000000000E+02  ! Colors (green component)
prim.color.b (            1 ,       $P_Bed_Plate                  ) = 1.2800000000000000E+02  ! Colors (blue component)
prim.color.t (            1 ,       $P_Bed_Plate                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.shading (                      $P_Bed_Plate                  ) = 2                       ! Shading
prim.drawstyle (                    $P_Bed_Plate                  ) = 1                       ! Draw style
prim.transparency (                 $P_Bed_Plate                  ) = 5.0000000000000000E-01  ! Transparency
prim.mp.dens.solid (                $P_Bed_Plate                  ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_Bed_Plate                  ) = { 10 m }                ! [m] Length in X
prim.par (                3 ,       $P_Bed_Plate                  ) = { 4 m }                 ! [m] Length in Y
prim.par (                4 ,       $P_Bed_Plate                  ) = { 0.3 m }               ! [m] Length in Z


body.m (                            $B_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! Mass of the Body
body.mp (                           $B_SHAFT_LS_IMS               ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.kind (                       $B_SHAFT_LS_IMS               ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_SHAFT_LS_IMS               ) = 6.6000000000000000E+02
body.attr.2d.pos.y (                $B_SHAFT_LS_IMS               ) = -1.3000000000000000E+02
body.attr.2d.width (                $B_SHAFT_LS_IMS               ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_SHAFT_LS_IMS               ) = 3.0000000000000000E+01

marker.type (                       $M_SHAFT_LS_IMS_BRF           ) = 1                       ! Type
marker.parent (                     $M_SHAFT_LS_IMS_BRF           ) = $B_SHAFT_LS_IMS         ! Body
marker.flx.type (                   $M_SHAFT_LS_IMS_BRF           ) = 4                       ! Flexible type

marker.type (                       $M_SHAFT_LS_IMS_LS_SUN        ) = 2                       ! Type
marker.parent (                     $M_SHAFT_LS_IMS_LS_SUN        ) = $B_SHAFT_LS_IMS         ! Body
marker.pos (              1 ,       $M_SHAFT_LS_IMS_LS_SUN        ) = -7.5000000000000000E-01 ! Position

marker.type (                       $M_SHAFT_LS_IMS_PLC           ) = 2                       ! Type
marker.parent (                     $M_SHAFT_LS_IMS_PLC           ) = $B_SHAFT_LS_IMS         ! Body
marker.pos (              1 ,       $M_SHAFT_LS_IMS_PLC           ) = 7.5000000000000000E-01  ! Position

joint.from (                        $J_SHAFT_LS_IMS               ) = $M_Gearbox_Frame_SHAFT_LS_IMS ! From Marker
joint.to (                          $J_SHAFT_LS_IMS               ) = $M_SHAFT_LS_IMS_BRF     ! To Marker
joint.type (                        $J_SHAFT_LS_IMS               ) = 20                      ! Type
joint.attr.2d.pos.x (     1 ,       $J_SHAFT_LS_IMS               ) = 540
joint.attr.2d.pos.y (     1 ,       $J_SHAFT_LS_IMS               ) = -160
joint.attr.2d.ori (       1 ,       $J_SHAFT_LS_IMS               ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_SHAFT_LS_IMS    ) = 70, 70, 389.75, 389.75, 399.75, 409.75, 523
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_SHAFT_LS_IMS    ) = 30, -115, -115, -160, -160, -160, -160
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_SHAFT_LS_IMS      ) = 660, 626.75, 626.75, 557
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_SHAFT_LS_IMS      ) = -120, -120, -160, -160

prim.type (                         $P_SHAFT_LS_IMS               ) = 2                       ! Type
prim.ref (                          $P_SHAFT_LS_IMS               ) = $M_SHAFT_LS_IMS_BRF     ! Reference Marker
prim.ang (                1 ,       $P_SHAFT_LS_IMS               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_SHAFT_LS_IMS               ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_SHAFT_LS_IMS               ) = 3.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_SHAFT_LS_IMS               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SHAFT_LS_IMS               ) = 1.3900000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SHAFT_LS_IMS               ) = 3.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.mp.dens.solid (                $P_SHAFT_LS_IMS               ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_SHAFT_LS_IMS               ) = 7.5000000000000000E-01  ! [m] Height
prim.par (                3 ,       $P_SHAFT_LS_IMS               ) = 8.0000000000000004E-01  ! [m] Outer diameter
prim.par (                4 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! [m] Inner diameter
prim.par (                5 ,       $P_SHAFT_LS_IMS               ) = 1.2000000000000000E+01  ! [-] Number of planes
prim.par (                6 ,       $P_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
prim.par (                7 ,       $P_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_SHAFT_LS_IMS               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (                9 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! [rad] Start angle
prim.par (               10 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! [rad] Delta angle
prim.par (               11 ,       $P_SHAFT_LS_IMS               ) = 0.0000000000000000E+00  ! [-] Close geometry with


body.sb.node.id (         1 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Node ID
body.sb.node.pos (        1 ,   1 , $B_SHAFT_IMS_HS               ) = { -750 mm }             ! Node Position
body.sb.node.pos (        2 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.id (         2 ,       $B_SHAFT_IMS_HS               ) = 2                       ! Node ID
body.sb.node.pos (        1 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        2 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.id (         3 ,       $B_SHAFT_IMS_HS               ) = 3                       ! Node ID
body.sb.node.pos (        1 ,   3 , $B_SHAFT_IMS_HS               ) = { 520 mm }              ! Node Position
body.sb.node.pos (        2 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.id (         4 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Node ID
body.sb.node.pos (        1 ,   4 , $B_SHAFT_IMS_HS               ) = { 750 mm }              ! Node Position
body.sb.node.pos (        2 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.id (         5 ,       $B_SHAFT_IMS_HS               ) = 5                       ! Node ID
body.sb.node.pos (        1 ,   5 , $B_SHAFT_IMS_HS               ) = { 980 mm }              ! Node Position
body.sb.node.pos (        2 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.id (         6 ,       $B_SHAFT_IMS_HS               ) = 6                       ! Node ID
body.sb.node.pos (        1 ,   6 , $B_SHAFT_IMS_HS               ) = { 1030 mm }             ! Node Position
body.sb.node.pos (        2 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.node.pos (        3 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Node Position
body.sb.ele.from (        1 ,       $B_SHAFT_IMS_HS               ) = 1                       ! From Node
body.sb.ele.to (          1 ,       $B_SHAFT_IMS_HS               ) = 2                       ! To Node
body.sb.ele.type (        1 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   1 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   1 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   1 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   1 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      1 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Active
body.sb.ele.from (        2 ,       $B_SHAFT_IMS_HS               ) = 2                       ! From Node
body.sb.ele.to (          2 ,       $B_SHAFT_IMS_HS               ) = 3                       ! To Node
body.sb.ele.type (        2 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   2 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   2 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   2 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   2 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      2 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Active
body.sb.ele.from (        3 ,       $B_SHAFT_IMS_HS               ) = 3                       ! From Node
body.sb.ele.to (          3 ,       $B_SHAFT_IMS_HS               ) = 4                       ! To Node
body.sb.ele.type (        3 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   3 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   3 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   3 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   3 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      3 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Active
body.sb.ele.from (        4 ,       $B_SHAFT_IMS_HS               ) = 4                       ! From Node
body.sb.ele.to (          4 ,       $B_SHAFT_IMS_HS               ) = 5                       ! To Node
body.sb.ele.type (        4 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   4 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   4 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   4 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   4 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      4 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Active
body.sb.ele.from (        5 ,       $B_SHAFT_IMS_HS               ) = 5                       ! From Node
body.sb.ele.to (          5 ,       $B_SHAFT_IMS_HS               ) = 6                       ! To Node
body.sb.ele.type (        5 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   5 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   5 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   5 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   5 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      5 ,       $B_SHAFT_IMS_HS               ) = 1                       ! Active
body.sb.ele.from (        6 ,       $B_SHAFT_IMS_HS               ) = 6                       ! From Node
body.sb.ele.to (          6 ,       $B_SHAFT_IMS_HS               ) = 0                       ! To Node
body.sb.ele.type (        6 ,       $B_SHAFT_IMS_HS               ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   6 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   6 , $B_SHAFT_IMS_HS               ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   6 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.dmp.par (     2 ,   6 , $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Damping
body.sb.ele.active (      6 ,       $B_SHAFT_IMS_HS               ) = 0                       ! Active
body.m (                            $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Mass of the Body
body.mp (                           $B_SHAFT_IMS_HS               ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.kind (                       $B_SHAFT_IMS_HS               ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.type (                         $B_SHAFT_IMS_HS               ) = 0                       ! Body type: 0=rigid; 1=flex modal; 2=SIMBEAM; 4=nonlinear SIMBEAM
body.flx.st.pos (         1 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Flexible position
body.flx.st.pos (         2 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Flexible position
body.flx.st.pos (         3 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Flexible position
body.flx.st.vel (         1 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Velocity state
body.flx.st.vel (         2 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Velocity state
body.flx.st.vel (         3 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Velocity state
body.flx.st.dep (         1 ,       $B_SHAFT_IMS_HS               ) = 0                       ! Modal state dependency
body.flx.st.dep (         2 ,       $B_SHAFT_IMS_HS               ) = 0                       ! Modal state dependency
body.flx.st.dep (         3 ,       $B_SHAFT_IMS_HS               ) = 0                       ! Modal state dependency
body.flx.st.prestress (   1 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Pre-Stress Forces
body.flx.st.prestress (   2 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Pre-Stress Forces
body.flx.st.prestress (   3 ,       $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Pre-Stress Forces
body.flx.eigenmodes.kind (          $B_SHAFT_IMS_HS               ) = 2                       ! Eigenmode frequency range: 0=none; 1=f-min,f-max; 2=f-min,n-modes; 3=f-min,all modes
body.flx.eigenmodes.freqrange.min ( $B_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Eigenmode minimum frequency
body.flx.eigenmodes.nmodes (        $B_SHAFT_IMS_HS               ) = 3                       ! Eigenmode number of modes
body.flx.ifacemodes.kind (          $B_SHAFT_IMS_HS               ) = -1                      ! Interface modes; -1=none; 0=IRM (default); 1=FRM-Auto; 2=FRM-Manual
body.flx.st.active (      1 ,       $B_SHAFT_IMS_HS               ) = 1                       ! User defined selection of the mode vectors
body.flx.st.active (      2 ,       $B_SHAFT_IMS_HS               ) = 1                       ! User defined selection of the mode vectors
body.flx.st.active (      3 ,       $B_SHAFT_IMS_HS               ) = 1                       ! User defined selection of the mode vectors
body.attr.2d.pos.x (                $B_SHAFT_IMS_HS               ) = 4.7000000000000000E+02
body.attr.2d.pos.y (                $B_SHAFT_IMS_HS               ) = -6.0000000000000000E+01
body.attr.2d.width (                $B_SHAFT_IMS_HS               ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_SHAFT_IMS_HS               ) = 3.0000000000000000E+01

marker.type (                       $M_SHAFT_IMS_HS_BRF           ) = 1                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_BRF           ) = $B_SHAFT_IMS_HS         ! Body
marker.flx.type (                   $M_SHAFT_IMS_HS_BRF           ) = 4                       ! Flexible type

marker.type (                       $M_SHAFT_IMS_HS_IMS_SUN       ) = 2                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_IMS_SUN       ) = $B_SHAFT_IMS_HS         ! Body
marker.pos (              1 ,       $M_SHAFT_IMS_HS_IMS_SUN       ) = -5.0000000000000000E-01 ! Position

marker.type (                       $M_SHAFT_IMS_HS_GEAR          ) = 2                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_GEAR          ) = $B_SHAFT_IMS_HS         ! Body
marker.pos (              1 ,       $M_SHAFT_IMS_HS_GEAR          ) = 5.0000000000000000E-01  ! Position

marker.type (                       $M_SHAFT_IMS_HS_Bearing_IMS_A ) = 2                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_Bearing_IMS_A ) = $B_SHAFT_IMS_HS         ! Body
marker.pos (              1 ,       $M_SHAFT_IMS_HS_Bearing_IMS_A ) = { (500-360/2-100/2) mm } ! Position

marker.type (                       $M_SHAFT_IMS_HS_Bearing_IMS_B ) = 2                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_Bearing_IMS_B ) = $B_SHAFT_IMS_HS         ! Body
marker.pos (              1 ,       $M_SHAFT_IMS_HS_Bearing_IMS_B ) = { (500+360/2+100/2) mm } ! Position

marker.type (                       $M_SHAFT_IMS_HS_Bearing_IMS_C ) = 2                       ! Type
marker.parent (                     $M_SHAFT_IMS_HS_Bearing_IMS_C ) = $B_SHAFT_IMS_HS         ! Body
marker.pos (              1 ,       $M_SHAFT_IMS_HS_Bearing_IMS_C ) = { (500+360/2+100/2+100/2) mm } ! Position

joint.from (                        $J_SHAFT_IMS_HS               ) = $M_Gearbox_Frame_SHAFT_IMS_HS ! From Marker
joint.to (                          $J_SHAFT_IMS_HS               ) = $M_SHAFT_IMS_HS_BRF     ! To Marker
joint.type (                        $J_SHAFT_IMS_HS               ) = 20                      ! Type
joint.attr.2d.pos.x (     1 ,       $J_SHAFT_IMS_HS               ) = 620
joint.attr.2d.pos.y (     1 ,       $J_SHAFT_IMS_HS               ) = -100
joint.attr.2d.ori (       1 ,       $J_SHAFT_IMS_HS               ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_SHAFT_IMS_HS    ) = 60, 60, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473, 483, 493, 503, 513, 513, 523, 533, 543, 553, 563, 573, 573, 583, 593, 603
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_SHAFT_IMS_HS    ) = 30, 5.9375, 5.9375, -36.25, -36.25, -36.25, -36.25, -55, -55, -55, -55, -55, -55, -55, -55, -80, -80, -80, -80, -80, -80, -80, -80, -90, -90, -90, -90, -90, -90, -90, -100, -100, -100, -100
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_SHAFT_IMS_HS      ) = 510, 510, 647, 647, 637
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_SHAFT_IMS_HS      ) = -60, -77.5, -77.5, -100, -100

prim.type (                         $P_SHAFT_IMS_HS               ) = 2                       ! Type
prim.ref (                          $P_SHAFT_IMS_HS               ) = $M_SHAFT_IMS_HS_BRF     ! Reference Marker
prim.pos (                1 ,       $P_SHAFT_IMS_HS               ) = { 250 mm }              ! Position
prim.ang (                1 ,       $P_SHAFT_IMS_HS               ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_SHAFT_IMS_HS               ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_SHAFT_IMS_HS               ) = 3.4000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_SHAFT_IMS_HS               ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SHAFT_IMS_HS               ) = 1.3900000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SHAFT_IMS_HS               ) = 3.4000000000000000E+01  ! Colors (blue component)
prim.color.b (            2 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.mp.dens.solid (                $P_SHAFT_IMS_HS               ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_SHAFT_IMS_HS               ) = 5.0000000000000000E-01  ! [m] Outer diameter
prim.par (                4 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! [m] Inner diameter
prim.par (                5 ,       $P_SHAFT_IMS_HS               ) = 1.2000000000000000E+01  ! [-] Number of planes
prim.par (                6 ,       $P_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
prim.par (                7 ,       $P_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_SHAFT_IMS_HS               ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (                9 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! [rad] Start angle
prim.par (               10 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! [rad] Delta angle
prim.par (               11 ,       $P_SHAFT_IMS_HS               ) = 0.0000000000000000E+00  ! [-] Close geometry with


body.m (                            $B_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! Mass of the Body
body.mp (                           $B_SHAFT_Gen                  ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.kind (                       $B_SHAFT_Gen                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_SHAFT_Gen                  ) = 5.4000000000000000E+02
body.attr.2d.pos.y (                $B_SHAFT_Gen                  ) = -2.3000000000000000E+02
body.attr.2d.width (                $B_SHAFT_Gen                  ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_SHAFT_Gen                  ) = 3.0000000000000000E+01

marker.type (                       $M_SHAFT_Gen_BRF              ) = 1                       ! Type
marker.parent (                     $M_SHAFT_Gen_BRF              ) = $B_SHAFT_Gen            ! Body
marker.flx.type (                   $M_SHAFT_Gen_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_SHAFT_Gen_Bearing_HS_A     ) = 2                       ! Type
marker.parent (                     $M_SHAFT_Gen_Bearing_HS_A     ) = $B_SHAFT_Gen            ! Body
marker.pos (              1 ,       $M_SHAFT_Gen_Bearing_HS_A     ) = { -230 mm }             ! Position
marker.pos (              2 ,       $M_SHAFT_Gen_Bearing_HS_A     ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_SHAFT_Gen_Bearing_HS_B     ) = 2                       ! Type
marker.parent (                     $M_SHAFT_Gen_Bearing_HS_B     ) = $B_SHAFT_Gen            ! Body
marker.pos (              1 ,       $M_SHAFT_Gen_Bearing_HS_B     ) = { 230 mm }              ! Position
marker.pos (              2 ,       $M_SHAFT_Gen_Bearing_HS_B     ) = 0.0000000000000000E+00  ! Position

marker.type (                       $M_SHAFT_Gen_Bearing_HS_C     ) = 2                       ! Type
marker.parent (                     $M_SHAFT_Gen_Bearing_HS_C     ) = $B_SHAFT_Gen            ! Body
marker.pos (              1 ,       $M_SHAFT_Gen_Bearing_HS_C     ) = { 280 mm }              ! Position
marker.pos (              2 ,       $M_SHAFT_Gen_Bearing_HS_C     ) = 0.0000000000000000E+00  ! Position

joint.from (                        $J_SHAFT_Gen                  ) = $M_Gearbox_Frame_Shaft_Gen ! From Marker
joint.to (                          $J_SHAFT_Gen                  ) = $M_SHAFT_Gen_BRF        ! To Marker
joint.type (                        $J_SHAFT_Gen                  ) = 20                      ! Type
joint.attr.2d.pos.x (     1 ,       $J_SHAFT_Gen                  ) = 430
joint.attr.2d.pos.y (     1 ,       $J_SHAFT_Gen                  ) = -190
joint.attr.2d.ori (       1 ,       $J_SHAFT_Gen                  ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_SHAFT_Gen       ) = 80, 90, 90, 100.09375, 100.09375, 110.1875, 170.75, 413
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_SHAFT_Gen       ) = 40, 40, -132.5, -132.5, -190, -190, -190, -190
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_SHAFT_Gen         ) = 550, 550, 447
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_SHAFT_Gen         ) = -200, -190, -190

prim.type (                         $P_SHAFT_Gen                  ) = 2                       ! Type
prim.ref (                          $P_SHAFT_Gen                  ) = $M_SHAFT_Gen_BRF        ! Reference Marker
prim.ang (                3 ,       $P_SHAFT_Gen                  ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_SHAFT_Gen                  ) = 5.8000000000000000E+01  ! Colors (red component)
prim.color.r (            2 ,       $P_SHAFT_Gen                  ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_SHAFT_Gen                  ) = 9.5000000000000000E+01  ! Colors (green component)
prim.color.g (            2 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_SHAFT_Gen                  ) = 2.0500000000000000E+02  ! Colors (blue component)
prim.color.b (            2 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.mp.dens.solid (                $P_SHAFT_Gen                  ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_SHAFT_Gen                  ) = { 700 mm }              ! [m] Height
prim.par (                3 ,       $P_SHAFT_Gen                  ) = { 200 mm }              ! [m] Outer diameter
prim.par (                4 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! [m] Inner diameter
prim.par (                5 ,       $P_SHAFT_Gen                  ) = 1.5000000000000000E+01  ! [-] Number of planes
prim.par (                6 ,       $P_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
prim.par (                7 ,       $P_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_SHAFT_Gen                  ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (                9 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! [rad] Start angle
prim.par (               10 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! [rad] Delta angle
prim.par (               11 ,       $P_SHAFT_Gen                  ) = 0.0000000000000000E+00  ! [-] Close geometry with


body.m (                            $B_Main_Shaft                 ) = 1.0000000000000000E+00  ! Mass of the Body
body.mp (                           $B_Main_Shaft                 ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_Main_Shaft                 ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Main_Shaft                 ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Main_Shaft                 ) = 1.0000000000000000E+00  ! Moments of inertia
body.I.kind (                       $B_Main_Shaft                 ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_Main_Shaft                 ) = -1.8000000000000000E+02
body.attr.2d.pos.y (                $B_Main_Shaft                 ) = -4.0000000000000000E+01
body.attr.2d.width (                $B_Main_Shaft                 ) = 5.0000000000000000E+01
body.attr.2d.height (               $B_Main_Shaft                 ) = 3.0000000000000000E+01

marker.type (                       $M_Main_Shaft_BRF             ) = 1                       ! Type
marker.parent (                     $M_Main_Shaft_BRF             ) = $B_Main_Shaft           ! Body
marker.flx.type (                   $M_Main_Shaft_BRF             ) = 4                       ! Flexible type

marker.type (                       $M_Main_Shaft_Input_Loading   ) = 2                       ! Type
marker.parent (                     $M_Main_Shaft_Input_Loading   ) = $B_Main_Shaft           ! Body
marker.pos (              1 ,       $M_Main_Shaft_Input_Loading   ) = -1.5000000000000000E+00 ! Position

marker.type (                       $M_Main_Shaft_INP_A           ) = 2                       ! Type
marker.parent (                     $M_Main_Shaft_INP_A           ) = $B_Main_Shaft           ! Body
marker.pos (              1 ,       $M_Main_Shaft_INP_A           ) = -1.0000000000000000E+00 ! Position

marker.type (                       $M_Main_Shaft_INP_B           ) = 2                       ! Type
marker.parent (                     $M_Main_Shaft_INP_B           ) = $B_Main_Shaft           ! Body
marker.pos (              1 ,       $M_Main_Shaft_INP_B           ) = 7.5000000000000000E-01  ! Position

marker.type (                       $M_Main_Shaft_LS_PLC          ) = 2                       ! Type
marker.parent (                     $M_Main_Shaft_LS_PLC          ) = $B_Main_Shaft           ! Body
marker.pos (              1 ,       $M_Main_Shaft_LS_PLC          ) = 1.5000000000000000E+00  ! Position

joint.from (                        $J_Main_Shaft                 ) = $M_Bed_Plate_Main_Shaft ! From Marker
joint.to (                          $J_Main_Shaft                 ) = $M_Main_Shaft_BRF       ! To Marker
joint.type (                        $J_Main_Shaft                 ) = 20                      ! Type
joint.attr.2d.pos.x (     1 ,       $J_Main_Shaft                 ) = -140
joint.attr.2d.pos.y (     1 ,       $J_Main_Shaft                 ) = -80
joint.attr.2d.ori (       1 ,       $J_Main_Shaft                 ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Main_Shaft      ) = 370, -43, -43, -53, -63, -73, -83, -93, -103, -113, -123
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Main_Shaft      ) = 0, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Main_Shaft        ) = -160, -160, -157
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Main_Shaft        ) = -40, -80, -80

prim.type (                         $P_Main_Shaft                 ) = 2                       ! Type
prim.ref (                          $P_Main_Shaft                 ) = $M_Main_Shaft_BRF       ! Reference Marker
prim.ang (                3 ,       $P_Main_Shaft                 ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Main_Shaft                 ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Main_Shaft                 ) = 1.2800000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.mp.dens.solid (                $P_Main_Shaft                 ) = 7.8500000000000000E+03  ! Density
prim.par (                2 ,       $P_Main_Shaft                 ) = 3.0000000000000000E+00  ! [m] Height
prim.par (                3 ,       $P_Main_Shaft                 ) = 1.0000000000000000E+00  ! [m] Outer diameter
prim.par (                4 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! [m] Inner diameter
prim.par (                5 ,       $P_Main_Shaft                 ) = 1.5000000000000000E+01  ! [-] Number of planes
prim.par (                6 ,       $P_Main_Shaft                 ) = 2.0000000000000000E+00  ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Main_Shaft                 ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_Main_Shaft                 ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (                9 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! [rad] Start angle
prim.par (               10 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! [rad] Delta angle
prim.par (               11 ,       $P_Main_Shaft                 ) = 0.0000000000000000E+00  ! [-] Close geometry with

prim.type (                         $P_Main_Shaft_Hub             ) = 2                       ! Type
prim.ref (                          $P_Main_Shaft_Hub             ) = $M_Main_Shaft_BRF       ! Reference Marker
prim.pos (                1 ,       $P_Main_Shaft_Hub             ) = -1.5000000000000000E+00 ! Position
prim.ang (                3 ,       $P_Main_Shaft_Hub             ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (red component)
prim.color.r (            2 ,       $P_Main_Shaft_Hub             ) = 2.5500000000000000E+02  ! Colors (red component)
prim.color.g (            1 ,       $P_Main_Shaft_Hub             ) = 1.2800000000000000E+02  ! Colors (green component)
prim.color.g (            2 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (green component)
prim.color.b (            1 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.b (            2 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (blue component)
prim.color.t (            1 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.color.t (            2 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! Colors (transparency component)
prim.mp.incl (                      $P_Main_Shaft_Hub             ) = 0                       ! Include Primitive in computation
prim.par (                2 ,       $P_Main_Shaft_Hub             ) = 7.5000000000000000E-01  ! [m] Height
prim.par (                3 ,       $P_Main_Shaft_Hub             ) = 1.5000000000000000E+00  ! [m] Outer diameter
prim.par (                4 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! [m] Inner diameter
prim.par (                5 ,       $P_Main_Shaft_Hub             ) = 1.5000000000000000E+01  ! [-] Number of planes
prim.par (                6 ,       $P_Main_Shaft_Hub             ) = 4.0000000000000000E+00  ! [-] Number of highlighted planes
prim.par (                7 ,       $P_Main_Shaft_Hub             ) = 1.0000000000000000E+00  ! [-] Show bottom cap
prim.par (                8 ,       $P_Main_Shaft_Hub             ) = 1.0000000000000000E+00  ! [-] Show top cap
prim.par (                9 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! [rad] Start angle
prim.par (               10 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! [rad] Delta angle
prim.par (               11 ,       $P_Main_Shaft_Hub             ) = 0.0000000000000000E+00  ! [-] Close geometry with


bodygroup.begin (                   $G_Body_LS                    )                           ! $G_Body_LS
   body.m (                         $B_PLC                        ) = 2.5000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PLC                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PLC                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PLC                        ) = 4.4000000000000000E+02
   body.attr.2d.pos.y (             $B_PLC                        ) = -4.0000000000000000E+01
   body.attr.2d.width (             $B_PLC                        ) = 8.0000000000000000E+01
   body.attr.2d.height (            $B_PLC                        ) = 6.0000000000000000E+01

   marker.type (                    $M_PLC_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PLC_BRF                    ) = $G_Body_LS.$B_PLC       ! Body
   marker.flx.type (                $M_PLC_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PLC_Pin1_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin1_ref               ) = $G_Body_LS.$B_PLC       ! Body

   marker.type (                    $M_PLC_Pin2_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin2_ref               ) = $G_Body_LS.$B_PLC       ! Body
   marker.ang (           1 ,       $M_PLC_Pin2_ref               ) = { 120 deg }             ! Angles
   marker.ang (           2 ,       $M_PLC_Pin2_ref               ) = 0.0000000000000000E+00  ! Angles
   marker.ang (           3 ,       $M_PLC_Pin2_ref               ) = 0.0000000000000000E+00  ! Angles

   marker.type (                    $M_PLC_Pin3_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin3_ref               ) = $G_Body_LS.$B_PLC       ! Body
   marker.ang (           1 ,       $M_PLC_Pin3_ref               ) = { 240 deg }             ! Angles

   marker.type (                    $M_PLC_Pin1                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1                   ) = $G_Body_LS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1                   ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin1                   ) = 0.0000000000000000E+00  ! Position
   marker.pos (           3 ,       $M_PLC_Pin1                   ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_A         ) = $G_Body_LS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_A         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_A         ) = { -382 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_A         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_B         ) = $G_Body_LS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_B         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_B         ) = { 382 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_B         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin2                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2                   ) = $G_Body_LS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2                   ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           3 ,       $M_PLC_Pin2                   ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_A         ) = $G_Body_LS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_A         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_A         ) = { -382 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_A         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_B         ) = $G_Body_LS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_B         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_B         ) = { 382 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_B         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin3                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3                   ) = $G_Body_LS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3                   ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin3                   ) = 0.0000000000000000E+00  ! Position
   marker.pos (           3 ,       $M_PLC_Pin3                   ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_A         ) = $G_Body_LS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_A         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_A         ) = { -382 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_A         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_B         ) = $G_Body_LS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_B         ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_B         ) = { 382 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_B         ) = { 863 mm }              ! Position

   marker.type (                    $M_PLC_Bearing_PLC_A          ) = 2                       ! Type
   marker.parent (                  $M_PLC_Bearing_PLC_A          ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Bearing_PLC_A          ) = -5.0000000000000000E-01 ! Position

   marker.type (                    $M_PLC_Bearing_PLC_B          ) = 2                       ! Type
   marker.parent (                  $M_PLC_Bearing_PLC_B          ) = $G_Body_LS.$B_PLC       ! Body
   marker.pos (           1 ,       $M_PLC_Bearing_PLC_B          ) = 5.0000000000000000E-01  ! Position

   joint.from (                     $J_PLC                        ) = $M_Main_Shaft_LS_PLC    ! From Marker
   joint.to (                       $J_PLC                        ) = $G_Body_LS.$M_PLC_BRF   ! To Marker
   joint.type (                     $J_PLC                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PLC                        ) = 120
   joint.attr.2d.pos.y (   1 ,      $J_PLC                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_PLC                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PLC          ) = -140, -140, 42.25, 42.25, 42.25, 103
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PLC          ) = -10, 0, 0, -10, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PLC            ) = 440, 430, 430, 421.65234375, 396.609375, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 337.625, 303.5, 167, 167, 167, 157, 147, 137
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PLC            ) = -20, -20, -142.0703125, -142.0703125, -142.0703125, -142.0703125, -117.65625, -98.125, -82.5, -70, -60, -40, -30, -20, -10, 0, 0, 0, 0, -10, -20, -20, -20, -20

   prim.type (                      $P_PLC                        ) = 2                       ! Type
   prim.ref (                       $P_PLC                        ) = $G_Body_LS.$M_PLC_BRF   ! Reference Marker
   prim.ang (             3 ,       $P_PLC                        ) = { -90 deg }             ! Angles
   prim.color.r (         1 ,       $P_PLC                        ) = 1.2600000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PLC                        ) = 1.9100000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PLC                        ) = 1.2800000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PLC                        ) = 1.0000000000000000E+01  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.transparency (              $P_PLC                        ) = 5.0000000000000000E-01  ! Transparency
   prim.mp.dens.solid (             $P_PLC                        ) = { 7850/2 }              ! Density
   prim.par (             2 ,       $P_PLC                        ) = { 500 mm }              ! [m] Height
   prim.par (             3 ,       $P_PLC                        ) = { 2200 mm }             ! [m] Outer diameter
   prim.par (             4 ,       $P_PLC                        ) = { 1000 mm }             ! [m] Inner diameter
   prim.par (             5 ,       $P_PLC                        ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! [rad] Start angle


   body.m (                         $B_Sun                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Sun                        ) = 7.2000000000000000E+02
   body.attr.2d.pos.y (             $B_Sun                        ) = -2.0000000000000000E+01
   body.attr.2d.width (             $B_Sun                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Sun                        ) = 3.0000000000000000E+01

   marker.type (                    $M_Sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_Sun_BRF                    ) = $G_Body_LS.$B_Sun       ! Body
   marker.flx.type (                $M_Sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_Sun_ref                    ) = 2                       ! Type
   marker.parent (                  $M_Sun_ref                    ) = $G_Body_LS.$B_Sun       ! Body
   marker.ang (           2 ,       $M_Sun_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_Sun                        ) = $M_SHAFT_LS_IMS_LS_SUN  ! From Marker
   joint.to (                       $J_Sun                        ) = $G_Body_LS.$M_Sun_BRF   ! To Marker
   joint.type (                     $J_Sun                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Sun                        ) = 260
   joint.attr.2d.pos.y (   1 ,      $J_Sun                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_Sun                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Sun          ) = 670, 670, 541.125, 541.125, 531.125, 521.125, 372.25, 372.25, 372.25, 362.25, 352.25, 342.25, 233, 233, 243
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Sun          ) = -100, -80, -80, -70, -70, -70, -70, -80, -90, -90, -90, -90, -90, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Sun            ) = 740, 740, 297, 297, 297, 297, 297, 297, 287, 277
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Sun            ) = 10, 30, 30, 20, 10, 0, -10, -20, -20, -20

   prim.type (                      $P_Sun                        ) = 25                      ! Type
   prim.ref (                       $P_Sun                        ) = $G_Body_LS.$M_Sun_ref   ! Reference Marker
   prim.color.r (         1 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Sun                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Sun                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Sun                        ) = $G_LS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_Sun                        ) = $G_LS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Sun                        ) = $G_LS.$_x_sun           ! [-] Shift factor
   prim.par (             8 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_Sun                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Sun                        ) = $G_LS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_Sun                        ) = $G_LS.$_z_sun           ! [-] Number of teeth
   prim.par (            19 ,       $P_Sun                        ) = $G_LS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_Sun                        ) = { 400 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_Sun                        ) = $G_LS.$_z_sun           ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Sun                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL1                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL1                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL1                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL1                        ) = 9.7000000000000000E+02
   body.attr.2d.pos.y (             $B_PL1                        ) = -2.0000000000000000E+01
   body.attr.2d.width (             $B_PL1                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PL1                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PL1_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL1_BRF                    ) = $G_Body_LS.$B_PL1       ! Body
   marker.flx.type (                $M_PL1_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL1_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL1_ref                    ) = $G_Body_LS.$B_PL1       ! Body
   marker.ang (           2 ,       $M_PL1_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL1                        ) = $G_Body_LS.$M_Pin1_PL   ! From Marker
   joint.to (                       $J_PL1                        ) = $G_Body_LS.$M_PL1_BRF   ! To Marker
   joint.type (                     $J_PL1                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL1                        ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_PL1                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_PL1                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL1          ) = 590, 590, 600, 600, 600, 600, 590, 580, 570, 560, 530.25, 530.25, 543
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL1          ) = -280, -274.0625, -274.0625, -264.0625, -238.125, -82.5, -82.5, -82.5, -82.5, -82.5, -82.5, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL1            ) = 980, 980, 587, 587, 587, 587, 587, 587, 577
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL1            ) = 10, 30, 30, 20, 10, 0, -10, -20, -20

   prim.type (                      $P_PL1                        ) = 25                      ! Type
   prim.ref (                       $P_PL1                        ) = $G_Body_LS.$M_PL1_ref   ! Reference Marker
   prim.color.r (         1 ,       $P_PL1                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL1                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL1                        ) = 2.5500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL1                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL1                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL1                        ) = $G_LS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_PL1                        ) = $G_LS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL1                        ) = $G_LS.$_x_planet        ! [-] Shift factor
   prim.par (             8 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL1                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL1                        ) = $G_LS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_PL1                        ) = $G_LS.$_z_planet        ! [-] Number of teeth
   prim.par (            19 ,       $P_PL1                        ) = $G_LS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_PL1                        ) = { 400 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL1                        ) = $G_LS.$_z_planet        ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL1                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL2                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL2                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL2                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL2                        ) = -1.0000000000000000E+02
   body.attr.2d.pos.y (             $B_PL2                        ) = -3.6000000000000000E+02
   body.attr.2d.width (             $B_PL2                        ) = 1.2000000000000000E+02
   body.attr.2d.height (            $B_PL2                        ) = 7.0000000000000000E+01

   marker.type (                    $M_PL2_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL2_BRF                    ) = $G_Body_LS.$B_PL2       ! Body
   marker.flx.type (                $M_PL2_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL2_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL2_ref                    ) = $G_Body_LS.$B_PL2       ! Body
   marker.ang (           2 ,       $M_PL2_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL2                        ) = $G_Body_LS.$M_Pin2_PL   ! From Marker
   joint.to (                       $J_PL2                        ) = $G_Body_LS.$M_PL2_BRF   ! To Marker
   joint.type (                     $J_PL2                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL2                        ) = -20
   joint.attr.2d.pos.y (   1 ,      $J_PL2                        ) = -90
   joint.attr.2d.ori (    1 ,       $J_PL2                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL2          ) = 90, 90, 20.25, 20.25, 20.25, 20.25, -3
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL2          ) = -270, -188.28125, -188.28125, -164.375, -132.5, -90, -90
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL2            ) = -40, -40, -37
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL2            ) = -290, -90, -90

   prim.type (                      $P_PL2                        ) = 25                      ! Type
   prim.ref (                       $P_PL2                        ) = $G_Body_LS.$M_PL2_ref   ! Reference Marker
   prim.color.r (         1 ,       $P_PL2                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL2                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL2                        ) = 2.5500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL2                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL2                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL2                        ) = { 7 deg }               ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL2                        ) = $G_LS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_PL2                        ) = $G_LS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL2                        ) = $G_LS.$_x_planet        ! [-] Shift factor
   prim.par (             8 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL2                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL2                        ) = $G_LS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_PL2                        ) = $G_LS.$_z_planet        ! [-] Number of teeth
   prim.par (            19 ,       $P_PL2                        ) = $G_LS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_PL2                        ) = { 400 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL2                        ) = $G_LS.$_z_planet        ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL2                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL3                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL3                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL3                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL3                        ) = -3.0000000000000000E+01
   body.attr.2d.pos.y (             $B_PL3                        ) = 2.3000000000000000E+02
   body.attr.2d.width (             $B_PL3                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PL3                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PL3_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL3_BRF                    ) = $G_Body_LS.$B_PL3       ! Body
   marker.flx.type (                $M_PL3_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL3_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL3_ref                    ) = $G_Body_LS.$B_PL3       ! Body
   marker.ang (           2 ,       $M_PL3_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL3                        ) = $G_Body_LS.$M_Pin3_PL   ! From Marker
   joint.to (                       $J_PL3                        ) = $G_Body_LS.$M_PL3_BRF   ! To Marker
   joint.type (                     $J_PL3                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL3                        ) = -20
   joint.attr.2d.pos.y (   1 ,      $J_PL3                        ) = 50
   joint.attr.2d.ori (    1 ,       $J_PL3                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL3          ) = 80, 51.75, 51.75, -3
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL3          ) = 160, 160, 50, 50
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL3            ) = -30, -40, -40, -37
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL3            ) = 240, 240, 50, 50

   prim.type (                      $P_PL3                        ) = 25                      ! Type
   prim.ref (                       $P_PL3                        ) = $G_Body_LS.$M_PL3_ref   ! Reference Marker
   prim.color.r (         1 ,       $P_PL3                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL3                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL3                        ) = 2.5500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL3                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL3                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL3                        ) = { -7 deg }              ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL3                        ) = $G_LS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_PL3                        ) = $G_LS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL3                        ) = $G_LS.$_x_planet        ! [-] Shift factor
   prim.par (             8 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL3                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL3                        ) = $G_LS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_PL3                        ) = $G_LS.$_z_planet        ! [-] Number of teeth
   prim.par (            19 ,       $P_PL3                        ) = $G_LS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_PL3                        ) = { 400 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL3                        ) = $G_LS.$_z_planet        ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL3                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_Ring                       ) = 2.5000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Ring                       ) = 6.0000000000000000E+02
   body.attr.2d.pos.y (             $B_Ring                       ) = -4.0000000000000000E+01
   body.attr.2d.width (             $B_Ring                       ) = 8.0000000000000000E+01
   body.attr.2d.height (            $B_Ring                       ) = 6.0000000000000000E+01

   marker.type (                    $M_Ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Ring_BRF                   ) = $G_Body_LS.$B_Ring      ! Body
   marker.flx.type (                $M_Ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Ring_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Ring_ref                   ) = $G_Body_LS.$B_Ring      ! Body
   marker.ang (           2 ,       $M_Ring_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Ring                       ) = $M_Gearbox_Frame_BRF    ! From Marker
   joint.to (                       $J_Ring                       ) = $G_Body_LS.$M_Ring_BRF  ! To Marker
   joint.type (                     $J_Ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Ring                       ) = 190
   joint.attr.2d.pos.y (   1 ,      $J_Ring                       ) = -20
   joint.attr.2d.ori (    1 ,       $J_Ring                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Ring         ) = 80, 152.25, 152.25, 173
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Ring         ) = 100, 100, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Ring           ) = 600, 590, 590, 578.96875, 545.875, 413.5, 237, 237, 237, 237, 237, 227, 217, 207
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Ring           ) = -30, -30, -65, -65, -65, -65, -65, -50, -40, -30, -20, -20, -20, -20

   prim.type (                      $P_Ring                       ) = 25                      ! Type
   prim.ref (                       $P_Ring                       ) = $G_Body_LS.$M_Ring_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (red component)
   prim.color.r (         2 ,       $P_Ring                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.g (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Ring                       ) = 2.5500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Ring                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Ring                       ) = 2.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Ring                       ) = $G_LS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_Ring                       ) = $G_LS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Ring                       ) = $G_LS.$_x_ring          ! [-] Shift factor
   prim.par (             8 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_Ring                       ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Ring                       ) = $G_LS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_Ring                       ) = $G_LS.$_z_ring          ! [-] Number of teeth
   prim.par (            19 ,       $P_Ring                       ) = $G_LS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_Ring                       ) = { 400 mm }              ! [m] Ring Diameter
   prim.par (            25 ,       $P_Ring                       ) = $G_LS.$_z_ring          ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Ring                       ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Ring discretisation per tooth
   prim.par (            38 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_Pin1                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin1                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin1                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin1                       ) = 5.5000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin1                       ) = -3.1000000000000000E+02
   body.attr.2d.width (             $B_Pin1                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin1                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin1_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin1_BRF                   ) = $G_Body_LS.$B_Pin1      ! Body
   marker.flx.type (                $M_Pin1_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin1_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin1_PL                    ) = $G_Body_LS.$B_Pin1      ! Body

   marker.type (                    $M_Pin1_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_A             ) = $G_Body_LS.$B_Pin1      ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_A             ) = { -382 mm }             ! Position

   marker.type (                    $M_Pin1_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_B             ) = $G_Body_LS.$B_Pin1      ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_B             ) = { 382 mm }              ! Position

   joint.from (                     $J_Pin1                       ) = $G_Body_LS.$M_PLC_Pin1  ! From Marker
   joint.to (                       $J_Pin1                       ) = $G_Body_LS.$M_Pin1_BRF  ! To Marker
   joint.type (                     $J_Pin1                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin1                       ) = 380
   joint.attr.2d.pos.y (   1 ,      $J_Pin1                       ) = -220
   joint.attr.2d.ori (    1 ,       $J_Pin1                       ) = 270
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin1         ) = 460, 460, 450, 440, 430, 405, 405, 405, 380, 380, 380
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin1         ) = -40, -107.3125, -107.3125, -107.3125, -107.3125, -107.3125, -139.75, -183, -183, -193, -203
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin1           ) = 550, 380, 380, 380, 380, 380
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin1           ) = -300, -300, -290, -280, -270, -237

   prim.type (                      $P_Pin1                       ) = 2                       ! Type
   prim.ref (                       $P_Pin1                       ) = $G_Body_LS.$M_Pin1_BRF  ! Reference Marker
   prim.ang (             3 ,       $P_Pin1                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin1                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin1                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin1                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin1                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin1                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin1                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin1                       ) = { 400 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin1                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


   body.m (                         $B_Pin2                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin2                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin2                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin2                       ) = 8.0000000000000000E+01
   body.attr.2d.pos.y (             $B_Pin2                       ) = -3.0000000000000000E+02
   body.attr.2d.width (             $B_Pin2                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin2                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin2_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin2_BRF                   ) = $G_Body_LS.$B_Pin2      ! Body
   marker.flx.type (                $M_Pin2_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin2_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin2_PL                    ) = $G_Body_LS.$B_Pin2      ! Body

   marker.type (                    $M_Pin2_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_A             ) = $G_Body_LS.$B_Pin2      ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_A             ) = { -382 mm }             ! Position

   marker.type (                    $M_Pin2_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_B             ) = $G_Body_LS.$B_Pin2      ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_B             ) = { 382 mm }              ! Position

   joint.from (                     $J_Pin2                       ) = $G_Body_LS.$M_PLC_Pin2  ! From Marker
   joint.to (                       $J_Pin2                       ) = $G_Body_LS.$M_Pin2_BRF  ! To Marker
   joint.type (                     $J_Pin2                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin2                       ) = 40
   joint.attr.2d.pos.y (   1 ,      $J_Pin2                       ) = -100
   joint.attr.2d.ori (    1 ,       $J_Pin2                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin2         ) = 450, 450, 288.265625, 288.265625, 288.265625, 237.6875, 170.25, 170.25, 170.25, 160.25, 160.25, 150.25, 57
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin2         ) = 20, 30, 30, 20, 10, 10, 10, 0, -10, -10, -100, -100, -100
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin2           ) = 100, 100, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 23
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin2           ) = -270, -260, -260, -255.25390625, -241.015625, -222.03125, -209.375, -192.5, -170, -140, -100, -100

   prim.type (                      $P_Pin2                       ) = 2                       ! Type
   prim.ref (                       $P_Pin2                       ) = $G_Body_LS.$M_Pin2_BRF  ! Reference Marker
   prim.ang (             3 ,       $P_Pin2                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin2                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin2                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin2                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin2                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin2                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin2                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin2                       ) = { 400 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin2                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


   body.m (                         $B_Pin3                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin3                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin3                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin3                       ) = 8.0000000000000000E+01
   body.attr.2d.pos.y (             $B_Pin3                       ) = 1.5000000000000000E+02
   body.attr.2d.width (             $B_Pin3                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin3                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin3_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin3_BRF                   ) = $G_Body_LS.$B_Pin3      ! Body
   marker.flx.type (                $M_Pin3_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin3_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin3_PL                    ) = $G_Body_LS.$B_Pin3      ! Body

   marker.type (                    $M_Pin3_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_A             ) = $G_Body_LS.$B_Pin3      ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_A             ) = { -382 mm }             ! Position

   marker.type (                    $M_Pin3_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_B             ) = $G_Body_LS.$B_Pin3      ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_B             ) = { 382 mm }              ! Position

   joint.from (                     $J_Pin3                       ) = $G_Body_LS.$M_PLC_Pin3  ! From Marker
   joint.to (                       $J_Pin3                       ) = $G_Body_LS.$M_Pin3_BRF  ! To Marker
   joint.type (                     $J_Pin3                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin3                       ) = 130
   joint.attr.2d.pos.y (   1 ,      $J_Pin3                       ) = 60
   joint.attr.2d.ori (    1 ,       $J_Pin3                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin3         ) = 460, 460, 283.9375, 283.9375, 225.25, 147
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin3         ) = 20, 82.5, 82.5, 60, 60, 60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin3           ) = 110, 110, 113
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin3           ) = 150, 60, 60

   prim.type (                      $P_Pin3                       ) = 2                       ! Type
   prim.ref (                       $P_Pin3                       ) = $G_Body_LS.$M_Pin3_BRF  ! Reference Marker
   prim.ang (             3 ,       $P_Pin3                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin3                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin3                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin3                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin3                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin3                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin3                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin3                       ) = { 400 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin3                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


bodygroup.end (                     $G_Body_LS                    )                           ! $G_Body_LS

bodygroup.begin (                   $G_Body_IMS                   )                           ! $G_Body_IMS
   body.m (                         $B_PLC                        ) = 2.5000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PLC                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PLC                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PLC                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PLC                        ) = 7.7000000000000000E+02
   body.attr.2d.pos.y (             $B_PLC                        ) = -1.0000000000000000E+02
   body.attr.2d.width (             $B_PLC                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PLC                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PLC_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PLC_BRF                    ) = $G_Body_IMS.$B_PLC      ! Body
   marker.flx.type (                $M_PLC_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PLC_Pin1_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin1_ref               ) = $G_Body_IMS.$B_PLC      ! Body

   marker.type (                    $M_PLC_Pin2_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin2_ref               ) = $G_Body_IMS.$B_PLC      ! Body
   marker.ang (           1 ,       $M_PLC_Pin2_ref               ) = { 120 deg }             ! Angles
   marker.ang (           2 ,       $M_PLC_Pin2_ref               ) = 0.0000000000000000E+00  ! Angles
   marker.ang (           3 ,       $M_PLC_Pin2_ref               ) = 0.0000000000000000E+00  ! Angles

   marker.type (                    $M_PLC_Pin3_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin3_ref               ) = $G_Body_IMS.$B_PLC      ! Body
   marker.ang (           1 ,       $M_PLC_Pin3_ref               ) = { 240 deg }             ! Angles

   marker.type (                    $M_PLC_Pin1                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1                   ) = $G_Body_IMS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1                   ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin1                   ) = 0.0000000000000000E+00  ! Position
   marker.pos (           3 ,       $M_PLC_Pin1                   ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_A         ) = $G_Body_IMS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_A         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_A         ) = { -345 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_A         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_B         ) = $G_Body_IMS.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_B         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_B         ) = { 345 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_B         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin2                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2                   ) = $G_Body_IMS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2                   ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           3 ,       $M_PLC_Pin2                   ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_A         ) = $G_Body_IMS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_A         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_A         ) = { -345 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_A         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_B         ) = $G_Body_IMS.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_B         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_B         ) = { 345 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_B         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin3                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3                   ) = $G_Body_IMS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3                   ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin3                   ) = 0.0000000000000000E+00  ! Position
   marker.pos (           3 ,       $M_PLC_Pin3                   ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_A         ) = $G_Body_IMS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_A         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_A         ) = { -345 mm }             ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_A         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_B         ) = $G_Body_IMS.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_B         ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_B         ) = { 345 mm }              ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_B         ) = { 584 mm }              ! Position

   marker.type (                    $M_PLC_IMS_PLC_A              ) = 2                       ! Type
   marker.parent (                  $M_PLC_IMS_PLC_A              ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_IMS_PLC_A              ) = -5.0000000000000000E-01 ! Position

   marker.type (                    $M_PLC_IMS_PLC_B              ) = 2                       ! Type
   marker.parent (                  $M_PLC_IMS_PLC_B              ) = $G_Body_IMS.$B_PLC      ! Body
   marker.pos (           1 ,       $M_PLC_IMS_PLC_B              ) = 5.0000000000000000E-01  ! Position

   joint.from (                     $J_PLC                        ) = $M_SHAFT_LS_IMS_PLC     ! From Marker
   joint.to (                       $J_PLC                        ) = $G_Body_IMS.$M_PLC_BRF  ! To Marker
   joint.type (                     $J_PLC                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PLC                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PLC                        ) = 960
   joint.attr.2d.pos.y (   1 ,      $J_PLC                        ) = -140
   joint.attr.2d.ori (    1 ,       $J_PLC                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PLC          ) = 700, 700, 943
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PLC          ) = -130, -140, -140
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PLC            ) = 820, 830, 830, 833.9294319152832, 845.7177276611328, 861.4354553222656, 871.9139404296875, 885.88525390625, 904.513671875, 929.3515625, 962.46875, 1006.625, 1065.5, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 977
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PLC            ) = -80, -80, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -60, -70, -80, -90, -100, -110, -125, -140, -140

   prim.type (                      $P_PLC                        ) = 2                       ! Type
   prim.ref (                       $P_PLC                        ) = $G_Body_IMS.$M_PLC_BRF  ! Reference Marker
   prim.ang (             3 ,       $P_PLC                        ) = { -90 deg }             ! Angles
   prim.color.r (         1 ,       $P_PLC                        ) = 1.2600000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PLC                        ) = 1.9100000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PLC                        ) = 1.2800000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PLC                        ) = 1.0000000000000000E+01  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.transparency (              $P_PLC                        ) = 5.0000000000000000E-01  ! Transparency
   prim.mp.dens.solid (             $P_PLC                        ) = { 7850/2 }              ! Density
   prim.par (             2 ,       $P_PLC                        ) = { 500 mm }              ! [m] Height
   prim.par (             3 ,       $P_PLC                        ) = { 1500 mm }             ! [m] Outer diameter
   prim.par (             4 ,       $P_PLC                        ) = { 900 mm }              ! [m] Inner diameter
   prim.par (             5 ,       $P_PLC                        ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_PLC                        ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_PLC                        ) = 0.0000000000000000E+00  ! [rad] Start angle


   body.m (                         $B_Sun                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Sun                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Sun                        ) = 1.5600000000000000E+03
   body.attr.2d.pos.y (             $B_Sun                        ) = -1.8000000000000000E+02
   body.attr.2d.width (             $B_Sun                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Sun                        ) = 3.0000000000000000E+01

   marker.type (                    $M_Sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_Sun_BRF                    ) = $G_Body_IMS.$B_Sun      ! Body
   marker.flx.type (                $M_Sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_Sun_ref                    ) = 2                       ! Type
   marker.parent (                  $M_Sun_ref                    ) = $G_Body_IMS.$B_Sun      ! Body
   marker.ang (           2 ,       $M_Sun_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_Sun                        ) = $M_SHAFT_IMS_HS_IMS_SUN ! From Marker
   joint.to (                       $J_Sun                        ) = $G_Body_IMS.$M_Sun_BRF  ! To Marker
   joint.type (                     $J_Sun                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Sun                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Sun                        ) = 1100
   joint.attr.2d.pos.y (   1 ,      $J_Sun                        ) = -120
   joint.attr.2d.ori (    1 ,       $J_Sun                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Sun          ) = 500, 500, 583.25, 583.25, 583.25, 833, 833, 843, 853, 863, 873, 883, 893, 903, 913, 923, 933, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1033, 1033, 1043, 1053, 1053, 1063, 1073, 1083
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Sun          ) = -60, -80, -80, -70, -60, -60, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -80, -70, -70, -70, -120, -120, -120, -120
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Sun            ) = 1570, 1570, 1147, 1147, 1137, 1127, 1117
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Sun            ) = -150, -110, -110, -120, -120, -120, -120

   prim.type (                      $P_Sun                        ) = 25                      ! Type
   prim.ref (                       $P_Sun                        ) = $G_Body_IMS.$M_Sun_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Sun                        ) = 2.5500000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Sun                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Sun                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Sun                        ) = { 10 deg }              ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Sun                        ) = $G_IMS.$_mn             ! [m] Normal module
   prim.par (             6 ,       $P_Sun                        ) = $G_IMS.$_alpha          ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Sun                        ) = $G_IMS.$_x_sun          ! [-] Shift factor
   prim.par (             8 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_Sun                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Sun                        ) = $G_IMS.$_Norm_Backlash  ! [m] Normal backlash
   prim.par (            18 ,       $P_Sun                        ) = $G_IMS.$_z_sun          ! [-] Number of teeth
   prim.par (            19 ,       $P_Sun                        ) = $G_IMS.$_b              ! [m] Flank width
   prim.par (            20 ,       $P_Sun                        ) = { 200 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_Sun                        ) = $G_IMS.$_z_sun          ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Sun                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_Sun                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Sun                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL1                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL1                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL1                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL1                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL1                        ) = 1.3700000000000000E+03
   body.attr.2d.pos.y (             $B_PL1                        ) = -1.6000000000000000E+02
   body.attr.2d.width (             $B_PL1                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PL1                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PL1_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL1_BRF                    ) = $G_Body_IMS.$B_PL1      ! Body
   marker.flx.type (                $M_PL1_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL1_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL1_ref                    ) = $G_Body_IMS.$B_PL1      ! Body
   marker.ang (           2 ,       $M_PL1_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL1                        ) = $G_Body_IMS.$M_Pin1_PL  ! From Marker
   joint.to (                       $J_PL1                        ) = $G_Body_IMS.$M_PL1_BRF  ! To Marker
   joint.type (                     $J_PL1                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL1                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL1                        ) = 1680
   joint.attr.2d.pos.y (   1 ,      $J_PL1                        ) = -190
   joint.attr.2d.ori (    1 ,       $J_PL1                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL1          ) = 1500, 1500, 1663
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL1          ) = -170, -190, -190
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL1            ) = 1410, 1410, 1707, 1707, 1697
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL1            ) = -160, -210, -210, -190, -190

   prim.type (                      $P_PL1                        ) = 25                      ! Type
   prim.ref (                       $P_PL1                        ) = $G_Body_IMS.$M_PL1_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_PL1                        ) = 2.3800000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL1                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL1                        ) = 9.2000000000000000E+01  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL1                        ) = 6.6000000000000000E+01  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL1                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL1                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL1                        ) = $G_IMS.$_mn             ! [m] Normal module
   prim.par (             6 ,       $P_PL1                        ) = $G_IMS.$_alpha          ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL1                        ) = $G_IMS.$_x_planet       ! [-] Shift factor
   prim.par (             8 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL1                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL1                        ) = $G_IMS.$_Norm_Backlash  ! [m] Normal backlash
   prim.par (            18 ,       $P_PL1                        ) = $G_IMS.$_z_planet       ! [-] Number of teeth
   prim.par (            19 ,       $P_PL1                        ) = $G_IMS.$_b              ! [m] Flank width
   prim.par (            20 ,       $P_PL1                        ) = { 380 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL1                        ) = $G_IMS.$_z_planet       ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL1                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL1                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL1                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL2                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL2                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL2                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL2                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL2                        ) = 8.2000000000000000E+02
   body.attr.2d.pos.y (             $B_PL2                        ) = -3.3000000000000000E+02
   body.attr.2d.width (             $B_PL2                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PL2                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PL2_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL2_BRF                    ) = $G_Body_IMS.$B_PL2      ! Body
   marker.flx.type (                $M_PL2_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL2_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL2_ref                    ) = $G_Body_IMS.$B_PL2      ! Body
   marker.ang (           2 ,       $M_PL2_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL2                        ) = $G_Body_IMS.$M_Pin2_PL  ! From Marker
   joint.to (                       $J_PL2                        ) = $G_Body_IMS.$M_PL2_BRF  ! To Marker
   joint.type (                     $J_PL2                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL2                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL2                        ) = 500
   joint.attr.2d.pos.y (   1 ,      $J_PL2                        ) = -210
   joint.attr.2d.ori (    1 ,       $J_PL2                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL2          ) = 910, 527, 527, 527, 527, 517
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL2          ) = -350, -350, -340, -330, -210, -210
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL2            ) = 820, 473, 473, 473, 473, 473, 483
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL2            ) = -320, -320, -310, -300, -290, -210, -210

   prim.type (                      $P_PL2                        ) = 25                      ! Type
   prim.ref (                       $P_PL2                        ) = $G_Body_IMS.$M_PL2_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_PL2                        ) = 2.3800000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL2                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL2                        ) = 9.2000000000000000E+01  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL2                        ) = 6.6000000000000000E+01  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL2                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL2                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL2                        ) = $G_IMS.$_mn             ! [m] Normal module
   prim.par (             6 ,       $P_PL2                        ) = $G_IMS.$_alpha          ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL2                        ) = $G_IMS.$_x_planet       ! [-] Shift factor
   prim.par (             8 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL2                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL2                        ) = $G_IMS.$_Norm_Backlash  ! [m] Normal backlash
   prim.par (            18 ,       $P_PL2                        ) = $G_IMS.$_z_planet       ! [-] Number of teeth
   prim.par (            19 ,       $P_PL2                        ) = $G_IMS.$_b              ! [m] Flank width
   prim.par (            20 ,       $P_PL2                        ) = { 380 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL2                        ) = $G_IMS.$_z_planet       ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL2                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL2                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL2                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_PL3                        ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_PL3                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL3                        ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_PL3                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL3                        ) = 2.2000000000000000E+02
   body.attr.2d.pos.y (             $B_PL3                        ) = 2.0000000000000000E+01
   body.attr.2d.width (             $B_PL3                        ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_PL3                        ) = 3.0000000000000000E+01

   marker.type (                    $M_PL3_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL3_BRF                    ) = $G_Body_IMS.$B_PL3      ! Body
   marker.flx.type (                $M_PL3_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL3_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL3_ref                    ) = $G_Body_IMS.$B_PL3      ! Body
   marker.ang (           2 ,       $M_PL3_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL3                        ) = $G_Body_IMS.$M_Pin3_PL  ! From Marker
   joint.to (                       $J_PL3                        ) = $G_Body_IMS.$M_PL3_BRF  ! To Marker
   joint.type (                     $J_PL3                        ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_PL3                        ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL3                        ) = 420
   joint.attr.2d.pos.y (   1 ,      $J_PL3                        ) = 60
   joint.attr.2d.ori (    1 ,       $J_PL3                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_PL3          ) = 370, 403
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_PL3          ) = 60, 60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_PL3            ) = 270, 476.25, 476.25, 476.25, 437
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_PL3            ) = 30, 30, 40, 60, 60

   prim.type (                      $P_PL3                        ) = 25                      ! Type
   prim.ref (                       $P_PL3                        ) = $G_Body_IMS.$M_PL3_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_PL3                        ) = 2.3800000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_PL3                        ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_PL3                        ) = 9.2000000000000000E+01  ! Colors (green component)
   prim.color.g (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_PL3                        ) = 6.6000000000000000E+01  ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL3                        ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_PL3                        ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_PL3                        ) = $G_IMS.$_mn             ! [m] Normal module
   prim.par (             6 ,       $P_PL3                        ) = $G_IMS.$_alpha          ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_PL3                        ) = $G_IMS.$_x_planet       ! [-] Shift factor
   prim.par (             8 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_PL3                        ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_PL3                        ) = $G_IMS.$_Norm_Backlash  ! [m] Normal backlash
   prim.par (            18 ,       $P_PL3                        ) = $G_IMS.$_z_planet       ! [-] Number of teeth
   prim.par (            19 ,       $P_PL3                        ) = $G_IMS.$_b              ! [m] Flank width
   prim.par (            20 ,       $P_PL3                        ) = { 380 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_PL3                        ) = $G_IMS.$_z_planet       ! [-] Number of visible teeth
   prim.par (            26 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_PL3                        ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_PL3                        ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_PL3                        ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_Ring                       ) = 2.5000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Ring                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Ring                       ) = 8.7000000000000000E+02
   body.attr.2d.pos.y (             $B_Ring                       ) = -1.1000000000000000E+02
   body.attr.2d.width (             $B_Ring                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Ring                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Ring_BRF                   ) = $G_Body_IMS.$B_Ring     ! Body
   marker.flx.type (                $M_Ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Ring_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Ring_ref                   ) = $G_Body_IMS.$B_Ring     ! Body
   marker.ang (           2 ,       $M_Ring_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Ring                       ) = $M_Gearbox_Frame_IMS    ! From Marker
   joint.to (                       $J_Ring                       ) = $G_Body_IMS.$M_Ring_BRF ! To Marker
   joint.type (                     $J_Ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Ring                       ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Ring                       ) = 550
   joint.attr.2d.pos.y (   1 ,      $J_Ring                       ) = -110
   joint.attr.2d.ori (    1 ,       $J_Ring                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Ring         ) = -10, -10, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473, 483, 493, 503, 513, 513, 523, 533
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Ring         ) = 30, 6.2890625, 6.2890625, -34.84375, -34.84375, -34.84375, -34.84375, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -110, -110, -110
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Ring           ) = 880, 880, 597, 597, 597, 597, 597, 597, 587, 577, 567
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Ring           ) = -80, -60, -60, -70, -80, -90, -100, -110, -110, -110, -110

   prim.type (                      $P_Ring                       ) = 25                      ! Type
   prim.ref (                       $P_Ring                       ) = $G_Body_IMS.$M_Ring_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (red component)
   prim.color.r (         2 ,       $P_Ring                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Ring                       ) = 2.5500000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Ring                       ) = 1.2700000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Ring                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Ring                       ) = 2.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Ring                       ) = $G_IMS.$_mn             ! [m] Normal module
   prim.par (             6 ,       $P_Ring                       ) = $G_IMS.$_alpha          ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Ring                       ) = $G_IMS.$_x_ring         ! [-] Shift factor
   prim.par (             8 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Helix angle
   prim.par (             9 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Addendum coefficient
   prim.par (            13 ,       $P_Ring                       ) = 1.2500000000000000E+00  ! [-] Dedendum coefficient
   prim.par (            15 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Ring                       ) = $G_IMS.$_Norm_Backlash  ! [m] Normal backlash
   prim.par (            18 ,       $P_Ring                       ) = $G_IMS.$_z_ring         ! [-] Number of teeth
   prim.par (            19 ,       $P_Ring                       ) = $G_IMS.$_b              ! [m] Flank width
   prim.par (            20 ,       $P_Ring                       ) = { 400 mm }              ! [m] Ring Diameter
   prim.par (            25 ,       $P_Ring                       ) = $G_IMS.$_z_ring         ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Ring                       ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Ring discretisation per tooth
   prim.par (            38 ,       $P_Ring                       ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Ring                       ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_Pin1                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin1                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin1                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin1                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin1                       ) = 1.4600000000000000E+03
   body.attr.2d.pos.y (             $B_Pin1                       ) = -1.7000000000000000E+02
   body.attr.2d.width (             $B_Pin1                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin1                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin1_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin1_BRF                   ) = $G_Body_IMS.$B_Pin1     ! Body
   marker.flx.type (                $M_Pin1_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin1_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin1_PL                    ) = $G_Body_IMS.$B_Pin1     ! Body

   marker.type (                    $M_Pin1_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_A             ) = $G_Body_IMS.$B_Pin1     ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_A             ) = { -345mm }              ! Position

   marker.type (                    $M_Pin1_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_B             ) = $G_Body_IMS.$B_Pin1     ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_B             ) = { 345 mm }              ! Position

   joint.from (                     $J_Pin1                       ) = $G_Body_IMS.$M_PLC_Pin1 ! From Marker
   joint.to (                       $J_Pin1                       ) = $G_Body_IMS.$M_Pin1_BRF ! To Marker
   joint.type (                     $J_Pin1                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin1                       ) = 1030
   joint.attr.2d.pos.y (   1 ,      $J_Pin1                       ) = -120
   joint.attr.2d.ori (    1 ,       $J_Pin1                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin1         ) = 810, 810, 1013
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin1         ) = -100, -120, -120
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin1           ) = 1470, 1470, 1077, 1077, 1077, 1067, 1057, 1047
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin1           ) = -140, -100, -100, -110, -120, -120, -120, -120

   prim.type (                      $P_Pin1                       ) = 2                       ! Type
   prim.ref (                       $P_Pin1                       ) = $G_Body_IMS.$M_Pin1_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin1                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin1                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin1                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin1                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin1                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin1                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin1                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin1                       ) = { 380 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin1                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin1                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin1                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


   body.m (                         $B_Pin2                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin2                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin2                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin2                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin2                       ) = 9.1000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin2                       ) = -3.7000000000000000E+02
   body.attr.2d.width (             $B_Pin2                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin2                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin2_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin2_BRF                   ) = $G_Body_IMS.$B_Pin2     ! Body
   marker.flx.type (                $M_Pin2_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin2_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin2_PL                    ) = $G_Body_IMS.$B_Pin2     ! Body

   marker.type (                    $M_Pin2_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_A             ) = $G_Body_IMS.$B_Pin2     ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_A             ) = { -345 mm }             ! Position

   marker.type (                    $M_Pin2_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_B             ) = $G_Body_IMS.$B_Pin2     ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_B             ) = { 345 mm }              ! Position

   joint.from (                     $J_Pin2                       ) = $G_Body_IMS.$M_PLC_Pin2 ! From Marker
   joint.to (                       $J_Pin2                       ) = $G_Body_IMS.$M_Pin2_BRF ! To Marker
   joint.type (                     $J_Pin2                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin2                       ) = 650
   joint.attr.2d.pos.y (   1 ,      $J_Pin2                       ) = -170
   joint.attr.2d.ori (    1 ,       $J_Pin2                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin2         ) = 780, 780, 667
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin2         ) = -100, -170, -170
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin2           ) = 910, 631.25, 631.25, 631.25, 631.25, 631.25, 621.25, 611.25, 601.25, 591.25, 581.25, 571.25, 561.25, 561.25, 633
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin2           ) = -360, -360, -350, -340, -330, -180, -180, -180, -180, -180, -180, -180, -180, -170, -170

   prim.type (                      $P_Pin2                       ) = 2                       ! Type
   prim.ref (                       $P_Pin2                       ) = $G_Body_IMS.$M_Pin2_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin2                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin2                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin2                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin2                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin2                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin2                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin2                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin2                       ) = { 380 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin2                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin2                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin2                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


   body.m (                         $B_Pin3                       ) = 1.0000000000000000E+00  ! Mass of the Body
   body.mp (                        $B_Pin3                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin3                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pin3                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin3                       ) = 3.2000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin3                       ) = 4.0000000000000000E+01
   body.attr.2d.width (             $B_Pin3                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pin3                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Pin3_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin3_BRF                   ) = $G_Body_IMS.$B_Pin3     ! Body
   marker.flx.type (                $M_Pin3_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin3_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin3_PL                    ) = $G_Body_IMS.$B_Pin3     ! Body

   marker.type (                    $M_Pin3_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_A             ) = $G_Body_IMS.$B_Pin3     ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_A             ) = { -345 mm }             ! Position

   marker.type (                    $M_Pin3_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_B             ) = $G_Body_IMS.$B_Pin3     ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_B             ) = { 345 mm }              ! Position

   joint.from (                     $J_Pin3                       ) = $G_Body_IMS.$M_PLC_Pin3 ! From Marker
   joint.to (                       $J_Pin3                       ) = $G_Body_IMS.$M_Pin3_BRF ! To Marker
   joint.type (                     $J_Pin3                       ) = 20                      ! Type
   joint.attr.2d.pos.x (   1 ,      $J_Pin3                       ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_Pin3                       ) = 0
   joint.attr.2d.ori (    1 ,       $J_Pin3                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pin3         ) = 780, 780, 587, 587, 587, 587, 587, 587, 577
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pin3         ) = -70, -60, -60, -55.78125, -43.125, -26.25, -15, 0, 0
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pin3           ) = 360, 360, 533, 533, 533, 533, 543
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pin3           ) = 40, 30, 30, 26.25, 15, 0, 0

   prim.type (                      $P_Pin3                       ) = 2                       ! Type
   prim.ref (                       $P_Pin3                       ) = $G_Body_IMS.$M_Pin3_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin3                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin3                       ) = 1.3500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin3                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin3                       ) = 2.0600000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin3                       ) = 2.3500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin3                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pin3                       ) = { 800 mm }              ! [m] Height
   prim.par (             3 ,       $P_Pin3                       ) = { 380 mm }              ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin3                       ) = 2.0000000000000000E+01  ! [-] Number of planes
   prim.par (             6 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin3                       ) = 1.0000000000000000E+00  ! [-] Show top cap
   prim.par (             9 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [rad] Start angle
   prim.par (            10 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin3                       ) = 0.0000000000000000E+00  ! [-] Close geometry with


bodygroup.end (                     $G_Body_IMS                   )                           ! $G_Body_IMS

bodygroup.begin (                   $G_Body_HS                    )                           ! $G_Body_HS
   body.m (                         $B_Pinion                     ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Pinion                     ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pinion                     ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pinion                     ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pinion                     ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Pinion                     ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pinion                     ) = 7.2000000000000000E+02
   body.attr.2d.pos.y (             $B_Pinion                     ) = -3.0000000000000000E+02
   body.attr.2d.width (             $B_Pinion                     ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Pinion                     ) = 3.0000000000000000E+01

   marker.type (                    $M_Pinion_BRF                 ) = 1                       ! Type
   marker.parent (                  $M_Pinion_BRF                 ) = $G_Body_HS.$B_Pinion    ! Body
   marker.flx.type (                $M_Pinion_BRF                 ) = 4                       ! Flexible type

   marker.type (                    $M_Pinion_ref                 ) = 2                       ! Type
   marker.parent (                  $M_Pinion_ref                 ) = $G_Body_HS.$B_Pinion    ! Body
   marker.ang (           2 ,       $M_Pinion_ref                 ) = { 90 deg }              ! Angles

   joint.from (                     $J_Pinion                     ) = $M_SHAFT_Gen_BRF        ! From Marker
   joint.to (                       $J_Pinion                     ) = $G_Body_HS.$M_Pinion_BRF ! To Marker
   joint.type (                     $J_Pinion                     ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Pinion                     ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Pinion                     ) = 660
   joint.attr.2d.pos.y (   1 ,      $J_Pinion                     ) = -260
   joint.attr.2d.ori (    1 ,       $J_Pinion                     ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Pinion       ) = 580, 580, 643
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Pinion       ) = -230, -260, -260
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Pinion         ) = 730, 730, 677
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Pinion         ) = -270, -260, -260

   prim.type (                      $P_Pinion                     ) = 25                      ! Type
   prim.ref (                       $P_Pinion                     ) = $G_Body_HS.$M_Pinion_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Pinion                     ) = 2.0500000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Pinion                     ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Pinion                     ) = 1.5000000000000000E+02  ! Colors (green component)
   prim.color.g (         2 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Pinion                     ) = 2.0500000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pinion                     ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Pinion                     ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Pinion                     ) = { -4 deg }              ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Pinion                     ) = $G_HS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_Pinion                     ) = $G_HS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Pinion                     ) = $G_HS.$_x_pinion        ! [-] Shift factor
   prim.par (             8 ,       $P_Pinion                     ) = $G_HS.$_helix           ! [rad] Helix angle
   prim.par (             9 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Pinion                     ) = 2.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Pinion                     ) = { 380.751 mm }          ! [m] Addendum diameter
   prim.par (            13 ,       $P_Pinion                     ) = { 319.627 mm }          ! [m] Dedendum diameter
   prim.par (            15 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Pinion                     ) = $G_HS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_Pinion                     ) = $G_HS.$_z_pinion        ! [-] Number of teeth
   prim.par (            19 ,       $P_Pinion                     ) = $G_HS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_Pinion                     ) = { 200 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_Pinion                     ) = $G_HS.$_z_pinion        ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Pinion                     ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_Pinion                     ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Pinion                     ) = 0.0000000000000000E+00  ! [-] R flank mod


   body.m (                         $B_Gear                       ) = 1.0000000000000000E+03  ! Mass of the Body
   body.mp (                        $B_Gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Gear                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Gear                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Gear                       ) = 1.0000000000000000E+00  ! Moments of inertia
   body.I.kind (                    $B_Gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Gear                       ) = 9.7000000000000000E+02
   body.attr.2d.pos.y (             $B_Gear                       ) = -8.0000000000000000E+01
   body.attr.2d.width (             $B_Gear                       ) = 5.0000000000000000E+01
   body.attr.2d.height (            $B_Gear                       ) = 3.0000000000000000E+01

   marker.type (                    $M_Gear_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Gear_BRF                   ) = $G_Body_HS.$B_Gear      ! Body
   marker.flx.type (                $M_Gear_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Gear_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Gear_ref                   ) = $G_Body_HS.$B_Gear      ! Body
   marker.ang (           2 ,       $M_Gear_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Gear                       ) = $M_SHAFT_IMS_HS_GEAR    ! From Marker
   joint.to (                       $J_Gear                       ) = $G_Body_HS.$M_Gear_BRF  ! To Marker
   joint.type (                     $J_Gear                       ) = 0                       ! Type
   joint.st.pos (         1 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! Position
   joint.st.vel (         1 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! Velocity
   joint.par (            1 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [m] Translation in x
   joint.par (            5 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [m] Translation in y
   joint.par (            6 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [m] Translation in z
   joint.par (            7 ,       $J_Gear                       ) = 0.0000000000000000E+00  ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Gear                       ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_Gear                       ) = -60
   joint.attr.2d.ori (    1 ,       $J_Gear                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 , $J_Gear         ) = 520, 530, 530, 543
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 , $J_Gear         ) = -50, -50, -60, -60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 , $J_Gear           ) = 970, 577
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 , $J_Gear           ) = -60, -60

   prim.type (                      $P_Gear                       ) = 25                      ! Type
   prim.ref (                       $P_Gear                       ) = $G_Body_HS.$M_Gear_ref  ! Reference Marker
   prim.color.r (         1 ,       $P_Gear                       ) = 1.2800000000000000E+02  ! Colors (red component)
   prim.color.r (         2 ,       $P_Gear                       ) = 2.5500000000000000E+02  ! Colors (red component)
   prim.color.g (         1 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.g (         2 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! Colors (green component)
   prim.color.b (         1 ,       $P_Gear                       ) = 1.2800000000000000E+02  ! Colors (blue component)
   prim.color.b (         2 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! Colors (blue component)
   prim.color.t (         1 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Gear                       ) = 7.8500000000000000E+03  ! Density
   prim.par (             2 ,       $P_Gear                       ) = 3.0000000000000000E+00  ! [-] Type
   prim.par (             3 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! [rad] Initial gear angle
   prim.par (             5 ,       $P_Gear                       ) = $G_HS.$_mn              ! [m] Normal module
   prim.par (             6 ,       $P_Gear                       ) = $G_HS.$_alpha           ! [rad] Normal pressure angle
   prim.par (             7 ,       $P_Gear                       ) = $G_HS.$_x_gear          ! [-] Shift factor
   prim.par (             8 ,       $P_Gear                       ) = { -$G_HS.$_helix }      ! [rad] Helix angle
   prim.par (             9 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! [rad] Bevel angle
   prim.par (            11 ,       $P_Gear                       ) = 2.0000000000000000E+00  ! [-] Addendum/Dedendum type
   prim.par (            12 ,       $P_Gear                       ) = { 1395.372 mm }         ! [m] Addendum diameter
   prim.par (            13 ,       $P_Gear                       ) = { 1334.248 mm }         ! [m] Dedendum diameter
   prim.par (            15 ,       $P_Gear                       ) = 1.0000000000000000E+00  ! [-] Backlash Type
   prim.par (            16 ,       $P_Gear                       ) = $G_HS.$_Norm_Backlash   ! [m] Normal backlash
   prim.par (            18 ,       $P_Gear                       ) = $G_HS.$_z_gear          ! [-] Number of teeth
   prim.par (            19 ,       $P_Gear                       ) = $G_HS.$_b               ! [m] Flank width
   prim.par (            20 ,       $P_Gear                       ) = { 500 mm }              ! [m] Bore Diameter
   prim.par (            25 ,       $P_Gear                       ) = $G_HS.$_z_gear          ! [-] Number of visible teeth
   prim.par (            26 ,       $P_Gear                       ) = 1.0000000000000000E+00  ! [-] Number of highlighted teeth
   prim.par (            27 ,       $P_Gear                       ) = 2.0000000000000000E+00  ! [-] Tip discretisation
   prim.par (            28 ,       $P_Gear                       ) = 1.5000000000000000E+01  ! [-] Flank discretisation
   prim.par (            29 ,       $P_Gear                       ) = 2.0000000000000000E+00  ! [-] Root discretisation
   prim.par (            30 ,       $P_Gear                       ) = 1.0000000000000000E+00  ! [-] Face discretisation
   prim.par (            31 ,       $P_Gear                       ) = 1.0000000000000000E+00  ! [-] Bore discretisation per tooth
   prim.par (            38 ,       $P_Gear                       ) = 1.0000000000000000E+00  ! [-] Modification scale factor
   prim.par (            39 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! [-] L flank mod
   prim.par (            81 ,       $P_Gear                       ) = 0.0000000000000000E+00  ! [-] R flank mod


bodygroup.end (                     $G_Body_HS                    )                           ! $G_Body_HS

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_Input_Load                 ) = 93                      ! Type
force.from (                        $F_Input_Load                 ) = $M_Bed_Plate_Input_Loading ! From Marker
force.to (                          $F_Input_Load                 ) = $M_Main_Shaft_Input_Loading ! To Marker
force.par (               1 ,       $F_Input_Load                 ) = $UE_Fx                  ! [-] nr_u for f_x
force.par (               2 ,       $F_Input_Load                 ) = $UE_Fy                  ! [-] nr_u for f_y
force.par (               3 ,       $F_Input_Load                 ) = $UE_Fz                  ! [-] nr_u for f_z
force.par (               4 ,       $F_Input_Load                 ) = $UE_Mx                  ! [-] nr_u for l_x
force.par (               5 ,       $F_Input_Load                 ) = $UE_My                  ! [-] nr_u for l_y
force.par (               6 ,       $F_Input_Load                 ) = $UE_Mz                  ! [-] nr_u for l_z
force.attr.2d.pos.x (     1 ,       $F_Input_Load                 ) = -20
force.attr.2d.pos.y (     1 ,       $F_Input_Load                 ) = -20
force.attr.2d.ori (       1 ,       $F_Input_Load                 ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Input_Load      ) = 390, 390, 364.125, 364.125, 354.125, 318.25, 103, 103, 103, 93, 83, 73, 63, 53, 43, 33, 33, 33, 23, 13, 3, -7, -17, -27, -37, -37, -47, -47, -37
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Input_Load      ) = 10, 16.25, 16.25, 5, 5, 5, 5, -10, -20, -20, -20, -20, -20, -20, -20, -20, -30, -40, -40, -40, -40, -40, -40, -40, -40, -30, -30, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Input_Load        ) = -130, -55.625, -55.625, 28.75, 28.75, 28.75, -3
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Input_Load        ) = -30, -30, -40, -40, -30, -20, -20

force.type (                        $F_gen_torque                 ) = 50                      ! Type
force.from (                        $F_gen_torque                 ) = $M_SHAFT_Gen_BRF        ! From Marker
force.to (                          $F_gen_torque                 ) = $M_Gearbox_Frame_Shaft_Gen ! To Marker
force.par (               1 ,       $F_gen_torque                 ) = $M_SHAFT_Gen_BRF        ! [-] Reference Marker for calc.
force.par (               3 ,       $F_gen_torque                 ) = 0.0000000000000000E+00  ! [-] Expression for Fx
force.par (               4 ,       $F_gen_torque                 ) = 0.0000000000000000E+00  ! [-] Expression for Fy
force.par (               5 ,       $F_gen_torque                 ) = 0.0000000000000000E+00  ! [-] Expression for Fz
force.par (               6 ,       $F_gen_torque                 ) = $X_gen_torq             ! [-] Expression for Lx
force.par (               7 ,       $F_gen_torque                 ) = 0.0000000000000000E+00  ! [-] Expression for Ly
force.par (               8 ,       $F_gen_torque                 ) = 0.0000000000000000E+00  ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_gen_torque                 ) = 370
force.attr.2d.pos.y (     1 ,       $F_gen_torque                 ) = -160
force.attr.2d.ori (       1 ,       $F_gen_torque                 ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_gen_torque      ) = 560, 560, 462.6875, 462.6875, 430.25, 387
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_gen_torque      ) = -200, -137.5, -137.5, -160, -160, -160
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_gen_torque        ) = 50, 50, 74.65625, 74.65625, 74.65625, 74.65625, 74.65625, 74.65625, 99.3125, 148.625, 247.25, 313, 313, 323, 333, 343, 353
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_gen_torque        ) = 30, 20, 20, 1.015625, -17.96875, -55.9375, -81.25, -115, -115, -115, -115, -115, -160, -160, -160, -160, -160

force.type (                        $F_Bearing_IMS_A              ) = 43                      ! Type
force.from (                        $F_Bearing_IMS_A              ) = $M_SHAFT_IMS_HS_Bearing_IMS_A ! From Marker
force.to (                          $F_Bearing_IMS_A              ) = $M_Gearbox_Frame_Bearing_IMS_A ! To Marker
force.par (               1 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_IMS_A              ) = $G_Bearing_IMS_A.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_IMS_A              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_IMS_A              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_IMS_A              ) = 190
force.attr.2d.pos.y (     1 ,       $F_Bearing_IMS_A              ) = -40
force.attr.2d.ori (       1 ,       $F_Bearing_IMS_A              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_IMS_A   ) = 470, 328.9375, 328.9375, 285.25, 227, 227, 227, 227, 217, 207
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_IMS_A   ) = -50, -50, -70, -70, -70, -60, -50, -40, -40, -40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_IMS_A     ) = 80, 95.1875, 95.1875, 110.75, 173
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_IMS_A     ) = 50, 50, -40, -40, -40

force.type (                        $F_Bearing_IMS_B              ) = 43                      ! Type
force.from (                        $F_Bearing_IMS_B              ) = $M_SHAFT_IMS_HS_Bearing_IMS_B ! From Marker
force.to (                          $F_Bearing_IMS_B              ) = $M_Gearbox_Frame_Bearing_IMS_B ! To Marker
force.par (               1 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_IMS_B              ) = $G_Bearing_IMS_B.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_IMS_B              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_IMS_B              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_IMS_B              ) = 250
force.attr.2d.pos.y (     1 ,       $F_Bearing_IMS_B              ) = -50
force.attr.2d.ori (       1 ,       $F_Bearing_IMS_B              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_IMS_B   ) = 480, 480, 470, 460, 460, 460, 267
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_IMS_B   ) = -60, -70, -70, -70, -60, -50, -50
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_IMS_B     ) = 40, 40, 223, 223, 233
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_IMS_B     ) = 30, 2.5, 2.5, -50, -50

force.type (                        $F_Bearing_IMS_C              ) = 43                      ! Type
force.from (                        $F_Bearing_IMS_C              ) = $M_SHAFT_IMS_HS_Bearing_IMS_C ! From Marker
force.to (                          $F_Bearing_IMS_C              ) = $M_Gearbox_Frame_Bearing_IMS_C ! To Marker
force.par (               1 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_IMS_C              ) = $G_Bearing_IMS_C.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_IMS_C              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_IMS_C              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_IMS_C              ) = 350
force.attr.2d.pos.y (     1 ,       $F_Bearing_IMS_C              ) = -70
force.attr.2d.ori (       1 ,       $F_Bearing_IMS_C              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_IMS_C   ) = 490, 490, 480, 470, 460, 455.095703125, 440.3828125, 420.765625, 407.6875, 390.25, 367
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_IMS_C   ) = -60, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_IMS_C     ) = 80, 150.75, 150.75, 150.75, 150.75, 333
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_IMS_C     ) = 80, 80, 70, 60, -70, -70

force.type (                        $F_Bearing_HS_A               ) = 43                      ! Type
force.from (                        $F_Bearing_HS_A               ) = $M_SHAFT_Gen_Bearing_HS_A ! From Marker
force.to (                          $F_Bearing_HS_A               ) = $M_Gearbox_Frame_Bearing_HS_A ! To Marker
force.par (               1 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_HS_A               ) = $G_Bearing_HS_A.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_HS_A               ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_HS_A               ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_HS_A               ) = 50
force.attr.2d.pos.y (     1 ,       $F_Bearing_HS_A               ) = -40
force.attr.2d.ori (       1 ,       $F_Bearing_HS_A               ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_HS_A    ) = 540, 518.609375, 518.609375, 484.4375, 469.25, 469.25, 398.5, 398.5, 398.5, 388.5, 378.5, 227, 227, 217, 207, 197, 187, 177, 167, 167, 167, 157, 147, 137, 127, 117, 107, 97, 87, 77, 67
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_HS_A    ) = -220, -220, -230, -230, -230, -220, -220, -210, -97.5, -97.5, -97.5, -97.5, -60, -60, -60, -60, -60, -60, -60, -50, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_HS_A      ) = 29.99999999999999, 29.99999999999999, 33
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_HS_A      ) = 30, -40, -40

force.type (                        $F_Bearing_HS_B               ) = 43                      ! Type
force.from (                        $F_Bearing_HS_B               ) = $M_SHAFT_Gen_Bearing_HS_B ! From Marker
force.to (                          $F_Bearing_HS_B               ) = $M_Gearbox_Frame_Bearing_HS_B ! To Marker
force.par (               1 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_HS_B               ) = $G_Bearing_HS_B.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_HS_B               ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_HS_B               ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_HS_B               ) = 110
force.attr.2d.pos.y (     1 ,       $F_Bearing_HS_B               ) = -70
force.attr.2d.ori (       1 ,       $F_Bearing_HS_B               ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_HS_B    ) = 540, 530, 530, 525.3082885742188, 511.233154296875, 492.46630859375, 479.955078125, 463.2734375, 463.2734375, 463.2734375, 441.03125, 411.375, 411.375, 411.375, 401.375, 358.5, 358.5, 348.5, 338.5, 328.5, 328.5, 127
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_HS_B    ) = -210, -210, -250, -250, -250, -250, -250, -250, -230, -220, -220, -220, -210, -200, -200, -200, -210, -210, -210, -210, -70, -70
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_HS_B      ) = 80, 90, 90, 93
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_HS_B      ) = 60, 60, -70, -70

force.type (                        $F_Bearing_HS_C               ) = 43                      ! Type
force.from (                        $F_Bearing_HS_C               ) = $M_SHAFT_Gen_Bearing_HS_C ! From Marker
force.to (                          $F_Bearing_HS_C               ) = $M_Gearbox_Frame_Bearing_HS_C ! To Marker
force.par (               1 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_x ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_y ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_z ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_al ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_be ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_c_ga ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_x ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_y ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_z ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_al ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_be ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_HS_C               ) = $G_Bearing_HS_C.$_PL_d_ga ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_HS_C               ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_HS_C               ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_HS_C               ) = 180
force.attr.2d.pos.y (     1 ,       $F_Bearing_HS_C               ) = -90
force.attr.2d.ori (       1 ,       $F_Bearing_HS_C               ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_HS_C    ) = 570, 570, 393.5, 393.5, 383.5, 197
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_HS_C    ) = -200, -140, -140, -90, -90, -90
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_HS_C      ) = 80, 90, 90, 93.849609375, 105.3984375, 120.796875, 131.0625, 144.75, 163
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_HS_C      ) = 70, 70, -90, -90, -90, -90, -90, -90, -90

force.type (                        $F_Bearing_INP_A              ) = 43                      ! Type
force.from (                        $F_Bearing_INP_A              ) = $M_Main_Shaft_INP_A     ! From Marker
force.to (                          $F_Bearing_INP_A              ) = $M_Bed_Plate_Bearing_INP_A ! To Marker
force.par (               1 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_x       ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_y       ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_z       ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_al      ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_be      ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_c_ga      ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_x       ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_y       ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_z       ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_al      ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_be      ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_INP_A              ) = $G_INP_A.$_PL_d_ga      ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_INP_A              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_INP_A              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_INP_A              ) = -20
force.attr.2d.pos.y (     1 ,       $F_Bearing_INP_A              ) = -20
force.attr.2d.ori (       1 ,       $F_Bearing_INP_A              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_INP_A   ) = -130, -37
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_INP_A   ) = -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_INP_A     ) = 380, 380, 362.671875, 362.671875, 362.671875, 310.6875, 102.75, 102.75, 102.75, 92.75, -3
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_INP_A     ) = -20, -26.25, -26.25, -15, 0, 0, 0, -10, -20, -20, -20

force.type (                        $F_Bearing_INP_B              ) = 43                      ! Type
force.from (                        $F_Bearing_INP_B              ) = $M_Main_Shaft_INP_B     ! From Marker
force.to (                          $F_Bearing_INP_B              ) = $M_Bed_Plate_Bearing_INP_B ! To Marker
force.par (               1 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_x       ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_y       ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_z       ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_al      ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_be      ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_c_ga      ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_x       ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_y       ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_z       ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_al      ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_be      ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_INP_B              ) = $G_INP_B.$_PL_d_ga      ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_INP_B              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_INP_B              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_INP_B              ) = -80
force.attr.2d.pos.y (     1 ,       $F_Bearing_INP_B              ) = -50
force.attr.2d.ori (       1 ,       $F_Bearing_INP_B              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_INP_B   ) = -140, -140, -97
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_INP_B   ) = -40, -50, -50
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_INP_B     ) = 400, 400, 27, 27, 27, 27, 27, 27, 17, 7, -3, -13, -23, -33, -43, -53, -63
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_INP_B     ) = 10, 15, 15, 0, -10, -20, -30, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50

force.type (                        $F_Bearing_PLC_A              ) = 43                      ! Type
force.from (                        $F_Bearing_PLC_A              ) = $G_Body_LS.$M_PLC_Bearing_PLC_A ! From Marker
force.to (                          $F_Bearing_PLC_A              ) = $M_Gearbox_Frame_LS_PLC_A ! To Marker
force.par (               1 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_x       ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_y       ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_z       ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_al      ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_be      ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_c_ga      ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_x       ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_y       ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_z       ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_al      ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_be      ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_PLC_A              ) = $G_PLC_A.$_PL_d_ga      ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_PLC_A              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_PLC_A              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_PLC_A              ) = 230
force.attr.2d.pos.y (     1 ,       $F_Bearing_PLC_A              ) = -140
force.attr.2d.ori (       1 ,       $F_Bearing_PLC_A              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_PLC_A   ) = 450, 450, 440, 430, 247
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_PLC_A   ) = -40, -140, -140, -140, -140
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_PLC_A     ) = 20, 20, 213
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_PLC_A     ) = 30, -140, -140

force.type (                        $F_Bearing_PLC_B              ) = 43                      ! Type
force.from (                        $F_Bearing_PLC_B              ) = $G_Body_LS.$M_PLC_Bearing_PLC_B ! From Marker
force.to (                          $F_Bearing_PLC_B              ) = $M_Gearbox_Frame_LS_PLC_B ! To Marker
force.par (               1 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_x       ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_y       ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_z       ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_al      ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_be      ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_c_ga      ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_x       ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_y       ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_z       ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_al      ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_be      ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_PLC_B              ) = $G_PLC_B.$_PL_d_ga      ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_PLC_B              ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_PLC_B              ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_PLC_B              ) = 290
force.attr.2d.pos.y (     1 ,       $F_Bearing_PLC_B              ) = -170
force.attr.2d.ori (       1 ,       $F_Bearing_PLC_B              ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_PLC_B   ) = 440, 383.875, 383.875, 337.75, 337.75, 307
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_PLC_B   ) = -30, -30, -100, -100, -170, -170
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_PLC_B     ) = 10, 10, 141.5, 141.5, 141.5, 273
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_PLC_B     ) = 30, 8.125, 8.125, -27.5, -170, -170

force.type (                        $F_Bearing_IMS_PLC_A          ) = 43                      ! Type
force.from (                        $F_Bearing_IMS_PLC_A          ) = $G_Body_IMS.$M_PLC_IMS_PLC_A ! From Marker
force.to (                          $F_Bearing_IMS_PLC_A          ) = $M_Gearbox_Frame_IMS_PLC_A ! To Marker
force.par (               1 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_x   ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_y   ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_z   ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_al  ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_be  ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_c_ga  ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_x   ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_y   ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_z   ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_al  ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_be  ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_IMS_PLC_A          ) = $G_IMS_PLC_A.$_PL_d_ga  ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_IMS_PLC_A          ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_IMS_PLC_A          ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_IMS_PLC_A          ) = 420
force.attr.2d.pos.y (     1 ,       $F_Bearing_IMS_PLC_A          ) = -90
force.attr.2d.ori (       1 ,       $F_Bearing_IMS_PLC_A          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_A) = 770, 467, 467, 457, 447, 437
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_A) = -80, -80, -90, -90, -90, -90
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_A ) = 80, 90, 90, 101.44189453125, 135.767578125, 151.0234375, 212.046875, 212.046875, 212.046875, 212.046875, 222.046875, 266.0625, 324.75, 403
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_A ) = 90, 90, 39.375, 39.375, 39.375, 39.375, 39.375, 22.5, 0, -90, -90, -90, -90, -90

force.type (                        $F_Bearing_IMS_PLC_B          ) = 43                      ! Type
force.from (                        $F_Bearing_IMS_PLC_B          ) = $G_Body_IMS.$M_PLC_IMS_PLC_B ! From Marker
force.to (                          $F_Bearing_IMS_PLC_B          ) = $M_Gearbox_Frame_IMS_PLC_B ! To Marker
force.par (               1 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
force.par (               2 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
force.par (               3 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
force.par (               4 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
force.par (               5 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
force.par (               6 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
force.par (               7 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_x   ! [N/m] Transl. stiffness c_x
force.par (               8 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_y   ! [N/m] Transl. stiffness c_y
force.par (               9 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_z   ! [N/m] Transl. stiffness c_z
force.par (              10 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_al  ! [Nm/rad] Rotat. stiffness c_al
force.par (              11 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_be  ! [Nm/rad] Rotat. stiffness c_be
force.par (              12 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_c_ga  ! [Nm/rad] Rotat. stiffness c_ga
force.par (              13 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_x   ! [Ns/m] Transl. damping d_x
force.par (              14 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_y   ! [Ns/m] Transl. damping d_y
force.par (              15 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_z   ! [Ns/m] Transl. damping d_z
force.par (              16 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_al  ! [Nms/rad] Rotat. damping d_al
force.par (              17 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_be  ! [Nms/rad] Rotat. damping d_be
force.par (              18 ,       $F_Bearing_IMS_PLC_B          ) = $G_IMS_PLC_B.$_PL_d_ga  ! [Nms/rad] Rotat. damping d_ga
force.par (              19 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
force.par (              20 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
force.par (              21 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
force.par (              22 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
force.par (              23 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
force.par (              24 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_Bearing_IMS_PLC_B          ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
force.par (              33 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for F_x
force.par (              34 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for F_y
force.par (              35 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for F_z
force.par (              36 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for T_al
force.par (              37 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for T_be
force.par (              38 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
force.par (              39 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Input Function Set
force.par (              40 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
force.par (              41 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
force.par (              42 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
force.par (              43 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
force.par (              44 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
force.par (              45 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
force.par (              46 ,       $F_Bearing_IMS_PLC_B          ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_Bearing_IMS_PLC_B          ) = 490
force.attr.2d.pos.y (     1 ,       $F_Bearing_IMS_PLC_B          ) = -100
force.attr.2d.ori (       1 ,       $F_Bearing_IMS_PLC_B          ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_B) = 770, 764.1875, 764.1875, 716.75, 527, 527, 527, 517, 507
force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_B) = -90, -90, -80, -80, -80, -90, -100, -100, -100
force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_B ) = -3.552713678800501E-15, -3.552713678800501E-15, 0, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473
force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Bearing_IMS_PLC_B ) = 30, 8.75, 8.75, 8.75, -25, -25, -25, -25, -70, -70, -70, -70, -70, -70, -70, -70, -100, -100, -100, -100

forcegroup.begin (                  $G_F_LS                       )                           ! $G_F_LS
   force.type (                     $F_Sun_PL1                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL1                    ) = $G_Body_LS.$M_Sun_ref   ! From Marker
   force.to (                       $F_Sun_PL1                    ) = $G_Body_LS.$M_PL1_ref   ! To Marker
   force.par (            1 ,       $F_Sun_PL1                    ) = $G_Body_LS.$P_Sun       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL1                    ) = $G_Body_LS.$P_PL1       ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL1                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL1                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL1                    ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL1                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL1                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL1                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL1                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL1                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL1                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL1                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL1                    ) = 900
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL1                    ) = -20
   force.attr.2d.ori (    1 ,       $F_Sun_PL1                    ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL1      ) = 770, 852.25, 852.25, 852.25, 883
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL1      ) = 0, 0, -10, -20, -20
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL1        ) = 970, 949.25, 949.25, 917
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL1        ) = -10, -10, -20, -20

   force.type (                     $F_Sun_PL2                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL2                    ) = $G_Body_LS.$M_Sun_ref   ! From Marker
   force.to (                       $F_Sun_PL2                    ) = $G_Body_LS.$M_PL2_ref   ! To Marker
   force.par (            1 ,       $F_Sun_PL2                    ) = $G_Body_LS.$P_Sun       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL2                    ) = $G_Body_LS.$P_PL2       ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL2                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL2                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL2                    ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL2                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL2                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL2                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL2                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL2                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL2                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL2                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL2                    ) = -20
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL2                    ) = -220
   force.attr.2d.ori (    1 ,       $F_Sun_PL2                    ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL2      ) = 720, 710, 710, -3
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL2      ) = -10, -10, -220, -220
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL2        ) = -50, -50, -47, -37
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL2        ) = -290, -220, -220, -220

   force.type (                     $F_Sun_PL3                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL3                    ) = $G_Body_LS.$M_Sun_ref   ! From Marker
   force.to (                       $F_Sun_PL3                    ) = $G_Body_LS.$M_PL3_ref   ! To Marker
   force.par (            1 ,       $F_Sun_PL3                    ) = $G_Body_LS.$P_Sun       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL3                    ) = $G_Body_LS.$P_PL3       ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL3                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL3                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL3                    ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL3                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL3                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL3                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL3                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL3                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL3                    ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL3                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL3                    ) = -20
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL3                    ) = 190
   force.attr.2d.ori (    1 ,       $F_Sun_PL3                    ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL3      ) = 720, 710, 710, -3
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL3      ) = 0, 0, 190, 190
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL3        ) = -30, -40, -40, -37
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL3        ) = 250, 250, 190, 190

   force.type (                     $F_PL1_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL1_Ring                   ) = $G_Body_LS.$M_PL1_ref   ! From Marker
   force.to (                       $F_PL1_Ring                   ) = $G_Body_LS.$M_Ring_ref  ! To Marker
   force.par (            1 ,       $F_PL1_Ring                   ) = $G_Body_LS.$P_PL1       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL1_Ring                   ) = $G_Body_LS.$P_Ring      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL1_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL1_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL1_Ring                   ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL1_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL1_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL1_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL1_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL1_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL1_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL1_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL1_Ring                   ) = 830
   force.attr.2d.pos.y (   1 ,      $F_PL1_Ring                   ) = -20
   force.attr.2d.ori (    1 ,       $F_PL1_Ring                   ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_Ring     ) = 970, 875.25, 875.25, 847
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_Ring     ) = 0, 0, -20, -20
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_Ring       ) = 680, 779.75, 779.75, 813
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_Ring       ) = -30, -30, -20, -20

   force.type (                     $F_PL2_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL2_Ring                   ) = $G_Body_LS.$M_PL2_ref   ! From Marker
   force.to (                       $F_PL2_Ring                   ) = $G_Body_LS.$M_Ring_ref  ! To Marker
   force.par (            1 ,       $F_PL2_Ring                   ) = $G_Body_LS.$P_PL2       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL2_Ring                   ) = $G_Body_LS.$P_Ring      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL2_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL2_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL2_Ring                   ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL2_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL2_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL2_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL2_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL2_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL2_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL2_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL2_Ring                   ) = -20
   force.attr.2d.pos.y (   1 ,      $F_PL2_Ring                   ) = -150
   force.attr.2d.ori (    1 ,       $F_PL2_Ring                   ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_Ring     ) = 0, 0, -10, -20, -20
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_Ring     ) = -290, -197.75, -197.75, -197.75, -167
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_Ring       ) = 600, 580.46875, 580.46875, 551.875, 437.5, -20, -20
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_Ring       ) = -20, -20, -123, -123, -123, -123, -133

   force.type (                     $F_PL3_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL3_Ring                   ) = $G_Body_LS.$M_PL3_ref   ! From Marker
   force.to (                       $F_PL3_Ring                   ) = $G_Body_LS.$M_Ring_ref  ! To Marker
   force.par (            1 ,       $F_PL3_Ring                   ) = $G_Body_LS.$P_PL3       ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL3_Ring                   ) = $G_Body_LS.$P_Ring      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL3_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL3_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL3_Ring                   ) = $G_LS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL3_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL3_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL3_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL3_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL3_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL3_Ring                   ) = $G_LS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL3_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL3_Ring                   ) = -20
   force.attr.2d.pos.y (   1 ,      $F_PL3_Ring                   ) = 120
   force.attr.2d.ori (    1 ,       $F_PL3_Ring                   ) = 270
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_Ring     ) = 0, 0, -10, -20, -20, -20
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_Ring     ) = 230, 170.25, 170.25, 170.25, 160.25, 137
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_Ring       ) = 610, 610, -20, -20
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_Ring       ) = 20, 30, 30, 103

   force.type (                     $F_PL1_A                      ) = 43                      ! Type
   force.from (                     $F_PL1_A                      ) = $G_Body_LS.$M_Pin1_Bearing_A ! From Marker
   force.to (                       $F_PL1_A                      ) = $G_Body_LS.$M_PLC_Pin1_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL1_A                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL1_A                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_A                      ) = 440
   force.attr.2d.pos.y (   1 ,      $F_PL1_A                      ) = -250
   force.attr.2d.ori (    1 ,       $F_PL1_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_A        ) = 560, 560, 457
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_A        ) = -280, -250, -250
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_A          ) = 440, 430, 430, 416.984375, 377.9375, 377.9375, 377.9375, 400.25, 413, 413, 413, 413, 423
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_A          ) = -10, -10, -66.25, -66.25, -66.25, -85, -110, -110, -110, -120, -130, -250, -250

   force.type (                     $F_PL1_B                      ) = 43                      ! Type
   force.from (                     $F_PL1_B                      ) = $G_Body_LS.$M_Pin1_Bearing_B ! From Marker
   force.to (                       $F_PL1_B                      ) = $G_Body_LS.$M_PLC_Pin1_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL1_B                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL1_B                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_B                      ) = 500
   force.attr.2d.pos.y (   1 ,      $F_PL1_B                      ) = -280
   force.attr.2d.ori (    1 ,       $F_PL1_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_B        ) = 550, 543.5, 543.5, 517
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_B        ) = -290, -290, -280, -280
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_B          ) = 520, 530, 530, 530, 530, 530, 520, 510, 500, 490, 480, 480, 480, 480, 483
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_B          ) = -20, -20, -30, -40, -50, -120, -120, -120, -120, -120, -120, -130, -160, -280, -280

   force.type (                     $F_PL2_A                      ) = 43                      ! Type
   force.from (                     $F_PL2_A                      ) = $G_Body_LS.$M_Pin2_Bearing_A ! From Marker
   force.to (                       $F_PL2_A                      ) = $G_Body_LS.$M_PLC_Pin2_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL2_A                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL2_A                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_A                      ) = 80
   force.attr.2d.pos.y (   1 ,      $F_PL2_A                      ) = -160
   force.attr.2d.ori (    1 ,       $F_PL2_A                      ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_A        ) = 110, 110, 90, 80, 80, 80
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_A        ) = -270, -264.25, -264.25, -264.25, -254.25, -177
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_A          ) = 440, 430, 430, 424.296875, 407.1875, 338.75, 338.75, 338.75, 338.75, 338.75, 305, 260, 80, 80
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_A          ) = 0, 0, -52.5, -52.5, -52.5, -52.5, -35, -20, -10, 0, 0, 0, 0, -143

   force.type (                     $F_PL2_B                      ) = 43                      ! Type
   force.from (                     $F_PL2_B                      ) = $G_Body_LS.$M_Pin2_Bearing_B ! From Marker
   force.to (                       $F_PL2_B                      ) = $G_Body_LS.$M_PLC_Pin2_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL2_B                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL2_B                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_B                      ) = 110
   force.attr.2d.pos.y (   1 ,      $F_PL2_B                      ) = -220
   force.attr.2d.ori (    1 ,       $F_PL2_B                      ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_B        ) = 120, 120, 110, 110
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_B        ) = -270, -254.25, -254.25, -237
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_B          ) = 440, 430, 430, 419.98046875, 409.9609375, 389.921875, 349.84375, 323.125, 323.125, 323.125, 323.125, 287.5, 240, 240, 240, 230, 230, 230, 230, 220, 210, 200, 190, 180, 170, 170, 160, 160, 150, 140, 130, 120, 110, 110
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_B          ) = 10, 10, 30, 30, 30, 30, 30, 30, 20, 10, 5, 5, 5, -10, -30, -30, -40, -50, -60, -60, -60, -60, -60, -60, -60, -50, -50, -88.25, -88.25, -88.25, -88.25, -88.25, -88.25, -203

   force.type (                     $F_PL3_A                      ) = 43                      ! Type
   force.from (                     $F_PL3_A                      ) = $G_Body_LS.$M_Pin3_Bearing_A ! From Marker
   force.to (                       $F_PL3_A                      ) = $G_Body_LS.$M_PLC_Pin3_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL3_A                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL3_A                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_A                      ) = 200
   force.attr.2d.pos.y (   1 ,      $F_PL3_A                      ) = 90
   force.attr.2d.ori (    1 ,       $F_PL3_A                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_A        ) = 120, 120, 183
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_A        ) = 150, 90, 90
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_A          ) = 470, 470, 217
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_A          ) = 20, 90, 90

   force.type (                     $F_PL3_B                      ) = 43                      ! Type
   force.from (                     $F_PL3_B                      ) = $G_Body_LS.$M_Pin3_Bearing_B ! From Marker
   force.to (                       $F_PL3_B                      ) = $G_Body_LS.$M_PLC_Pin3_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_x          ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_y          ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_z          ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_al         ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_be         ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL3_B                      ) = $G_LS.$_PL_c_ga         ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_x          ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_y          ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_z          ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_al         ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_be         ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL3_B                      ) = $G_LS.$_PL_d_ga         ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_B                      ) = 260
   force.attr.2d.pos.y (   1 ,      $F_PL3_B                      ) = 120
   force.attr.2d.ori (    1 ,       $F_PL3_B                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_B        ) = 130, 165.75, 165.75, 243
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_B        ) = 160, 160, 120, 120
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_B          ) = 480, 480, 277
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_B          ) = 20, 120, 120

forcegroup.end (                    $G_F_LS                       )                           ! $G_F_LS

forcegroup.begin (                  $G_F_IMS                      )                           ! $G_F_IMS
   force.type (                     $F_Sun_PL1                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL1                    ) = $G_Body_IMS.$M_Sun_ref  ! From Marker
   force.to (                       $F_Sun_PL1                    ) = $G_Body_IMS.$M_PL1_ref  ! To Marker
   force.par (            1 ,       $F_Sun_PL1                    ) = $G_Body_IMS.$P_Sun      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL1                    ) = $G_Body_IMS.$P_PL1      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL1                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL1                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL1                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL1                    ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL1                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL1                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL1                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL1                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL1                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL1                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL1                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL1                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL1                    ) = 1740
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL1                    ) = -190
   force.attr.2d.ori (    1 ,       $F_Sun_PL1                    ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL1      ) = 1610, 1703, 1703, 1703, 1713, 1723
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL1      ) = -170, -170, -180, -190, -190, -190
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL1        ) = 1420, 1442.0234375, 1442.0234375, 1454.046875, 1478.09375, 1622.375, 1686.5, 1772, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 1757
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL1        ) = -140, -140, -130, -130, -130, -130, -130, -130, -130, -140, -150, -160, -170, -180, -190, -190

   force.type (                     $F_Sun_PL2                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL2                    ) = $G_Body_IMS.$M_Sun_ref  ! From Marker
   force.to (                       $F_Sun_PL2                    ) = $G_Body_IMS.$M_PL2_ref  ! To Marker
   force.par (            1 ,       $F_Sun_PL2                    ) = $G_Body_IMS.$P_Sun      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL2                    ) = $G_Body_IMS.$P_PL2      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL2                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL2                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL2                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL2                    ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL2                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL2                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL2                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL2                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL2                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL2                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL2                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL2                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL2                    ) = 980
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL2                    ) = -250
   force.attr.2d.ori (    1 ,       $F_Sun_PL2                    ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL2      ) = 1560, 1550, 1550, 997
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL2      ) = -170, -170, -250, -250
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL2        ) = 870, 900.75, 900.75, 963
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL2        ) = -310, -310, -250, -250

   force.type (                     $F_Sun_PL3                    ) = 225                     ! Type
   force.from (                     $F_Sun_PL3                    ) = $G_Body_IMS.$M_Sun_ref  ! From Marker
   force.to (                       $F_Sun_PL3                    ) = $G_Body_IMS.$M_PL3_ref  ! To Marker
   force.par (            1 ,       $F_Sun_PL3                    ) = $G_Body_IMS.$P_Sun      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Sun_PL3                    ) = $G_Body_IMS.$P_PL3      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Sun_PL3                    ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Sun_PL3                    ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Sun_PL3                    ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Sun_PL3                    ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Sun_PL3                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Sun_PL3                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Sun_PL3                    ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Sun_PL3                    ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Sun_PL3                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Sun_PL3                    ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Sun_PL3                    ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Sun_PL3                    ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Sun_PL3                    ) = 1070
   force.attr.2d.pos.y (   1 ,      $F_Sun_PL3                    ) = 20
   force.attr.2d.ori (    1 ,       $F_Sun_PL3                    ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Sun_PL3      ) = 1580, 1580, 1087
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Sun_PL3      ) = -150, 20, 20
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Sun_PL3        ) = 270, 279.78125, 279.78125, 299.5625, 418.25, 893, 893, 903, 913, 923, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1043, 1053
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Sun_PL3        ) = 40, 40, 30, 30, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20

   force.type (                     $F_PL1_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL1_Ring                   ) = $G_Body_IMS.$M_PL1_ref  ! From Marker
   force.to (                       $F_PL1_Ring                   ) = $G_Body_IMS.$M_Ring_ref ! To Marker
   force.par (            1 ,       $F_PL1_Ring                   ) = $G_Body_IMS.$P_PL1      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL1_Ring                   ) = $G_Body_IMS.$P_Ring     ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL1_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL1_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL1_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL1_Ring                   ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL1_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL1_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL1_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL1_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL1_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL1_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL1_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL1_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL1_Ring                   ) = 1300
   force.attr.2d.pos.y (   1 ,      $F_PL1_Ring                   ) = -150
   force.attr.2d.ori (    1 ,       $F_PL1_Ring                   ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_Ring     ) = 1370, 1317
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_Ring     ) = -150, -150
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_Ring       ) = 920, 1263, 1263, 1263, 1263, 1273, 1283
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_Ring       ) = -100, -100, -110, -120, -150, -150, -150

   force.type (                     $F_PL2_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL2_Ring                   ) = $G_Body_IMS.$M_PL2_ref  ! From Marker
   force.to (                       $F_PL2_Ring                   ) = $G_Body_IMS.$M_Ring_ref ! To Marker
   force.par (            1 ,       $F_PL2_Ring                   ) = $G_Body_IMS.$P_PL2      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL2_Ring                   ) = $G_Body_IMS.$P_Ring     ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL2_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL2_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL2_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL2_Ring                   ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL2_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL2_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL2_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL2_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL2_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL2_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL2_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL2_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL2_Ring                   ) = 850
   force.attr.2d.pos.y (   1 ,      $F_PL2_Ring                   ) = -220
   force.attr.2d.ori (    1 ,       $F_PL2_Ring                   ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_Ring     ) = 850, 850
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_Ring     ) = -300, -237
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_Ring       ) = 870, 850, 850
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_Ring       ) = -100, -100, -203

   force.type (                     $F_PL3_Ring                   ) = 225                     ! Type
   force.from (                     $F_PL3_Ring                   ) = $G_Body_IMS.$M_PL3_ref  ! From Marker
   force.to (                       $F_PL3_Ring                   ) = $G_Body_IMS.$M_Ring_ref ! To Marker
   force.par (            1 ,       $F_PL3_Ring                   ) = $G_Body_IMS.$P_PL3      ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_PL3_Ring                   ) = $G_Body_IMS.$P_Ring     ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_PL3_Ring                   ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_PL3_Ring                   ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_PL3_Ring                   ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_PL3_Ring                   ) = $G_IMS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_PL3_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_PL3_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_PL3_Ring                   ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_PL3_Ring                   ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_PL3_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_PL3_Ring                   ) = $G_IMS.$_Tooth_Damping  ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_PL3_Ring                   ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_PL3_Ring                   ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_PL3_Ring                   ) = 870
   force.attr.2d.pos.y (   1 ,      $F_PL3_Ring                   ) = 10
   force.attr.2d.ori (    1 ,       $F_PL3_Ring                   ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_Ring     ) = 260, 260, 277.90625, 277.90625, 295.8125, 403.25, 833, 833, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 843, 853
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_Ring     ) = 20, 15, 15, 30, 30, 30, 30, 20, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 10, 10
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_Ring       ) = 920, 930, 930, 920, 910, 900, 890, 887
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_Ring       ) = -90, -90, 10, 10, 10, 10, 10, 10

   force.type (                     $F_PL1_A                      ) = 43                      ! Type
   force.from (                     $F_PL1_A                      ) = $G_Body_IMS.$M_Pin1_Bearing_A ! From Marker
   force.to (                       $F_PL1_A                      ) = $G_Body_IMS.$M_PLC_Pin1_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL1_A                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL1_A                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL1_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_A                      ) = 1170
   force.attr.2d.pos.y (   1 ,      $F_PL1_A                      ) = -130
   force.attr.2d.ori (    1 ,       $F_PL1_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_A        ) = 1480, 1480, 1217, 1217, 1207, 1197, 1187
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_A        ) = -140, -120, -120, -130, -130, -130, -130
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_A          ) = 820, 833.86279296875, 833.86279296875, 845.451171875, 891.8046875, 912.40625, 994.8125, 1049.75, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1133, 1143, 1153
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_A          ) = -90, -90, -40, -40, -40, -40, -40, -40, -40, -50, -70, -80, -90, -100, -110, -115, -130, -130, -130, -130

   force.type (                     $F_PL1_B                      ) = 43                      ! Type
   force.from (                     $F_PL1_B                      ) = $G_Body_IMS.$M_Pin1_Bearing_B ! From Marker
   force.to (                       $F_PL1_B                      ) = $G_Body_IMS.$M_PLC_Pin1_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL1_B                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL1_B                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL1_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_B                      ) = 1240
   force.attr.2d.pos.y (   1 ,      $F_PL1_B                      ) = -140
   force.attr.2d.ori (    1 ,       $F_PL1_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL1_B        ) = 1460, 1433.714965820313, 1433.714965820313, 1417.429931640625, 1406.5732421875, 1392.09765625, 1372.796875, 1347.0625, 1312.75, 1267, 1267, 1267, 1267, 1257
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL1_B        ) = -160, -160, -170, -170, -170, -170, -170, -170, -170, -170, -160, -150, -140, -140
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL1_B          ) = 800, 800, 1193, 1193, 1203, 1213, 1223
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL1_B          ) = -100, -162.5, -162.5, -140, -140, -140, -140

   force.type (                     $F_PL2_A                      ) = 43                      ! Type
   force.from (                     $F_PL2_A                      ) = $G_Body_IMS.$M_Pin2_Bearing_A ! From Marker
   force.to (                       $F_PL2_A                      ) = $G_Body_IMS.$M_PLC_Pin2_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL2_A                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL2_A                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL2_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_A                      ) = 710
   force.attr.2d.pos.y (   1 ,      $F_PL2_A                      ) = -190
   force.attr.2d.ori (    1 ,       $F_PL2_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_A        ) = 920, 920, 757, 757, 747, 737, 727
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_A        ) = -340, -260, -260, -190, -190, -190, -190
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_A          ) = 790, 790, 668.75, 668.75, 693
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_A          ) = -100, -150, -150, -190, -190

   force.type (                     $F_PL2_B                      ) = 43                      ! Type
   force.from (                     $F_PL2_B                      ) = $G_Body_IMS.$M_Pin2_Bearing_B ! From Marker
   force.to (                       $F_PL2_B                      ) = $G_Body_IMS.$M_PLC_Pin2_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL2_B                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL2_B                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL2_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_B                      ) = 780
   force.attr.2d.pos.y (   1 ,      $F_PL2_B                      ) = -200
   force.attr.2d.ori (    1 ,       $F_PL2_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL2_B        ) = 940, 940, 930, 797
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL2_B        ) = -340, -200, -200, -200
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL2_B          ) = 790, 790, 749.5, 749.5, 749.5, 749.5, 749.5, 749.5, 763
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL2_B          ) = -70, -64.921875, -64.921875, -79.6875, -99.375, -112.5, -130, -200, -200

   force.type (                     $F_PL3_A                      ) = 43                      ! Type
   force.from (                     $F_PL3_A                      ) = $G_Body_IMS.$M_Pin3_Bearing_A ! From Marker
   force.to (                       $F_PL3_A                      ) = $G_Body_IMS.$M_PLC_Pin3_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL3_A                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL3_A                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_A                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL3_A                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_A                      ) = 730
   force.attr.2d.pos.y (   1 ,      $F_PL3_A                      ) = 10
   force.attr.2d.ori (    1 ,       $F_PL3_A                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_A        ) = 350, 350, 703, 703, 703, 713
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_A        ) = 40, 30, 30, 20, 10, 10
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_A          ) = 800, 800, 747
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_A          ) = -70, 10, 10

   force.type (                     $F_PL3_B                      ) = 43                      ! Type
   force.from (                     $F_PL3_B                      ) = $G_Body_IMS.$M_Pin3_Bearing_B ! From Marker
   force.to (                       $F_PL3_B                      ) = $G_Body_IMS.$M_PLC_Pin3_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_x
   force.par (            2 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_y
   force.par (            3 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [N] Nominal force F_nom_z
   force.par (            4 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_al
   force.par (            5 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_be
   force.par (            6 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [Nm] Nominal torque T_nom_ga
   force.par (            7 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_x         ! [N/m] Transl. stiffness c_x
   force.par (            8 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_y         ! [N/m] Transl. stiffness c_y
   force.par (            9 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_z         ! [N/m] Transl. stiffness c_z
   force.par (           10 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_al        ! [Nm/rad] Rotat. stiffness c_al
   force.par (           11 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_be        ! [Nm/rad] Rotat. stiffness c_be
   force.par (           12 ,       $F_PL3_B                      ) = $G_IMS.$_PL_c_ga        ! [Nm/rad] Rotat. stiffness c_ga
   force.par (           13 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_x         ! [Ns/m] Transl. damping d_x
   force.par (           14 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_y         ! [Ns/m] Transl. damping d_y
   force.par (           15 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_z         ! [Ns/m] Transl. damping d_z
   force.par (           16 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_al        ! [Nms/rad] Rotat. damping d_al
   force.par (           17 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_be        ! [Nms/rad] Rotat. damping d_be
   force.par (           18 ,       $F_PL3_B                      ) = $G_IMS.$_PL_d_ga        ! [Nms/rad] Rotat. damping d_ga
   force.par (           19 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_B                      ) = 2.0000000000000000E+00  ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_x
   force.par (           34 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_y
   force.par (           35 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for F_z
   force.par (           36 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_al
   force.par (           37 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_be
   force.par (           38 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Expression for T_ga
   force.par (           39 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position x_nom
   force.par (           41 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position y_nom
   force.par (           42 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [m] Nominal position z_nom
   force.par (           43 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle al_nom
   force.par (           44 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle be_nom
   force.par (           45 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [rad] Nominal angle ga_nom
   force.par (           46 ,       $F_PL3_B                      ) = 0.0000000000000000E+00  ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_B                      ) = 800
   force.attr.2d.pos.y (   1 ,      $F_PL3_B                      ) = 10
   force.attr.2d.ori (    1 ,       $F_PL3_B                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_PL3_B        ) = 370, 380, 380, 783
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_PL3_B        ) = 50, 50, 10, 10
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_PL3_B          ) = 810, 810, 849.75, 849.75, 849.75, 849.75, 849.75, 849.75, 839.75, 827, 817
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_PL3_B          ) = -70, -60, -60, -55.078125, -40.3125, -20.625, -7.5, 10, 10, 10, 10

forcegroup.end (                    $G_F_IMS                      )                           ! $G_F_IMS

forcegroup.begin (                  $G_F_HS                       )                           ! $G_F_HS
   force.type (                     $F_Pinion_Gear                ) = 225                     ! Type
   force.from (                     $F_Pinion_Gear                ) = $G_Body_HS.$M_Pinion_ref ! From Marker
   force.to (                       $F_Pinion_Gear                ) = $G_Body_HS.$M_Gear_ref  ! To Marker
   force.par (            1 ,       $F_Pinion_Gear                ) = $G_Body_HS.$P_Pinion    ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Pinion_Gear                ) = $G_Body_HS.$P_Gear      ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Pinion_Gear                ) = 1.0000000000000000E+00  ! [-] Basic Output Values
   force.par (            4 ,       $F_Pinion_Gear                ) = 7.0000000000000000E+00  ! [-] Advanced Output Values
   force.par (            6 ,       $F_Pinion_Gear                ) = 1.0000000000000000E+00  ! [-] Damping model
   force.par (            7 ,       $F_Pinion_Gear                ) = 1.0000000000000000E+00  ! [-] Friction model
   force.par (            8 ,       $F_Pinion_Gear                ) = 5.0000000000000000E+00  ! [-] Number of slices
   force.par (           10 ,       $F_Pinion_Gear                ) = 1.0000000000000000E+00  ! [-] Gear blank factor
   force.par (           12 ,       $F_Pinion_Gear                ) = $G_HS.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Pinion_Gear                ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Pinion_Gear                ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Pinion_Gear                ) = 2.1000000000000000E+11  ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Pinion_Gear                ) = 2.9999999999999999E-01  ! [-] Poisson's ratio (Gear 2)
   force.par (           21 ,       $F_Pinion_Gear                ) = $G_HS.$_Tooth_Damping   ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Pinion_Gear                ) = $G_HS.$_Tooth_Damping   ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [m] Full damping starts at
   force.par (           31 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Friction coefficient
   force.par (           32 ,       $F_Pinion_Gear                ) = 1.0000000000000000E-03  ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Pinion_Gear                ) = 0.0000000000000000E+00  ! [-] Number of torques (plot only)
   force.attr.2d.pos.x (   1 ,      $F_Pinion_Gear                ) = 920
   force.attr.2d.pos.y (   1 ,      $F_Pinion_Gear                ) = -220
   force.attr.2d.ori (    1 ,       $F_Pinion_Gear                ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 , $F_Pinion_Gear  ) = 770, 872.25, 872.25, 903
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 , $F_Pinion_Gear  ) = -280, -280, -220, -220
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 , $F_Pinion_Gear    ) = 980, 980, 970, 960, 937
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 , $F_Pinion_Gear    ) = -80, -220, -220, -220, -220

forcegroup.end (                    $G_F_HS                       )                           ! $G_F_HS

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.file (                        $I_Gen_Spd                    ) = 'GEN_SPD.if2'           ! File
ifctn.scal.x (                      $I_Gen_Spd                    ) = 1.0000000000000000E+00  ! Scaling factor
ifctn.scal.z (                      $I_Gen_Spd                    ) = 1.0000000000000000E+00  ! Scaling factor
ifctn.settings.fromfile (           $I_Gen_Spd                    ) = 1                       ! Inter- and extrapolation settings from file
ifctn.intpol.type (                 $I_Gen_Spd                    ) = 2                       ! Interpolation type

ifctn.file (                        $I_Fx                         ) = 'Fx.if2'                ! File

ifctn.file (                        $I_Fy                         ) = 'Fy.if2'                ! File

ifctn.file (                        $I_Fz                         ) = 'Fz.if2'                ! File

ifctn.file (                        $I_Mx                         ) = 'Mx.if2'                ! File
ifctn.settings.fromfile (           $I_Mx                         ) = 0                       ! Inter- and extrapolation settings from file
ifctn.intpol.type (                 $I_Mx                         ) = 2                       ! Interpolation type

ifctn.file (                        $I_My                         ) = 'My.if2'                ! File

ifctn.file (                        $I_Mz                         ) = 'Mz.if2'                ! File

ifctngroup.begin (                  $G_Bed_Plate_Motions          )                           ! $G_Bed_Plate_Motions
   ifctn.file (                     $I_X                          ) = 'EC4_s01_X.if2'         ! File

   ifctn.file (                     $I_Y                          ) = 'EC4_s01_Y.if2'         ! File

   ifctn.file (                     $I_Z                          ) = 'EC4_s01_Z.if2'         ! File

   ifctn.file (                     $I_X_Rot                      ) = 'EC4_s01_X_rot.if2'     ! File

   ifctn.file (                     $I_Y_Rot                      ) = 'EC4_s01_Y_rot.if2'     ! File

   ifctn.file (                     $I_Z_Rot                      ) = 'EC4_s01_Z_rot.if2'     ! File

   ifctn.file (                     $I_XD                         ) = 'EC4_s01_XD.if2'        ! File

   ifctn.file (                     $I_YD                         ) = 'EC4_s01_YD.if2'        ! File

   ifctn.file (                     $I_ZD                         ) = 'EC4_s01_ZD.if2'        ! File

   ifctn.file (                     $I_X_Rot_D                    ) = 'EC4_s01_X_rotD.if2'    ! File

   ifctn.file (                     $I_Y_Rot_D                    ) = 'EC4_s01_Y_rotD.if2'    ! File

   ifctn.file (                     $I_Z_Rot_D                    ) = 'EC4_s01_Z_rotD.if2'    ! File

   ifctn.file (                     $I_XDD                        ) = 'EC4_s01_XDD.if2'       ! File

   ifctn.file (                     $I_YDD                        ) = 'EC4_s01_YDD.if2'       ! File

   ifctn.file (                     $I_ZDD                        ) = 'EC4_s01_ZDD.if2'       ! File

   ifctn.file (                     $I_X_Rot_DD                   ) = 'EC4_s01_X_rotDD.if2'   ! File

   ifctn.file (                     $I_Y_Rot_DD                   ) = 'EC4_s01_Y_rotDD.if2'   ! File

   ifctn.file (                     $I_Z_Rot_DD                   ) = 'EC4_s01_Z_rotDD.if2'   ! File

ifctngroup.end (                    $G_Bed_Plate_Motions          )                           ! $G_Bed_Plate_Motions

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_omeg_read                  ) = 'WX($M_SHAFT_Gen_BRF,0,0)' ! Definition

express.str (                       $X_omeg_input                 ) = 'IFCTNX(0,$I_Gen_Spd,0,-1)' ! Definition

express.str (                       $X_delta_t                    ) = '0.005'                 ! Definition

express.str (                       $X_omg_error                  ) = '$X_omeg_input-$X_omeg_read' ! Definition

express.str (                       $X_last_int_omg_error         ) = 'if (TIME==0)\n{0}\nelse\n{$X_omg_error*$X_delta_t}' ! Definition

express.str (                       $X_int_omg_error              ) = '$X_last_int_omg_error+$X_omg_error*$X_delta_t' ! Definition

express.str (                       $X_gen_torq                   ) = '2200*$X_omg_error+220*$X_last_int_omg_error' ! Definition

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_Fx                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fx                         ) = $I_Fx                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fx                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fx                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fx                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fx                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fx                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_Fx                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fx                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

excit.type (                        $E_Fy                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fy                         ) = $I_Fy                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fy                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fy                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fy                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fy                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fy                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_Fy                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fy                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

excit.type (                        $E_Fz                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fz                         ) = $I_Fz                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fz                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fz                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fz                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fz                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fz                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_Fz                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fz                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

excit.type (                        $E_Mx                         ) = 2                       ! Type
excit.par (               1 ,       $E_Mx                         ) = $I_Mx                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Mx                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Mx                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Mx                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Mx                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Mx                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_Mx                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_Mx                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

excit.type (                        $E_My                         ) = 2                       ! Type
excit.par (               1 ,       $E_My                         ) = $I_My                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_My                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_My                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_My                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_My                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_My                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_My                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_My                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

excit.type (                        $E_Mz                         ) = 2                       ! Type
excit.par (               1 ,       $E_Mz                         ) = $I_Mz                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Mz                         ) = 0.0000000000000000E+00  ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Mz                         ) = 0.0000000000000000E+00  ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Mz                         ) = 0.0000000000000000E+00  ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Mz                         ) = 0.0000000000000000E+00  ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Mz                         ) = 0.0000000000000000E+00  ! [s] Time offset t0
excit.par (               7 ,       $E_Mz                         ) = 1.0000000000000000E+00  ! [-] Time scaling factor a
excit.par (               8 ,       $E_Mz                         ) = 1.0000000000000000E+00  ! [-] Scaling factor c

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_Fx                        ) = 1                       ! Type
uele.excit (                        $UE_Fx                        ) = $E_Fx                   ! Referenced Excitation
uele.index (                        $UE_Fx                        ) = 0                       ! Index

uele.type (                         $UE_Fy                        ) = 1                       ! Type
uele.excit (                        $UE_Fy                        ) = $E_Fy                   ! Referenced Excitation
uele.index (                        $UE_Fy                        ) = 0                       ! Index

uele.type (                         $UE_Fz                        ) = 1                       ! Type
uele.excit (                        $UE_Fz                        ) = $E_Fz                   ! Referenced Excitation
uele.index (                        $UE_Fz                        ) = 0                       ! Index

uele.type (                         $UE_Mx                        ) = 1                       ! Type
uele.excit (                        $UE_Mx                        ) = $E_Mx                   ! Referenced Excitation
uele.index (                        $UE_Mx                        ) = 0                       ! Index

uele.type (                         $UE_My                        ) = 1                       ! Type
uele.excit (                        $UE_My                        ) = $E_My                   ! Referenced Excitation
uele.index (                        $UE_My                        ) = 0                       ! Index

uele.type (                         $UE_Mz                        ) = 1                       ! Type
uele.excit (                        $UE_Mz                        ) = $E_Mz                   ! Referenced Excitation
uele.index (                        $UE_Mz                        ) = 0                       ! Index

!**********************************************************************
! Materials
!**********************************************************************
material.dens (                     $Mat_Steel                    ) = 7.8500000000000000E+03  ! Density
material.pois (                     $Mat_Steel                    ) = 2.9999999999999999E-01  ! Poisson ratio
material.E (                        $Mat_Steel                    ) = 2.1000000000000000E+11  ! Young's modulus
material.G (                        $Mat_Steel                    ) = 8.0769230769230774E+10  ! Shear modulus

!**********************************************************************
! Cross Sections
!**********************************************************************
xsection.type (                     $XSc_Shaft_IMS_HS             ) = 2                       ! Type
xsection.par (            1 ,       $XSc_Shaft_IMS_HS             ) = $Mat_Steel              ! [-] Material
xsection.par (            3 ,       $XSc_Shaft_IMS_HS             ) = 5.0000000000000000E-01  ! [m] Outer diameter
xsection.par (            4 ,       $XSc_Shaft_IMS_HS             ) = 2.0000000000000001E-01  ! [m] Inner diameter

                                                                                                                                                            
