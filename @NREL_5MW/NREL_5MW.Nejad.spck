!file.version=3.4! Removing this line will make the file unreadable

!**********************************************************************
! Simpack Version Information
!**********************************************************************
version.number = 20200100
version.desc   = ''
version.build  = 82

!**********************************************************************
!  Global parameters
!**********************************************************************
searchpath (              1                                       ) = '.'
searchpath (              2                                       ) = 'input_functions'
gravity (                 1                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 2                                       ) = 0.00000000000000000E+00 ! Gravity
gravity (                 3                                       ) = -9.81000000000000050E+00 ! Gravity
vehicle.startvel                                                    = 0.00000000000000000E+00 ! Vehicle initial velocity
vehicle.applystartvel                                               = 0                       ! Apply vehicle initial velocity at solver start
glob.compat.flxnodeori                                              = 0                       ! Flexbody Node Orientation Method
glob.compat.afcf                                                    = 0                       ! References Frame for Joint and Force Element Forces and Torques
glob.compat.track.excit                                             = 1                       ! Track Excitation rotation sequence
glob.rhs.tuning.type                                                = 0                       ! Formalism Tuning Type
glob.rhs.tuning.flags (   1                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   2                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   3                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   4                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   5                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   6                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   7                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   8                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (   9                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  10                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  11                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  12                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  13                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  14                                       ) = 1                       ! Formalism Tuning Flags
glob.rhs.tuning.flags (  15                                       ) = 1                       ! Formalism Tuning Flags
rw.cont.meth                                                        = 2                       ! MISCPAR_RW_CONTACT_METHOD
rw.linear                                                           = 0                       ! MISCPAR_RW_PROFILE_LINEARIZATION_METHOD
time                                                                = 0.00000000000000000E+00 ! Time
slv.active                                                          = $SLV_SolverSettings     ! Active SolverSettings element
track.active                                                        = null                    ! Active Track element
glob.ifctn.bounds                                                   = 1                       ! Cubic spline boundary conditions
subvarset.file (          1                                       ) = 'NREL_5MW.Nejad.subvar' ! subvarset filename
subvarset.role (          1                                       ) = 1                       ! subvarset role: 0 = ini subvarset; 1 = overwriting (late) subvarset
prop3d.bg.base.color.r                                              = 9.90000000000000000E+01 ! Background color (red component)
prop3d.bg.base.color.g                                              = 1.84000000000000000E+02 ! Background color (green component)
prop3d.bg.base.color.b                                              = 2.55000000000000000E+02 ! Background color (blue component)
prop3d.bg.base.color.t                                              = 0.00000000000000000E+00 ! Background color (transparency component)
prop3d.bg.grad.color.r                                              = 2.55000000000000000E+02 ! Gradient color (red component)
prop3d.bg.grad.color.g                                              = 2.55000000000000000E+02 ! Gradient color (green component)
prop3d.bg.grad.color.b                                              = 2.55000000000000000E+02 ! Gradient color (blue component)
prop3d.bg.grad.color.t                                              = 0.00000000000000000E+00 ! Gradient color (transparency component)
prop3d.bg.gradient                                                  = 1                       ! 0 = constant, 1 = gradient
prop3d.marker.size                                                  = 0.00000000000000000E+00 ! length of Marker axes, if value is zero, use "auto"
prop3d.marker.auto                                                  = 1                       ! 0 = user defined, 1 = auto size determination
prop3d.marker.color.r                                               = 0.00000000000000000E+00 ! Marker color (red component)
prop3d.marker.color.g                                               = 0.00000000000000000E+00 ! Marker color (green component)
prop3d.marker.color.b                                               = 0.00000000000000000E+00 ! Marker color (blue component)
prop3d.marker.color.t                                               = 0.00000000000000000E+00 ! Marker color (transparency component)
prop3d.display                                                      = 1                       ! 1 = shaded,  2 = wireframe, 3 = hidden line
prop3d.bbox                                                         = 0                       ! 0 = exclude all refsys objects, 1 = include all refsys objects
prop2d.joint.visible                                                = 1                       ! Joints visible
prop2d.force.visible                                                = 1                       ! Forces visible
prop2d.constr.visible                                               = 1                       ! Constraints visible
prop2d.sensor.visible                                               = 0                       ! Sensors visible
prop2d.grid.visible                                                 = 0                       ! Show grid
prop2d.grid.hor.start                                               = 0.00000000000000000E+00 ! Horizontal offset
prop2d.grid.hor.step                                                = 1.00000000000000000E+01 ! Horizontal step
prop2d.grid.vert.start                                              = 0.00000000000000000E+00 ! Vertical offset
prop2d.grid.vert.step                                               = 1.00000000000000000E+01 ! Vertical step
prop2d.line.width                                                   = 0                       ! Line width
prop2d.proj.dir                                                     = 2                       ! Projection direction


!**********************************************************************
! Views
!**********************************************************************
view.type (                         $V_WorkingView                ) = 0                       ! Projection type
view.pos (                1 ,       $V_WorkingView                ) = 4.13752126693725586E+00 ! Position
view.pos (                2 ,       $V_WorkingView                ) = -4.49333238601684570E+00 ! Position
view.pos (                3 ,       $V_WorkingView                ) = 2.32783913612365723E+00 ! Position
view.orient (             1 ,       $V_WorkingView                ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_WorkingView                ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_WorkingView                ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_WorkingView                ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_WorkingView                ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_WorkingView                ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_WorkingView                ) = 1                       ! Back clipping plane auto
view.fclip.value (                  $V_WorkingView                ) = 1.28433573991060257E-02 ! Front clipping plane value
view.bclip.value (                  $V_WorkingView                ) = 1.28433570861816406E+01 ! Back clipping plane value
view.rotcenter.type (               $V_WorkingView                ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_WorkingView                ) = 1                       ! Adjust rotation center
view.motion.active (                $V_WorkingView                ) = 0                       ! Camera is moved
view.stereo.active (                $V_WorkingView                ) = 0                       ! Stereo enabled
view.stereo.balance (               $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo balance
view.stereo.offset (                $V_WorkingView                ) = 1.00000000000000000E+00 ! Stereo offset

view.type (                         $V_Ortho                      ) = 0                       ! Projection type
view.pos (                1 ,       $V_Ortho                      ) = 6.85247761197388172E-01 ! Position
view.pos (                2 ,       $V_Ortho                      ) = -7.19467787537723780E-01 ! Position
view.pos (                3 ,       $V_Ortho                      ) = 3.52404586199554615E-01 ! Position
view.orient (             1 ,       $V_Ortho                      ) = 5.24405717849731445E-01 ! Orientation
view.orient (             2 ,       $V_Ortho                      ) = 2.11789414286613464E-01 ! Orientation
view.orient (             3 ,       $V_Ortho                      ) = 2.88275688886642456E-01 ! Orientation
view.orient (             4 ,       $V_Ortho                      ) = 7.72684276103973389E-01 ! Orientation
view.angle (                        $V_Ortho                      ) = 7.85398185253143311E-01 ! Lens angle
view.fclip.auto (                   $V_Ortho                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Ortho                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Ortho                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Ortho                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Ortho                      ) = 0                       ! Camera is moved

view.type (                         $V_Front                      ) = 1                       ! Projection type
view.pos (                1 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Front                      ) = -5.99845290184020996E-01 ! Position
view.pos (                3 ,       $V_Front                      ) = 2.98023294931226701E-08 ! Position
view.orient (             1 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.orient (             2 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Front                      ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Front                      ) = 7.07106769084930420E-01 ! Orientation
view.height (                       $V_Front                      ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Front                      ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Front                      ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Front                      ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Front                      ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Front                      ) = 0                       ! Camera is moved

view.type (                         $V_Top                        ) = 1                       ! Projection type
view.pos (                1 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Position
view.pos (                2 ,       $V_Top                        ) = -7.49893719330430031E-04 ! Position
view.pos (                3 ,       $V_Top                        ) = 5.99095582962036133E-01 ! Position
view.orient (             1 ,       $V_Top                        ) = 2.51447520582814832E-08 ! Orientation
view.orient (             2 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             3 ,       $V_Top                        ) = 0.00000000000000000E+00 ! Orientation
view.orient (             4 ,       $V_Top                        ) = 1.00000000000000000E+00 ! Orientation
view.height (                       $V_Top                        ) = 8.00000000000000044E-01 ! View height
view.fclip.auto (                   $V_Top                        ) = 1                       ! Front clipping plane auto
view.bclip.auto (                   $V_Top                        ) = 1                       ! Back clipping plane auto
view.rotcenter.type (               $V_Top                        ) = 0                       ! Rotation center type
view.rotcenter.adjust (             $V_Top                        ) = 1                       ! Adjust rotation center
view.motion.active (                $V_Top                        ) = 0                       ! Camera is moved

!**********************************************************************
! Solver Settings
!**********************************************************************
slv.kin.task (                      $SLV_SolverSettings           ) = 3                       ! KIN_INTPAR_TASK
slv.kin.tout.n (                    $SLV_SolverSettings           ) = 201                     ! KIN_INTPAR_NUM_STEPS
slv.kin.tol (                       $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! Kinematics tolerance
slv.integ.fix.driftstab (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_CONSTAB
slv.integ.fix.jac.update (          $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_FIXINT_JACOBIAN_EVAL
slv.integ.fix.part.type (           $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_INTPAR_FIXINT_JAC_PART_TYPE
slv.integ.fix.order (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_METHOD_ORDER
slv.integ.fix.posup (               $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FIXINT_POS_COORD_UPDATE
slv.integ.sodasrt.formalism (       $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_FORMALISM
slv.integ.type (                    $SLV_SolverSettings           ) = 7                       ! Integrator type
slv.integ.jac.struc (               $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_JACOBIAN_STRUC
slv.integ.jac.incr.type (           $SLV_SolverSettings           ) = 2                       ! Jacobian increment type
slv.integ.linalg.slv (              $SLV_SolverSettings           ) = 1                       ! 1 = dense ; 2 = sparse (UMFPACK) ; 3 = sparse (PARDISO)
slv.integ.lsode.meth (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_PAR_LSODE_INTEG_METHOD
slv.integ.lsode.jac.struc (         $SLV_SolverSettings           ) = 3                       ! SOLVER_TIME_INTEG_PAR_LSODE_JACOBIAN_STRUC
slv.integ.lsode.maxord (            $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_LSODE_MAX_ORDER
slv.integ.maxrhs (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_RHS
slv.integ.maxstp (                  $SLV_SolverSettings           ) = -1                      ! TIME_INTEG_INTPAR_MAX_TIME_STEPS
slv.integ.newton.maxit (            $SLV_SolverSettings           ) = 7                       ! TIME_INTEG_INTPAR_NEWTON_ITERS
slv.integ.tout.n (                  $SLV_SolverSettings           ) = 101                     ! TIME_INTEG_INTPAR_OUTPUT_NUM_POINTS
slv.integ.sodasrt2.iestsc (         $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_PAR_SODASRT20_ERROR_EST_SCALE_METHOD
slv.integ.sodasrt.maxord (          $SLV_SolverSettings           ) = 5                       ! TIME_INTEG_INTPAR_SODASRT_MAX_ORDER
slv.integ.sodasrt1.errnorm (        $SLV_SolverSettings           ) = 3                       ! TIME_INTEG_PAR_SODASRT_NORM_TYPE
slv.integ.tout.mode (               $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_INTPAR_TOUT_MODE
slv.integ.meetop (                  $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EVAL_MOTION_EQ_AT_COMM_POINTS
slv.integ.driftstab (               $SLV_SolverSettings           ) = 2                       ! TIME_INTEG_BOOLPAR_ACCEPT_DRIFT
slv.integ.root (                    $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_DETECT_IMPLICIT_DISCONTINUITIES
slv.integ.jac.part (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_PARTITIONED_EVAL_JACOBIAN
slv.integ.addrhscall (              $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_EXTRA_EVAL_AFTER_SUCCESSFUL_STEP
slv.integ.linalg.red2nd (           $SLV_SolverSettings           ) = 1                       ! Linear equations second order reduction
slv.integ.fix.oneleg (              $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_IMPLICIT_ONE_LEG_OLC
slv.integ.fix.conforce (            $SLV_SolverSettings           ) = 0                       ! TIME_INTEG_BOOLPAR_FIXINT_CONFORCE
slv.integ.fix.clss (                $SLV_SolverSettings           ) = 1                       ! TIME_INTEG_BOOLPAR_FIXINT_METHOD_CLASS
slv.integ.sodasrt1.scal.lam (       $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_SCALARPAR_SCALE_CONSTRAINT_FORCES
slv.integ.sodasrt1.scal.acc (       $SLV_SolverSettings           ) = 1.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_SCALE_ACCELERATIONS
slv.integ.newton.eps (              $SLV_SolverSettings           ) = 3.33000000000000018E-01 ! TIME_INTEG_SCALARPAR_NEWTON_ERROR_BOUND
slv.integ.fix.utcpar (              $SLV_SolverSettings           ) = 0.00000000000000000E+00 ! TIME_INTEG_SCALARPAR_FIXINT_EULER_UTC
slv.integ.fix.olcpar (              $SLV_SolverSettings           ) = 5.00000000000000000E-01 ! TIME_INTEG_SCALARPAR_FIXINT_ONE_LEG_OLC
slv.integ.sodasrt2.estfac (         $SLV_SolverSettings           ) = 9.99999999999999955E-07 ! TIME_INTEG_SCALARPAR_SODASRT20_ERROR_EST_SCALE_FACTOR
slv.integ.tout.freq (               $SLV_SolverSettings           ) = { 500 Hz }              ! TIME_INTEG_PAR_OUTPUT_FREQ
slv.integ.tend.time (               $SLV_SolverSettings           ) = { 1000 s }              ! TIME_INTEG_TIMEPAR_END_TIME
slv.integ.atol.gen (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.atol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.atol.vel (                $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_VEL
slv.integ.atol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.integ.rtol.gen (                $SLV_SolverSettings           ) = 9.99999999999999955E-08 ! TIME_INTEG_PARSTATE_DEFAULT
slv.integ.rtol.body.flx.st.pos (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_POS
slv.integ.rtol.vel (                $SLV_SolverSettings           ) = 1.00000000000000008E-05 ! TIME_INTEG_PARSTATE_VEL
slv.integ.rtol.body.flx.st.vel (    $SLV_SolverSettings           ) = 1.00000000000000005E-04 ! TIME_INTEG_PARSTATE_BODY_FLX_ST_VEL
slv.meas.time.start (               $SLV_SolverSettings           ) = 0.00000000000000000E+00 ! MEAS_PAR_TIME_START
slv.meas.geo (                      $SLV_SolverSettings           ) = 1                       ! Animation data to result file
slv.meas.sensor.pos (               $SLV_SolverSettings           ) = 1                       ! Sensor position to result file
slv.meas.sensor.vel (               $SLV_SolverSettings           ) = 1                       ! Sensor velocity to result file
slv.meas.sensor.acc (               $SLV_SolverSettings           ) = 1                       ! Sensor acceleration to result file
slv.meas.force.af (                 $SLV_SolverSettings           ) = 1                       ! applied forces to result file
slv.meas.force.ov (                 $SLV_SolverSettings           ) = 1                       ! Force outpur values to result file
slv.meas.force.st.dyn (             $SLV_SolverSettings           ) = 1                       ! Force dynamic states to result file
slv.meas.force.st.alg (             $SLV_SolverSettings           ) = 1                       ! Force algebraic states to result file
slv.meas.joint.st.pos (             $SLV_SolverSettings           ) = 1                       ! Joint position to result file
slv.meas.joint.st.vel (             $SLV_SolverSettings           ) = 1                       ! Joint velocity to result file
slv.meas.joint.st.acc (             $SLV_SolverSettings           ) = 1                       ! Joint acceleration to result file
slv.meas.joint.cf (                 $SLV_SolverSettings           ) = 1                       ! Joint constraining forces to result file
slv.meas.body.pos (                 $SLV_SolverSettings           ) = 1                       ! Body position to result file
slv.meas.body.vel (                 $SLV_SolverSettings           ) = 1                       ! Body velocity to result file
slv.meas.body.acc (                 $SLV_SolverSettings           ) = 1                       ! Body acceleration to result file
slv.meas.body.flx.st.pos (          $SLV_SolverSettings           ) = 1                       ! Body elastic state position to result file
slv.meas.body.flx.st.vel (          $SLV_SolverSettings           ) = 1                       ! Body elastic state velocity to result file
slv.meas.body.flx.st.acc (          $SLV_SolverSettings           ) = 1                       ! Body elastic state acceleration to result file
slv.meas.marker.st.alg (            $SLV_SolverSettings           ) = 1                       ! Marker algebraic state to result file
slv.meas.constr.cf (                $SLV_SolverSettings           ) = 1                       ! Constraint constrained state to result file
slv.meas.yout (                     $SLV_SolverSettings           ) = 1                       ! y-Outputs to result file
slv.meas.result (                   $SLV_SolverSettings           ) = 1                       ! Result elements to result file
slv.meas.subvar (                   $SLV_SolverSettings           ) = 1                       ! MEAS_BOOLPAR_SUBVAR
slv.assmbl.task (                   $SLV_SolverSettings           ) = 3                       ! ASSMBL_PAR_SOLVER_MODE
slv.output.path.type (              $SLV_SolverSettings           ) = 1                       ! OUTPUT_PATH_PAR_TYPE
slv.output.mat.enabled (            $SLV_SolverSettings           ) = 1                       ! mat file generation 0 = disable; 1 = enable
slv.output.eva.enabled (            $SLV_SolverSettings           ) = 1                       ! eva file generation 0 = disable; 1 = enable
slv.output.file.desc (              $SLV_SolverSettings           ) = ''                      ! Description written to the output file if supported
slv.output.fileinlining.enabled (   $SLV_SolverSettings           ) = 0                       ! file inlining 0 = disable; 1 = enable
slv.compat.solver (                 $SLV_SolverSettings           ) = 1                       ! 0 = no (new solver); 1 = yes (classic solver)
slv.equi.fallback.enable (          $SLV_SolverSettings           ) = 0                       ! Enable fallbacks
slv.init.tol (                      $SLV_SolverSettings           ) = 1.00000000000000002E-08 ! Tolerance used for Assemble System and Initial Conditions
slv.txt (                           $SLV_SolverSettings           ) = ''                      ! Comment

!**********************************************************************
! SubVars
!**********************************************************************
subvargroup.begin (                 $SVG_main_shaft_LSS           )                           ! $SVG_main_shaft_LSS
   subvargroup.begin (              $SVG_INP_A                    )                           ! $SVG_main_shaft_LSS.$SVG_INP_A
   subvargroup.end (                $SVG_INP_A                    )                           ! $SVG_main_shaft_LSS.$SVG_INP_A
   subvargroup.begin (              $SVG_INP_B                    )                           ! $SVG_main_shaft_LSS.$SVG_INP_B
   subvargroup.end (                $SVG_INP_B                    )                           ! $SVG_main_shaft_LSS.$SVG_INP_B
subvargroup.end (                   $SVG_main_shaft_LSS           )                           ! $SVG_main_shaft_LSS

subvargroup.begin (                 $SVG_stage_01                 )                           ! $SVG_stage_01
   subvargroup.begin (              $SVG_PLC_A                    )                           ! $SVG_stage_01.$SVG_PLC_A
   subvargroup.end (                $SVG_PLC_A                    )                           ! $SVG_stage_01.$SVG_PLC_A
   subvargroup.begin (              $SVG_PLC_B                    )                           ! $SVG_stage_01.$SVG_PLC_B
   subvargroup.end (                $SVG_PLC_B                    )                           ! $SVG_stage_01.$SVG_PLC_B
   subvargroup.begin (              $SVG_PL_AB                    )                           ! $SVG_stage_01.$SVG_PL_AB
   subvargroup.end (                $SVG_PL_AB                    )                           ! $SVG_stage_01.$SVG_PL_AB
subvargroup.end (                   $SVG_stage_01                 )                           ! $SVG_stage_01

subvargroup.begin (                 $SVG_stage_02                 )                           ! $SVG_stage_02
   subvargroup.begin (              $SVG_IMS_PLC_A                )                           ! $SVG_stage_02.$SVG_IMS_PLC_A
   subvargroup.end (                $SVG_IMS_PLC_A                )                           ! $SVG_stage_02.$SVG_IMS_PLC_A
   subvargroup.begin (              $SVG_IMS_PLC_B                )                           ! $SVG_stage_02.$SVG_IMS_PLC_B
   subvargroup.end (                $SVG_IMS_PLC_B                )                           ! $SVG_stage_02.$SVG_IMS_PLC_B
   subvargroup.begin (              $SVG_PL_AB                    )                           ! $SVG_stage_02.$SVG_PL_AB
   subvargroup.end (                $SVG_PL_AB                    )                           ! $SVG_stage_02.$SVG_PL_AB
subvargroup.end (                   $SVG_stage_02                 )                           ! $SVG_stage_02

subvargroup.begin (                 $SVG_stage_03                 )                           ! $SVG_stage_03
   subvargroup.begin (              $SVG_IMS_A                    )                           ! $SVG_stage_03.$SVG_IMS_A
   subvargroup.end (                $SVG_IMS_A                    )                           ! $SVG_stage_03.$SVG_IMS_A
   subvargroup.begin (              $SVG_IMS_B                    )                           ! $SVG_stage_03.$SVG_IMS_B
   subvargroup.end (                $SVG_IMS_B                    )                           ! $SVG_stage_03.$SVG_IMS_B
   subvargroup.begin (              $SVG_IMS_C                    )                           ! $SVG_stage_03.$SVG_IMS_C
   subvargroup.end (                $SVG_IMS_C                    )                           ! $SVG_stage_03.$SVG_IMS_C
   subvargroup.begin (              $SVG_HS_A                     )                           ! $SVG_stage_03.$SVG_HS_A
   subvargroup.end (                $SVG_HS_A                     )                           ! $SVG_stage_03.$SVG_HS_A
   subvargroup.begin (              $SVG_HS_B                     )                           ! $SVG_stage_03.$SVG_HS_B
   subvargroup.end (                $SVG_HS_B                     )                           ! $SVG_stage_03.$SVG_HS_B
   subvargroup.begin (              $SVG_HS_C                     )                           ! $SVG_stage_03.$SVG_HS_C
   subvargroup.end (                $SVG_HS_C                     )                           ! $SVG_stage_03.$SVG_HS_C
subvargroup.end (                   $SVG_stage_03                 )                           ! $SVG_stage_03

subvargroup.begin (                 $SVG_mesh                     )                           ! $SVG_mesh
   subvar.str (                     $_full_damping                ) = '10e-6 m'               ! $SVG_mesh.$_full_damping, Definition

subvargroup.end (                   $SVG_mesh                     )                           ! $SVG_mesh

subvargroup.begin (                 $SVG_generator                )                           ! $SVG_generator
subvargroup.end (                   $SVG_generator                )                           ! $SVG_generator

subvargroup.begin (                 $SVG_base_input               )                           ! $SVG_base_input
subvargroup.end (                   $SVG_base_input               )                           ! $SVG_base_input

!**********************************************************************
! Reference systems
!**********************************************************************
refsys.type (                       $R_Isys                       ) = 1                       ! Type
refsys.attr.2d.pos.x (              $R_Isys                       ) = -9.00000000000000000E+01
refsys.attr.2d.pos.y (              $R_Isys                       ) = -1.00000000000000000E+01
refsys.attr.2d.width (              $R_Isys                       ) = 2.40000000000000000E+02
refsys.attr.2d.height (             $R_Isys                       ) = 2.20000000000000000E+02

marker.type (                       $M_Isys                       ) = 1                       ! Type
marker.parent (                     $M_Isys                       ) = $R_Isys                 ! Reference system

prim.type (                         $P_Isys                       ) = 30                      ! Type
prim.ref (                          $P_Isys                       ) = $M_Isys                 ! Reference Marker
prim.color.r (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Isys                       ) = 1.48000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Isys                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.par (                3 ,       $P_Isys                       ) = 1.00000000000000006E-01 ! [m] Length


!**********************************************************************
! Bodies
!**********************************************************************
body.m (                            $Gearbox_Frame                ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $Gearbox_Frame                ) = 0                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $Gearbox_Frame                ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $Gearbox_Frame                ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $Gearbox_Frame                ) = 1.00000000000000000E+00 ! Moments of inertia
body.attr.2d.pos.x (                $Gearbox_Frame                ) = -3.00000000000000000E+01
body.attr.2d.pos.y (                $Gearbox_Frame                ) = 3.00000000000000000E+01
body.attr.2d.width (                $Gearbox_Frame                ) = 1.10000000000000000E+02
body.attr.2d.height (               $Gearbox_Frame                ) = 8.00000000000000000E+01

marker.type (                       $M_Gearbox_Frame_BRF          ) = 1                       ! Type
marker.parent (                     $M_Gearbox_Frame_BRF          ) = $Gearbox_Frame          ! Body
marker.flx.type (                   $M_Gearbox_Frame_BRF          ) = 4                       ! Flexible type

marker.type (                       $M_Gearbox_Frame_IMS          ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS          ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS          ) = { 1.5*$SVG_main_shaft_LSS.$_gamma_d } ! Position

marker.type (                       $M_Gearbox_Frame_SHAFT_LS_IMS ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_SHAFT_LS_IMS ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_SHAFT_LS_IMS ) = { 0.75*$SVG_main_shaft_LSS.$_gamma_d } ! Position

marker.type (                       $M_Gearbox_Frame_SHAFT_IMS_HS ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_SHAFT_IMS_HS ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_SHAFT_IMS_HS ) = { (2250-250)*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position

marker.type (                       $M_Gearbox_Frame_HS_Pinion    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_HS_Pinion    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_HS_Pinion    ) = { (3000-500)*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_HS_Pinion    ) = { -861*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_HS_Pinion    ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_A) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_A) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_A) = { (2770-500)*$SVG_stage_03.$_gamma_d mm } ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_B) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_B) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_B) = { (3230-500)*$SVG_stage_03.$_gamma_d mm } ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_IMS_C) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_IMS_C) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_IMS_C) = { (3280-500)*$SVG_stage_03.$_gamma_d mm } ! Position

marker.type (                       $M_Gearbox_Frame_Shaft_Gen    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Shaft_Gen    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Shaft_Gen    ) = { (3000-500)*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Shaft_Gen    ) = { -861*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Shaft_Gen    ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_A ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_A ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_A ) = { (2770-500)*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_A ) = { -861*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_A ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_B ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_B ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_B ) = { (3230-500)*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_B ) = { -861*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_B ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_Gearbox_Frame_Bearing_HS_C ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_Bearing_HS_C ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_Bearing_HS_C ) = { (3280-500)*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_Gearbox_Frame_Bearing_HS_C ) = { -861*$SVG_main_shaft_LSS.$_gamma_d mm } ! Position
marker.pos (              3 ,       $M_Gearbox_Frame_Bearing_HS_C ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_Gearbox_Frame_LS_PLC_A     ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_LS_PLC_A     ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_LS_PLC_A     ) = { -0.5*$SVG_stage_01.$_gamma_b } ! Position

marker.type (                       $M_Gearbox_Frame_LS_PLC_B     ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_LS_PLC_B     ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_LS_PLC_B     ) = { 0.5*$SVG_stage_01.$_gamma_b } ! Position

marker.type (                       $M_Gearbox_Frame_IMS_PLC_A    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS_PLC_A    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS_PLC_A    ) = { 1*$SVG_stage_02.$_gamma_d } ! Position

marker.type (                       $M_Gearbox_Frame_IMS_PLC_B    ) = 2                       ! Type
marker.parent (                     $M_Gearbox_Frame_IMS_PLC_B    ) = $Gearbox_Frame          ! Body
marker.pos (              1 ,       $M_Gearbox_Frame_IMS_PLC_B    ) = { 2*$SVG_stage_02.$_gamma_d } ! Position

joint.from (                        $J_Gearbox_Frame              ) = $M_Bed_Plate_GB_Frame   ! From Marker
joint.to (                          $J_Gearbox_Frame              ) = $M_Gearbox_Frame_BRF    ! To Marker
joint.type (                        $J_Gearbox_Frame              ) = 0                       ! Type
joint.par (               1 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_Gearbox_Frame              ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_Gearbox_Frame              ) = 20
joint.attr.2d.pos.y (     1 ,       $J_Gearbox_Frame              ) = 170
joint.attr.2d.ori (       1 ,       $J_Gearbox_Frame              ) = 270
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Gearbox_Frame) = 380, 380, 20, 20
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Gearbox_Frame) = 10, 197, 197, 187
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Gearbox_Frame) = 20, 20
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Gearbox_Frame) = 110, 153

prim.type (                         $P_Gearbox_Frame_Cuboid       ) = 1                       ! Type
prim.ref (                          $P_Gearbox_Frame_Cuboid       ) = $M_Gearbox_Frame_BRF    ! Reference Marker
prim.pos (                1 ,       $P_Gearbox_Frame_Cuboid       ) = { 1.2*$SVG_main_shaft_LSS.$_gamma_L } ! Position
prim.color.r (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 3.00000000000000000E+01 ! Colors (red component)
prim.color.g (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 1.44000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 2.55000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Gearbox_Frame_Cuboid       ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.drawstyle (                    $P_Gearbox_Frame_Cuboid       ) = 2                       ! Draw style
prim.transparency (                 $P_Gearbox_Frame_Cuboid       ) = 2.50000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_Gearbox_Frame_Cuboid       ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Gearbox_Frame_Cuboid       ) = { 4*$SVG_main_shaft_LSS.$_gamma_d m } ! [m] Length in X
prim.par (                3 ,       $P_Gearbox_Frame_Cuboid       ) = { 3*$SVG_main_shaft_LSS.$_gamma_d m } ! [m] Length in Y
prim.par (                4 ,       $P_Gearbox_Frame_Cuboid       ) = { 3*$SVG_main_shaft_LSS.$_gamma_d m } ! [m] Length in Z


body.m (                            $B_Bed_Plate                  ) = 1.00000000000000000E+00 ! Mass of the Body
body.I.tens (             1 ,   1 , $B_Bed_Plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_Bed_Plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_Bed_Plate                  ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_Bed_Plate                  ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_Bed_Plate                  ) = 3.70000000000000000E+02
body.attr.2d.pos.y (                $B_Bed_Plate                  ) = -2.00000000000000000E+01
body.attr.2d.width (                $B_Bed_Plate                  ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_Bed_Plate                  ) = 3.00000000000000000E+01

marker.type (                       $M_Bed_Plate_BRF              ) = 1                       ! Type
marker.parent (                     $M_Bed_Plate_BRF              ) = $B_Bed_Plate            ! Body
marker.flx.type (                   $M_Bed_Plate_BRF              ) = 4                       ! Flexible type

marker.type (                       $M_Bed_Plate_GB_Frame         ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_GB_Frame         ) = $B_Bed_Plate            ! Body

marker.type (                       $M_Bed_Plate_Main_Shaft       ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Main_Shaft       ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Main_Shaft       ) = { -1.5*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_Bed_Plate_Bearing_INP_A    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Bearing_INP_A    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Bearing_INP_A    ) = { -2.5*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_Bed_Plate_Bearing_INP_B    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Bearing_INP_B    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Bearing_INP_B    ) = { (-0.5-0.25)*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_Bed_Plate_Input_Loading    ) = 2                       ! Type
marker.parent (                     $M_Bed_Plate_Input_Loading    ) = $B_Bed_Plate            ! Body
marker.pos (              1 ,       $M_Bed_Plate_Input_Loading    ) = { -3*$SVG_main_shaft_LSS.$_gamma_L } ! Position

joint.from (                        $J_Bed_Plate                  ) = $M_Isys                 ! From Marker
joint.to (                          $J_Bed_Plate                  ) = $M_Bed_Plate_BRF        ! To Marker
joint.type (                        $J_Bed_Plate                  ) = 0                       ! Type
joint.par (               1 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
joint.par (               2 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
joint.par (               3 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
joint.par (               4 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [m] Translation in x
joint.par (               5 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [m] Translation in y
joint.par (               6 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [m] Translation in z
joint.par (               7 ,       $J_Bed_Plate                  ) = 0.00000000000000000E+00 ! [-] Rotation sequence
joint.attr.2d.pos.x (     1 ,       $J_Bed_Plate                  ) = 320
joint.attr.2d.pos.y (     1 ,       $J_Bed_Plate                  ) = -20
joint.attr.2d.ori (       1 ,       $J_Bed_Plate                  ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Bed_Plate ) = 100, 100, 110, 120, 130, 140, 283, 283, 293, 303
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Bed_Plate ) = -10, 0, 0, 0, 0, 0, 0, -20, -20, -20
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Bed_Plate   ) = 370, 354.25, 354.25, 337
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Bed_Plate   ) = -10, -10, -20, -20
joint.attr.vel ( 1 , $J_Bed_Plate )  = 0
joint.attr.st.vel ( 1 , $J_Bed_Plate )  = 0
joint.attr.2d.pos.x(1,$J_Bed_Plate) =  320.0
joint.attr.2d.pos.y(1,$J_Bed_Plate) =  -20.0
joint.attr.2d.ori  (1,$J_Bed_Plate) =    0.0
joint.attr.2d.paths.from.x(1, 1, 1, 1,$J_Bed_Plate) =  100.0,  100.0 ,  110.0 ,  120.0, 130.0, 140.0, 283.0,  283.0,  293.0,  303.0
joint.attr.2d.paths.from.y(1, 1, 1, 1,$J_Bed_Plate) =  -10.0,    0.0 ,    0.0 ,    0.0,   0.0,   0.0,   0.0,  -20.0,  -20.0,  -20.0
joint.attr.2d.paths.to.x  (1, 1, 1, 1,$J_Bed_Plate) =  370.0,  354.25,  354.25,  337.0
joint.attr.2d.paths.to.y  (1, 1, 1, 1,$J_Bed_Plate) =  -10.0,  -10.0 ,  -20.0 ,  -20.0
joint.attr.st.vel(1$J_Bed_Plate) = 0.0

prim.type (                         $P_Bed_Plate                  ) = 1                       ! Type
prim.ref (                          $P_Bed_Plate                  ) = $M_Bed_Plate_BRF        ! Reference Marker
prim.pos (                3 ,       $P_Bed_Plate                  ) = { -2*$SVG_main_shaft_LSS.$_gamma_d } ! Position
prim.color.r (            1 ,       $P_Bed_Plate                  ) = 1.28000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_Bed_Plate                  ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.b (            1 ,       $P_Bed_Plate                  ) = 1.28000000000000000E+02 ! Colors (blue component)
prim.color.t (            1 ,       $P_Bed_Plate                  ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.shading (                      $P_Bed_Plate                  ) = 2                       ! Shading
prim.drawstyle (                    $P_Bed_Plate                  ) = 1                       ! Draw style
prim.transparency (                 $P_Bed_Plate                  ) = 5.00000000000000000E-01 ! Transparency
prim.mp.dens.solid (                $P_Bed_Plate                  ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_Bed_Plate                  ) = { 10*$SVG_main_shaft_LSS.$_gamma_L m } ! [m] Length in X
prim.par (                3 ,       $P_Bed_Plate                  ) = { 4*$SVG_main_shaft_LSS.$_gamma_d m } ! [m] Length in Y
prim.par (                4 ,       $P_Bed_Plate                  ) = { 0.3*$SVG_main_shaft_LSS.$_gamma_d m } ! [m] Length in Z


body.m (                            $B_main_shaft_LSS             ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_main_shaft_LSS             ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_main_shaft_LSS             ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_main_shaft_LSS             ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_main_shaft_LSS             ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_main_shaft_LSS             ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_main_shaft_LSS             ) = -1.80000000000000000E+02
body.attr.2d.pos.y (                $B_main_shaft_LSS             ) = -4.00000000000000000E+01
body.attr.2d.width (                $B_main_shaft_LSS             ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_main_shaft_LSS             ) = 3.00000000000000000E+01

marker.type (                       $M_main_shaft_LSS_BRF         ) = 1                       ! Type
marker.parent (                     $M_main_shaft_LSS_BRF         ) = $B_main_shaft_LSS       ! Body
marker.flx.type (                   $M_main_shaft_LSS_BRF         ) = 4                       ! Flexible type

marker.type (                       $M_main_shaft_LSS_Input_Loading) = 2                      ! Type
marker.parent (                     $M_main_shaft_LSS_Input_Loading) = $B_main_shaft_LSS      ! Body
marker.pos (              1 ,       $M_main_shaft_LSS_Input_Loading) = { -1.5*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_main_shaft_LSS_INP_A       ) = 2                       ! Type
marker.parent (                     $M_main_shaft_LSS_INP_A       ) = $B_main_shaft_LSS       ! Body
marker.pos (              1 ,       $M_main_shaft_LSS_INP_A       ) = { -1*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_main_shaft_LSS_INP_B       ) = 2                       ! Type
marker.parent (                     $M_main_shaft_LSS_INP_B       ) = $B_main_shaft_LSS       ! Body
marker.pos (              1 ,       $M_main_shaft_LSS_INP_B       ) = { 0.75*$SVG_main_shaft_LSS.$_gamma_L } ! Position

marker.type (                       $M_main_shaft_LSS_LS_PLC      ) = 2                       ! Type
marker.parent (                     $M_main_shaft_LSS_LS_PLC      ) = $B_main_shaft_LSS       ! Body
marker.pos (              1 ,       $M_main_shaft_LSS_LS_PLC      ) = { 1.5*$SVG_main_shaft_LSS.$_gamma_L } ! Position

joint.from (                        $J_main_shaft_LSS             ) = $M_Bed_Plate_Main_Shaft ! From Marker
joint.to (                          $J_main_shaft_LSS             ) = $M_main_shaft_LSS_BRF   ! To Marker
joint.type (                        $J_main_shaft_LSS             ) = 20                      ! Type
joint.st.pos (            1 ,       $J_main_shaft_LSS             ) = -4.79841136700913178E-05 ! Position
joint.st.pos (            2 ,       $J_main_shaft_LSS             ) = 5.38896161715914096E-06 ! Position
joint.st.pos (            3 ,       $J_main_shaft_LSS             ) = 2.58583887359094073E-10 ! Position
joint.st.pos (            4 ,       $J_main_shaft_LSS             ) = 3.39716596321834135E-09 ! Position
joint.st.pos (            5 ,       $J_main_shaft_LSS             ) = -1.05483222734221975E-15 ! Position
joint.st.pos (            6 ,       $J_main_shaft_LSS             ) = -8.58912417155160667E-06 ! Position
joint.st.vel (            1 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_main_shaft_LSS             ) = -140
joint.attr.2d.pos.y (     1 ,       $J_main_shaft_LSS             ) = -80
joint.attr.2d.ori (       1 ,       $J_main_shaft_LSS             ) = 180
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_main_shaft_LSS) = 370, -43, -43, -53, -63, -73, -83, -93, -103, -113, -123
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_main_shaft_LSS) = 0, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_main_shaft_LSS) = -160, -160, -157
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_main_shaft_LSS) = -40, -80, -80

prim.type (                         $P_main_shaft_LSS             ) = 2                       ! Type
prim.ref (                          $P_main_shaft_LSS             ) = $M_main_shaft_LSS_BRF   ! Reference Marker
prim.ang (                3 ,       $P_main_shaft_LSS             ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (red component)
prim.color.r (            2 ,       $P_main_shaft_LSS             ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_main_shaft_LSS             ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.b (            2 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_main_shaft_LSS             ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_main_shaft_LSS             ) = { 3*$SVG_main_shaft_LSS.$_gamma_L } ! [m] Height
prim.par (                3 ,       $P_main_shaft_LSS             ) = { 1*$SVG_main_shaft_LSS.$_gamma_d } ! [m] Outer diameter
prim.par (                4 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_main_shaft_LSS             ) = 1.50000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_main_shaft_LSS             ) = 2.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_main_shaft_LSS             ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_main_shaft_LSS             ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_main_shaft_LSS             ) = 0.00000000000000000E+00 ! [-] Close geometry with

prim.type (                         $P_main_shaft_LSS_Hub         ) = 2                       ! Type
prim.ref (                          $P_main_shaft_LSS_Hub         ) = $M_main_shaft_LSS_BRF   ! Reference Marker
prim.pos (                1 ,       $P_main_shaft_LSS_Hub         ) = { -1.5*$SVG_main_shaft_LSS.$_gamma_L } ! Position
prim.ang (                3 ,       $P_main_shaft_LSS_Hub         ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (red component)
prim.color.r (            2 ,       $P_main_shaft_LSS_Hub         ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_main_shaft_LSS_Hub         ) = 1.28000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.b (            2 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.incl (                      $P_main_shaft_LSS_Hub         ) = 0                       ! Include Primitive in computation
prim.par (                2 ,       $P_main_shaft_LSS_Hub         ) = { 0.75*$SVG_main_shaft_LSS.$_gamma_L } ! [m] Height
prim.par (                3 ,       $P_main_shaft_LSS_Hub         ) = { 1.5*$SVG_main_shaft_LSS.$_gamma_d } ! [m] Outer diameter
prim.par (                4 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_main_shaft_LSS_Hub         ) = 1.50000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_main_shaft_LSS_Hub         ) = 4.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_main_shaft_LSS_Hub         ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_main_shaft_LSS_Hub         ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_main_shaft_LSS_Hub         ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_ISShaft                    ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_ISShaft                    ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_ISShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_ISShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_ISShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_ISShaft                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_ISShaft                    ) = 6.60000000000000000E+02
body.attr.2d.pos.y (                $B_ISShaft                    ) = -1.30000000000000000E+02
body.attr.2d.width (                $B_ISShaft                    ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_ISShaft                    ) = 3.00000000000000000E+01

marker.type (                       $M_ISShaft_BRF                ) = 1                       ! Type
marker.parent (                     $M_ISShaft_BRF                ) = $B_ISShaft              ! Body
marker.flx.type (                   $M_ISShaft_BRF                ) = 4                       ! Flexible type

marker.type (                       $M_ISShaft_LS_SUN             ) = 2                       ! Type
marker.parent (                     $M_ISShaft_LS_SUN             ) = $B_ISShaft              ! Body
marker.pos (              1 ,       $M_ISShaft_LS_SUN             ) = { -0.75*$SVG_stage_01.$_gamma_L } ! Position

marker.type (                       $M_ISShaft_PLC                ) = 2                       ! Type
marker.parent (                     $M_ISShaft_PLC                ) = $B_ISShaft              ! Body
marker.pos (              1 ,       $M_ISShaft_PLC                ) = { 0.75*$SVG_stage_01.$_gamma_L } ! Position

joint.from (                        $J_ISShaft                    ) = $M_Gearbox_Frame_SHAFT_LS_IMS ! From Marker
joint.to (                          $J_ISShaft                    ) = $M_ISShaft_BRF          ! To Marker
joint.type (                        $J_ISShaft                    ) = 20                      ! Type
joint.st.pos (            1 ,       $J_ISShaft                    ) = -8.07604976000964890E-06 ! Position
joint.st.pos (            2 ,       $J_ISShaft                    ) = -8.64379862495825166E-05 ! Position
joint.st.pos (            3 ,       $J_ISShaft                    ) = -1.32463695247950270E-08 ! Position
joint.st.pos (            4 ,       $J_ISShaft                    ) = -1.22557284172935277E-07 ! Position
joint.st.pos (            5 ,       $J_ISShaft                    ) = 1.78990346067221575E-08 ! Position
joint.st.pos (            6 ,       $J_ISShaft                    ) = -1.23214990551737493E-04 ! Position
joint.st.vel (            1 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_ISShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_ISShaft                    ) = 540
joint.attr.2d.pos.y (     1 ,       $J_ISShaft                    ) = -160
joint.attr.2d.ori (       1 ,       $J_ISShaft                    ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_ISShaft   ) = 70, 70, 389.75, 389.75, 399.75, 409.75, 523
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_ISShaft   ) = 30, -115, -115, -160, -160, -160, -160
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_ISShaft     ) = 660, 626.75, 626.75, 557
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_ISShaft     ) = -120, -120, -160, -160

prim.type (                         $P_ISShaft                    ) = 2                       ! Type
prim.ref (                          $P_ISShaft                    ) = $M_ISShaft_BRF          ! Reference Marker
prim.ang (                1 ,       $P_ISShaft                    ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_ISShaft                    ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_ISShaft                    ) = 3.40000000000000000E+01 ! Colors (red component)
prim.color.r (            2 ,       $P_ISShaft                    ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_ISShaft                    ) = 1.39000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_ISShaft                    ) = 3.40000000000000000E+01 ! Colors (blue component)
prim.color.b (            2 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_ISShaft                    ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_ISShaft                    ) = { 0.75*$SVG_stage_01.$_gamma_L } ! [m] Height
prim.par (                3 ,       $P_ISShaft                    ) = { 0.8*$SVG_stage_01.$_gamma_d } ! [m] Outer diameter
prim.par (                4 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_ISShaft                    ) = $SVG_stage_01.$_z_planet ! [-] Number of planes
prim.par (                6 ,       $P_ISShaft                    ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_ISShaft                    ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_ISShaft                    ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_ISShaft                    ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.sb.node.id (         1 ,       $B_HSIShaft                   ) = 1                       ! Node ID
body.sb.node.pos (        1 ,   1 , $B_HSIShaft                   ) = { -750 mm }             ! Node Position
body.sb.node.pos (        2 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         2 ,       $B_HSIShaft                   ) = 2                       ! Node ID
body.sb.node.pos (        1 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        2 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         3 ,       $B_HSIShaft                   ) = 3                       ! Node ID
body.sb.node.pos (        1 ,   3 , $B_HSIShaft                   ) = { 520 mm }              ! Node Position
body.sb.node.pos (        2 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         4 ,       $B_HSIShaft                   ) = 4                       ! Node ID
body.sb.node.pos (        1 ,   4 , $B_HSIShaft                   ) = { 750 mm }              ! Node Position
body.sb.node.pos (        2 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         5 ,       $B_HSIShaft                   ) = 5                       ! Node ID
body.sb.node.pos (        1 ,   5 , $B_HSIShaft                   ) = { 980 mm }              ! Node Position
body.sb.node.pos (        2 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.id (         6 ,       $B_HSIShaft                   ) = 6                       ! Node ID
body.sb.node.pos (        1 ,   6 , $B_HSIShaft                   ) = { 1030 mm }             ! Node Position
body.sb.node.pos (        2 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.node.pos (        3 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Node Position
body.sb.ele.from (        1 ,       $B_HSIShaft                   ) = 1                       ! From Node
body.sb.ele.to (          1 ,       $B_HSIShaft                   ) = 2                       ! To Node
body.sb.ele.type (        1 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   1 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   1 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   1 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   1 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      1 ,       $B_HSIShaft                   ) = 1                       ! Active
body.sb.ele.from (        2 ,       $B_HSIShaft                   ) = 2                       ! From Node
body.sb.ele.to (          2 ,       $B_HSIShaft                   ) = 3                       ! To Node
body.sb.ele.type (        2 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   2 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   2 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   2 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   2 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      2 ,       $B_HSIShaft                   ) = 1                       ! Active
body.sb.ele.from (        3 ,       $B_HSIShaft                   ) = 3                       ! From Node
body.sb.ele.to (          3 ,       $B_HSIShaft                   ) = 4                       ! To Node
body.sb.ele.type (        3 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   3 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   3 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   3 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   3 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      3 ,       $B_HSIShaft                   ) = 1                       ! Active
body.sb.ele.from (        4 ,       $B_HSIShaft                   ) = 4                       ! From Node
body.sb.ele.to (          4 ,       $B_HSIShaft                   ) = 5                       ! To Node
body.sb.ele.type (        4 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   4 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   4 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   4 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   4 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      4 ,       $B_HSIShaft                   ) = 1                       ! Active
body.sb.ele.from (        5 ,       $B_HSIShaft                   ) = 5                       ! From Node
body.sb.ele.to (          5 ,       $B_HSIShaft                   ) = 6                       ! To Node
body.sb.ele.type (        5 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   5 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   5 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   5 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   5 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      5 ,       $B_HSIShaft                   ) = 1                       ! Active
body.sb.ele.from (        6 ,       $B_HSIShaft                   ) = 6                       ! From Node
body.sb.ele.to (          6 ,       $B_HSIShaft                   ) = 0                       ! To Node
body.sb.ele.type (        6 ,       $B_HSIShaft                   ) = 4                       ! Type
body.sb.ele.xsec (        1 ,   6 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.xsec (        2 ,   6 , $B_HSIShaft                   ) = $XSc_Shaft_IMS_HS       ! Cross Section
body.sb.ele.ori.vec (     1 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     2 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Orientation Vector
body.sb.ele.ori.vec (     3 ,   6 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Orientation Vector
body.sb.ele.dmp.par (     1 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.dmp.par (     2 ,   6 , $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Damping
body.sb.ele.active (      6 ,       $B_HSIShaft                   ) = 0                       ! Active
body.m (                            $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_HSIShaft                   ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_HSIShaft                   ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_HSIShaft                   ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.type (                         $B_HSIShaft                   ) = 0                       ! Body type: 0=rigid; 1=linear flex; 2=linear SIMBEAM; 4=nonlinear SIMBEAM; 6=nonlinear flex; 7=Abq Co-Sim; 8=flextrack
body.flx.st.pos (         1 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         2 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.pos (         3 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Flexible position
body.flx.st.vel (         1 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         2 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.vel (         3 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity state
body.flx.st.dep (         1 ,       $B_HSIShaft                   ) = 0                       ! State dependency
body.flx.st.dep (         2 ,       $B_HSIShaft                   ) = 0                       ! State dependency
body.flx.st.dep (         3 ,       $B_HSIShaft                   ) = 0                       ! State dependency
body.flx.st.prestress (   1 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   2 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.st.prestress (   3 ,       $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Pre-Stress Forces
body.flx.eigenmodes.kind (          $B_HSIShaft                   ) = 2                       ! Eigenmode frequency range: 0=none; 1=f-min,f-max; 2=f-min,n-modes; 3=f-min,all modes
body.flx.eigenmodes.freqrange.min ( $B_HSIShaft                   ) = 0.00000000000000000E+00 ! Eigenmode minimum frequency
body.flx.eigenmodes.nmodes (        $B_HSIShaft                   ) = 3                       ! Eigenmode number of modes
body.flx.ifacemodes.kind (          $B_HSIShaft                   ) = -1                      ! Interface modes; -1=none; 0=IRM (default); 1=FRM-Auto; 2=FRM-Manual
body.flx.st.active (      1 ,       $B_HSIShaft                   ) = 1                       ! User defined selection of the mode vectors
body.flx.st.active (      2 ,       $B_HSIShaft                   ) = 1                       ! User defined selection of the mode vectors
body.flx.st.active (      3 ,       $B_HSIShaft                   ) = 1                       ! User defined selection of the mode vectors
body.flx.defhandling (              $B_HSIShaft                   ) = 1                       ! 0=Retain deformation; 1=Retain modal coordinates; 2=Reset deformation to zero
body.attr.2d.pos.x (                $B_HSIShaft                   ) = 4.70000000000000000E+02
body.attr.2d.pos.y (                $B_HSIShaft                   ) = -6.00000000000000000E+01
body.attr.2d.width (                $B_HSIShaft                   ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_HSIShaft                   ) = 3.00000000000000000E+01

marker.type (                       $M_HSIShaft_BRF               ) = 1                       ! Type
marker.parent (                     $M_HSIShaft_BRF               ) = $B_HSIShaft             ! Body
marker.flx.type (                   $M_HSIShaft_BRF               ) = 4                       ! Flexible type

marker.type (                       $M_HSIShaft_IMS_SUN           ) = 2                       ! Type
marker.parent (                     $M_HSIShaft_IMS_SUN           ) = $B_HSIShaft             ! Body
marker.pos (              1 ,       $M_HSIShaft_IMS_SUN           ) = { -0.5*$SVG_stage_02.$_gamma_L } ! Position

marker.type (                       $M_HSIShaft_GEAR              ) = 2                       ! Type
marker.parent (                     $M_HSIShaft_GEAR              ) = $B_HSIShaft             ! Body
marker.pos (              1 ,       $M_HSIShaft_GEAR              ) = { 0.5*$SVG_stage_02.$_gamma_L } ! Position

marker.type (                       $M_HSIShaft_Bearing_IMS_A     ) = 2                       ! Type
marker.parent (                     $M_HSIShaft_Bearing_IMS_A     ) = $B_HSIShaft             ! Body
marker.pos (              1 ,       $M_HSIShaft_Bearing_IMS_A     ) = { (500-360/2-100/2)*$SVG_stage_03.$_gamma_d mm } ! Position

marker.type (                       $M_HSIShaft_Bearing_IMS_B     ) = 2                       ! Type
marker.parent (                     $M_HSIShaft_Bearing_IMS_B     ) = $B_HSIShaft             ! Body
marker.pos (              1 ,       $M_HSIShaft_Bearing_IMS_B     ) = { (500+360/2+100/2)*$SVG_stage_03.$_gamma_d mm } ! Position

marker.type (                       $M_HSIShaft_Bearing_IMS_C     ) = 2                       ! Type
marker.parent (                     $M_HSIShaft_Bearing_IMS_C     ) = $B_HSIShaft             ! Body
marker.pos (              1 ,       $M_HSIShaft_Bearing_IMS_C     ) = { (500+360/2+100/2+100/2)*$SVG_stage_03.$_gamma_d mm } ! Position

joint.from (                        $J_HSIShaft                   ) = $M_Gearbox_Frame_SHAFT_IMS_HS ! From Marker
joint.to (                          $J_HSIShaft                   ) = $M_HSIShaft_BRF         ! To Marker
joint.type (                        $J_HSIShaft                   ) = 20                      ! Type
joint.st.pos (            1 ,       $J_HSIShaft                   ) = -2.31143977141366768E-04 ! Position
joint.st.pos (            2 ,       $J_HSIShaft                   ) = -5.00895311694251160E-05 ! Position
joint.st.pos (            3 ,       $J_HSIShaft                   ) = -2.44043141011617446E-07 ! Position
joint.st.pos (            4 ,       $J_HSIShaft                   ) = -1.60159348790325994E-08 ! Position
joint.st.pos (            5 ,       $J_HSIShaft                   ) = 1.77491337727153396E-07 ! Position
joint.st.pos (            6 ,       $J_HSIShaft                   ) = -5.06850095580324255E-05 ! Position
joint.st.vel (            1 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_HSIShaft                   ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_HSIShaft                   ) = 620
joint.attr.2d.pos.y (     1 ,       $J_HSIShaft                   ) = -100
joint.attr.2d.ori (       1 ,       $J_HSIShaft                   ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_HSIShaft  ) = 60, 60, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473, 483, 493, 503, 513, 513, 523, 533, 543, 553, 563, 573, 573, 583, 593, 603
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_HSIShaft  ) = 30, 5.9375, 5.9375, -36.25, -36.25, -36.25, -36.25, -55, -55, -55, -55, -55, -55, -55, -55, -80, -80, -80, -80, -80, -80, -80, -80, -90, -90, -90, -90, -90, -90, -90, -100, -100, -100, -100
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_HSIShaft    ) = 510, 510, 647, 647, 637
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_HSIShaft    ) = -60, -77.5, -77.5, -100, -100

prim.type (                         $P_HSIShaft                   ) = 2                       ! Type
prim.ref (                          $P_HSIShaft                   ) = $M_HSIShaft_BRF         ! Reference Marker
prim.pos (                1 ,       $P_HSIShaft                   ) = { 250*$SVG_stage_02.$_gamma_L mm } ! Position
prim.ang (                1 ,       $P_HSIShaft                   ) = { 0 deg }               ! Angles
prim.ang (                3 ,       $P_HSIShaft                   ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_HSIShaft                   ) = 3.40000000000000000E+01 ! Colors (red component)
prim.color.r (            2 ,       $P_HSIShaft                   ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_HSIShaft                   ) = 1.39000000000000000E+02 ! Colors (green component)
prim.color.g (            2 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_HSIShaft                   ) = 3.40000000000000000E+01 ! Colors (blue component)
prim.color.b (            2 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_HSIShaft                   ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_HSIShaft                   ) = { 1*$SVG_stage_02.$_gamma_L } ! [m] Height
prim.par (                3 ,       $P_HSIShaft                   ) = { 0.5*$SVG_stage_02.$_gamma_d } ! [m] Outer diameter
prim.par (                4 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_HSIShaft                   ) = $SVG_stage_02.$_z_sun   ! [-] Number of planes
prim.par (                6 ,       $P_HSIShaft                   ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_HSIShaft                   ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_HSIShaft                   ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_HSIShaft                   ) = 0.00000000000000000E+00 ! [-] Close geometry with


body.m (                            $B_HSShaft                    ) = 1.00000000000000000E+00 ! Mass of the Body
body.mp (                           $B_HSShaft                    ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
body.I.tens (             1 ,   1 , $B_HSShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             2 ,   2 , $B_HSShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.tens (             3 ,   3 , $B_HSShaft                    ) = 1.00000000000000000E+00 ! Moments of inertia
body.I.kind (                       $B_HSShaft                    ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
body.attr.2d.pos.x (                $B_HSShaft                    ) = 5.40000000000000000E+02
body.attr.2d.pos.y (                $B_HSShaft                    ) = -2.30000000000000000E+02
body.attr.2d.width (                $B_HSShaft                    ) = 5.00000000000000000E+01
body.attr.2d.height (               $B_HSShaft                    ) = 3.00000000000000000E+01

marker.type (                       $M_HSShaft_BRF                ) = 1                       ! Type
marker.parent (                     $M_HSShaft_BRF                ) = $B_HSShaft              ! Body
marker.flx.type (                   $M_HSShaft_BRF                ) = 4                       ! Flexible type

marker.type (                       $M_HSShaft_Bearing_HS_A       ) = 2                       ! Type
marker.parent (                     $M_HSShaft_Bearing_HS_A       ) = $B_HSShaft              ! Body
marker.pos (              1 ,       $M_HSShaft_Bearing_HS_A       ) = { -230*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_HSShaft_Bearing_HS_A       ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_HSShaft_Bearing_HS_B       ) = 2                       ! Type
marker.parent (                     $M_HSShaft_Bearing_HS_B       ) = $B_HSShaft              ! Body
marker.pos (              1 ,       $M_HSShaft_Bearing_HS_B       ) = { 230*$SVG_stage_03.$_gamma_d mm } ! Position
marker.pos (              2 ,       $M_HSShaft_Bearing_HS_B       ) = 0.00000000000000000E+00 ! Position

marker.type (                       $M_HSShaft_Bearing_HS_C       ) = 2                       ! Type
marker.parent (                     $M_HSShaft_Bearing_HS_C       ) = $B_HSShaft              ! Body
marker.pos (              1 ,       $M_HSShaft_Bearing_HS_C       ) = { 280*$SVG_stage_03.$_gamma_L mm } ! Position
marker.pos (              2 ,       $M_HSShaft_Bearing_HS_C       ) = 0.00000000000000000E+00 ! Position

joint.from (                        $J_HSShaft                    ) = $M_Gearbox_Frame_Shaft_Gen ! From Marker
joint.to (                          $J_HSShaft                    ) = $M_HSShaft_BRF          ! To Marker
joint.type (                        $J_HSShaft                    ) = 20                      ! Type
joint.st.pos (            1 ,       $J_HSShaft                    ) = 3.94099749148967438E-03 ! Position
joint.st.pos (            2 ,       $J_HSShaft                    ) = 1.18234294268707532E-05 ! Position
joint.st.pos (            3 ,       $J_HSShaft                    ) = 1.03517179835490056E-08 ! Position
joint.st.pos (            4 ,       $J_HSShaft                    ) = 8.82540100873223233E-11 ! Position
joint.st.pos (            5 ,       $J_HSShaft                    ) = 1.32648670411579618E-08 ! Position
joint.st.pos (            6 ,       $J_HSShaft                    ) = -4.93890975455986746E-06 ! Position
joint.st.vel (            1 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            2 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            3 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            4 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            5 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.st.vel (            6 ,       $J_HSShaft                    ) = 0.00000000000000000E+00 ! Velocity
joint.attr.2d.pos.x (     1 ,       $J_HSShaft                    ) = 430
joint.attr.2d.pos.y (     1 ,       $J_HSShaft                    ) = -190
joint.attr.2d.ori (       1 ,       $J_HSShaft                    ) = 0
joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_HSShaft   ) = 80, 90, 90, 100.09375, 100.09375, 110.1875, 170.75, 413
joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_HSShaft   ) = 40, 40, -132.5, -132.5, -190, -190, -190, -190
joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_HSShaft     ) = 550, 550, 447
joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_HSShaft     ) = -200, -190, -190

prim.type (                         $P_HSShaft                    ) = 2                       ! Type
prim.ref (                          $P_HSShaft                    ) = $M_HSShaft_BRF          ! Reference Marker
prim.ang (                3 ,       $P_HSShaft                    ) = { 90 deg }              ! Angles
prim.color.r (            1 ,       $P_HSShaft                    ) = 5.80000000000000000E+01 ! Colors (red component)
prim.color.r (            2 ,       $P_HSShaft                    ) = 2.55000000000000000E+02 ! Colors (red component)
prim.color.g (            1 ,       $P_HSShaft                    ) = 9.50000000000000000E+01 ! Colors (green component)
prim.color.g (            2 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! Colors (green component)
prim.color.b (            1 ,       $P_HSShaft                    ) = 2.05000000000000000E+02 ! Colors (blue component)
prim.color.b (            2 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! Colors (blue component)
prim.color.t (            1 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.color.t (            2 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! Colors (transparency component)
prim.mp.dens.solid (                $P_HSShaft                    ) = 7.85000000000000000E+03 ! Density
prim.par (                2 ,       $P_HSShaft                    ) = { 700*$SVG_stage_03.$_gamma_L mm } ! [m] Height
prim.par (                3 ,       $P_HSShaft                    ) = { 200*$SVG_stage_03.$_gamma_d mm } ! [m] Outer diameter
prim.par (                4 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! [m] Inner diameter
prim.par (                5 ,       $P_HSShaft                    ) = 1.50000000000000000E+01 ! [-] Number of planes
prim.par (                6 ,       $P_HSShaft                    ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
prim.par (                7 ,       $P_HSShaft                    ) = 1.00000000000000000E+00 ! [-] Show bottom cap
prim.par (                8 ,       $P_HSShaft                    ) = 1.00000000000000000E+00 ! [-] Show top cap
prim.par (                9 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! [rad] Start angle
prim.par (               10 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! [rad] Delta angle
prim.par (               11 ,       $P_HSShaft                    ) = 0.00000000000000000E+00 ! [-] Close geometry with


bodygroup.begin (                   $BG_stage_01                  )                           ! $BG_stage_01
   body.m (                         $B_PLC                        ) = 2.50000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PLC                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PLC                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PLC                        ) = 4.40000000000000000E+02
   body.attr.2d.pos.y (             $B_PLC                        ) = -4.00000000000000000E+01
   body.attr.2d.width (             $B_PLC                        ) = 8.00000000000000000E+01
   body.attr.2d.height (            $B_PLC                        ) = 6.00000000000000000E+01

   marker.type (                    $M_PLC_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PLC_BRF                    ) = $BG_stage_01.$B_PLC     ! Body
   marker.flx.type (                $M_PLC_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PLC_Pin1_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin1_ref               ) = $BG_stage_01.$B_PLC     ! Body

   marker.type (                    $M_PLC_Pin2_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin2_ref               ) = $BG_stage_01.$B_PLC     ! Body
   marker.ang (           1 ,       $M_PLC_Pin2_ref               ) = { 120 deg }             ! Angles
   marker.ang (           2 ,       $M_PLC_Pin2_ref               ) = 0.00000000000000000E+00 ! Angles
   marker.ang (           3 ,       $M_PLC_Pin2_ref               ) = 0.00000000000000000E+00 ! Angles

   marker.type (                    $M_PLC_Pin3_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin3_ref               ) = $BG_stage_01.$B_PLC     ! Body
   marker.ang (           1 ,       $M_PLC_Pin3_ref               ) = { 240 deg }             ! Angles

   marker.type (                    $M_PLC_Pin1                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1                   ) = $BG_stage_01.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1                   ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1                   ) = 0.00000000000000000E+00 ! Position
   marker.pos (           3 ,       $M_PLC_Pin1                   ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_A         ) = $BG_stage_01.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_A         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_A         ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_A         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_B         ) = $BG_stage_01.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_B         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_B         ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_B         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2                   ) = $BG_stage_01.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2                   ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           3 ,       $M_PLC_Pin2                   ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_A         ) = $BG_stage_01.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_A         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_A         ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_A         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_B         ) = $BG_stage_01.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_B         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_B         ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_B         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3                   ) = $BG_stage_01.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3                   ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3                   ) = 0.00000000000000000E+00 ! Position
   marker.pos (           3 ,       $M_PLC_Pin3                   ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_A         ) = $BG_stage_01.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_A         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_A         ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_A         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_B         ) = $BG_stage_01.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_B         ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_B         ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_B         ) = $SVG_stage_01.$_a_w     ! Position

   marker.type (                    $M_PLC_Bearing_PLC_A          ) = 2                       ! Type
   marker.parent (                  $M_PLC_Bearing_PLC_A          ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Bearing_PLC_A          ) = { -0.5*$SVG_stage_01.$_gamma_b } ! Position

   marker.type (                    $M_PLC_Bearing_PLC_B          ) = 2                       ! Type
   marker.parent (                  $M_PLC_Bearing_PLC_B          ) = $BG_stage_01.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Bearing_PLC_B          ) = { 0.5*$SVG_stage_01.$_gamma_b } ! Position

   joint.from (                     $J_PLC                        ) = $M_main_shaft_LSS_LS_PLC ! From Marker
   joint.to (                       $J_PLC                        ) = $BG_stage_01.$M_PLC_BRF ! To Marker
   joint.type (                     $J_PLC                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PLC                        ) = 120
   joint.attr.2d.pos.y (   1 ,      $J_PLC                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_PLC                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PLC    ) = -140, -140, 42.25, 42.25, 42.25, 103
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PLC    ) = -10, 0, 0, -10, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PLC      ) = 440, 430, 430, 421.65234375, 396.609375, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 363.21875, 337.625, 303.5, 167, 167, 167, 157, 147, 137
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PLC      ) = -20, -20, -142.0703125, -142.0703125, -142.0703125, -142.0703125, -117.65625, -98.125, -82.5, -70, -60, -40, -30, -20, -10, 0, 0, 0, 0, -10, -20, -20, -20, -20

   prim.type (                      $P_PLC                        ) = 2                       ! Type
   prim.ref (                       $P_PLC                        ) = $BG_stage_01.$M_PLC_BRF ! Reference Marker
   prim.ang (             3 ,       $P_PLC                        ) = { -90 deg }             ! Angles
   prim.color.r (         1 ,       $P_PLC                        ) = 1.26000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PLC                        ) = 1.91000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PLC                        ) = 1.28000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PLC                        ) = 1.00000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.transparency (              $P_PLC                        ) = 5.00000000000000000E-01 ! Transparency
   prim.mp.dens.solid (             $P_PLC                        ) = { 7850/2 }              ! Density
   prim.par (             2 ,       $P_PLC                        ) = { 500*$SVG_stage_01.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_PLC                        ) = { 2200*$SVG_stage_01.$_gamma_b mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_PLC                        ) = { 1000*$SVG_stage_01.$_gamma_b mm } ! [m] Inner diameter
   prim.par (             5 ,       $P_PLC                        ) = $SVG_stage_01.$_z_ring  ! [-] Number of planes
   prim.par (             6 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! [rad] Start angle


   body.m (                         $B_Sun                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Sun                        ) = 7.20000000000000000E+02
   body.attr.2d.pos.y (             $B_Sun                        ) = -2.00000000000000000E+01
   body.attr.2d.width (             $B_Sun                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Sun                        ) = 3.00000000000000000E+01

   marker.type (                    $M_Sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_Sun_BRF                    ) = $BG_stage_01.$B_Sun     ! Body
   marker.flx.type (                $M_Sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_Sun_ref                    ) = 2                       ! Type
   marker.parent (                  $M_Sun_ref                    ) = $BG_stage_01.$B_Sun     ! Body
   marker.ang (           2 ,       $M_Sun_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_Sun                        ) = $M_ISShaft_LS_SUN       ! From Marker
   joint.to (                       $J_Sun                        ) = $BG_stage_01.$M_Sun_BRF ! To Marker
   joint.type (                     $J_Sun                        ) = 0                       ! Type
   joint.par (            1 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Sun                        ) = 260
   joint.attr.2d.pos.y (   1 ,      $J_Sun                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_Sun                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Sun    ) = 670, 670, 541.125, 541.125, 531.125, 521.125, 372.25, 372.25, 372.25, 362.25, 352.25, 342.25, 233, 233, 243
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Sun    ) = -100, -80, -80, -70, -70, -70, -70, -80, -90, -90, -90, -90, -90, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Sun      ) = 740, 740, 297, 297, 297, 297, 297, 297, 287, 277
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Sun      ) = 10, 30, 30, 20, 10, 0, -10, -20, -20, -20

   prim.type (                      $P_Sun                        ) = 25                      ! Type
   prim.ref (                       $P_Sun                        ) = $BG_stage_01.$M_Sun_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Sun                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Sun                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Sun                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Sun                  ) = $SVG_stage_01.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Sun                  ) = $SVG_stage_01.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Sun                  ) = $SVG_stage_01.$_x_sun   ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Sun                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Sun                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Sun            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Sun            ) = $SVG_stage_01.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Sun                  ) = $SVG_stage_01.$_z_sun   ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Sun                  ) = $SVG_stage_01.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Sun      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Sun      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Sun                        ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_Sun                        ) = $SVG_stage_01.$_z_sun   ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Sun                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Sun                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Sun                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Sun                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Sun                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Sun            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL1                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL1                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL1                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL1                        ) = 9.70000000000000000E+02
   body.attr.2d.pos.y (             $B_PL1                        ) = -2.00000000000000000E+01
   body.attr.2d.width (             $B_PL1                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PL1                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PL1_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL1_BRF                    ) = $BG_stage_01.$B_PL1     ! Body
   marker.flx.type (                $M_PL1_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL1_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL1_ref                    ) = $BG_stage_01.$B_PL1     ! Body
   marker.ang (           2 ,       $M_PL1_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL1                        ) = $BG_stage_01.$M_Pin1_PL ! From Marker
   joint.to (                       $J_PL1                        ) = $BG_stage_01.$M_PL1_BRF ! To Marker
   joint.type (                     $J_PL1                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL1                        ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_PL1                        ) = -20
   joint.attr.2d.ori (    1 ,       $J_PL1                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL1    ) = 590, 590, 600, 600, 600, 600, 590, 580, 570, 560, 530.25, 530.25, 543
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL1    ) = -280, -274.0625, -274.0625, -264.0625, -238.125, -82.5, -82.5, -82.5, -82.5, -82.5, -82.5, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL1      ) = 980, 980, 587, 587, 587, 587, 587, 587, 577
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL1      ) = 10, 30, 30, 20, 10, 0, -10, -20, -20

   prim.type (                      $P_PL1                        ) = 25                      ! Type
   prim.ref (                       $P_PL1                        ) = $BG_stage_01.$M_PL1_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL1                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL1                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL1                        ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL1                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL1                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL1                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL1                  ) = $SVG_stage_01.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL1                  ) = $SVG_stage_01.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL1                  ) = $SVG_stage_01.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL1                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL1                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL1            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL1            ) = $SVG_stage_01.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL1                  ) = $SVG_stage_01.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL1                  ) = $SVG_stage_01.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL1      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL1      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL1                        ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL1                        ) = $SVG_stage_01.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL1                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL1                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL1                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL1                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL1                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL1            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL2                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL2                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL2                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL2                        ) = -1.00000000000000000E+02
   body.attr.2d.pos.y (             $B_PL2                        ) = -3.60000000000000000E+02
   body.attr.2d.width (             $B_PL2                        ) = 1.20000000000000000E+02
   body.attr.2d.height (            $B_PL2                        ) = 7.00000000000000000E+01

   marker.type (                    $M_PL2_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL2_BRF                    ) = $BG_stage_01.$B_PL2     ! Body
   marker.flx.type (                $M_PL2_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL2_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL2_ref                    ) = $BG_stage_01.$B_PL2     ! Body
   marker.ang (           2 ,       $M_PL2_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL2                        ) = $BG_stage_01.$M_Pin2_PL ! From Marker
   joint.to (                       $J_PL2                        ) = $BG_stage_01.$M_PL2_BRF ! To Marker
   joint.type (                     $J_PL2                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL2                        ) = -20
   joint.attr.2d.pos.y (   1 ,      $J_PL2                        ) = -90
   joint.attr.2d.ori (    1 ,       $J_PL2                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL2    ) = 90, 90, 20.25, 20.25, 20.25, 20.25, -3
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL2    ) = -270, -188.28125, -188.28125, -164.375, -132.5, -90, -90
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL2      ) = -40, -40, -37
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL2      ) = -290, -90, -90

   prim.type (                      $P_PL2                        ) = 25                      ! Type
   prim.ref (                       $P_PL2                        ) = $BG_stage_01.$M_PL2_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL2                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL2                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL2                        ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL2                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL2                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL2                        ) = { 7 deg }               ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL2                  ) = $SVG_stage_01.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL2                  ) = $SVG_stage_01.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL2                  ) = $SVG_stage_01.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL2                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL2                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL2            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL2            ) = $SVG_stage_01.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL2                  ) = $SVG_stage_01.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL2                  ) = $SVG_stage_01.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL2      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL2      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL2                        ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL2                        ) = $SVG_stage_01.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL2                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL2                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL2                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL2                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL2                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL2            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL3                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL3                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL3                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL3                        ) = -3.00000000000000000E+01
   body.attr.2d.pos.y (             $B_PL3                        ) = 2.30000000000000000E+02
   body.attr.2d.width (             $B_PL3                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PL3                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PL3_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL3_BRF                    ) = $BG_stage_01.$B_PL3     ! Body
   marker.flx.type (                $M_PL3_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL3_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL3_ref                    ) = $BG_stage_01.$B_PL3     ! Body
   marker.ang (           2 ,       $M_PL3_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL3                        ) = $BG_stage_01.$M_Pin3_PL ! From Marker
   joint.to (                       $J_PL3                        ) = $BG_stage_01.$M_PL3_BRF ! To Marker
   joint.type (                     $J_PL3                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL3                        ) = -20
   joint.attr.2d.pos.y (   1 ,      $J_PL3                        ) = 50
   joint.attr.2d.ori (    1 ,       $J_PL3                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL3    ) = 80, 51.75, 51.75, -3
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL3    ) = 160, 160, 50, 50
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL3      ) = -30, -40, -40, -37
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL3      ) = 240, 240, 50, 50

   prim.type (                      $P_PL3                        ) = 25                      ! Type
   prim.ref (                       $P_PL3                        ) = $BG_stage_01.$M_PL3_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL3                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL3                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL3                        ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL3                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL3                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL3                        ) = { -7 deg }              ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL3                  ) = $SVG_stage_01.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL3                  ) = $SVG_stage_01.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL3                  ) = $SVG_stage_01.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL3                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL3                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL3            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL3            ) = $SVG_stage_01.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL3                  ) = $SVG_stage_01.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL3                  ) = $SVG_stage_01.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL3      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL3      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL3                        ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL3                        ) = $SVG_stage_01.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL3                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL3                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL3                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL3                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL3                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL3            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_Ring                       ) = 2.50000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Ring                       ) = 6.00000000000000000E+02
   body.attr.2d.pos.y (             $B_Ring                       ) = -4.00000000000000000E+01
   body.attr.2d.width (             $B_Ring                       ) = 8.00000000000000000E+01
   body.attr.2d.height (            $B_Ring                       ) = 6.00000000000000000E+01

   marker.type (                    $M_Ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Ring_BRF                   ) = $BG_stage_01.$B_Ring    ! Body
   marker.flx.type (                $M_Ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Ring_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Ring_ref                   ) = $BG_stage_01.$B_Ring    ! Body
   marker.ang (           2 ,       $M_Ring_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Ring                       ) = $M_Gearbox_Frame_BRF    ! From Marker
   joint.to (                       $J_Ring                       ) = $BG_stage_01.$M_Ring_BRF ! To Marker
   joint.type (                     $J_Ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Ring                       ) = 190
   joint.attr.2d.pos.y (   1 ,      $J_Ring                       ) = -20
   joint.attr.2d.ori (    1 ,       $J_Ring                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Ring   ) = 80, 152.25, 152.25, 173
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Ring   ) = 100, 100, -20, -20
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Ring     ) = 600, 590, 590, 578.96875, 545.875, 413.5, 237, 237, 237, 237, 237, 227, 217, 207
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Ring     ) = -30, -30, -65, -65, -65, -65, -65, -50, -40, -30, -20, -20, -20, -20

   prim.type (                      $P_Ring                       ) = 25                      ! Type
   prim.ref (                       $P_Ring                       ) = $BG_stage_01.$M_Ring_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (red component)
   prim.color.r (         2 ,       $P_Ring                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.g (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Ring                       ) = 2.55000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Ring                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Ring                       ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Ring                       ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Ring                 ) = $SVG_stage_01.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Ring                 ) = $SVG_stage_01.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Ring                 ) = $SVG_stage_01.$_x_ring  ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Ring                 ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Ring                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Ring           ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Ring           ) = $SVG_stage_01.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Ring                 ) = $SVG_stage_01.$_z_ring  ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Ring                 ) = $SVG_stage_01.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Ring     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Ring     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Ring                       ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Ring Diameter
   prim.par (             3 ,   3 , $P_Ring                       ) = $SVG_stage_01.$_z_ring  ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Ring                       ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Ring                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Ring discretisation per tooth
   prim.par (             4 ,   1 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Ring                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Ring                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Ring                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Ring           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_Pin1                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin1                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin1                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin1                       ) = 5.50000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin1                       ) = -3.10000000000000000E+02
   body.attr.2d.width (             $B_Pin1                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin1                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin1_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin1_BRF                   ) = $BG_stage_01.$B_Pin1    ! Body
   marker.flx.type (                $M_Pin1_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin1_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin1_PL                    ) = $BG_stage_01.$B_Pin1    ! Body

   marker.type (                    $M_Pin1_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_A             ) = $BG_stage_01.$B_Pin1    ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_A             ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin1_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_B             ) = $BG_stage_01.$B_Pin1    ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_B             ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin1                       ) = $BG_stage_01.$M_PLC_Pin1 ! From Marker
   joint.to (                       $J_Pin1                       ) = $BG_stage_01.$M_Pin1_BRF ! To Marker
   joint.type (                     $J_Pin1                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin1                       ) = 7.13653625895726380E-04 ! Position
   joint.st.pos (         2 ,       $J_Pin1                       ) = 1.65133453743944289E-11 ! Position
   joint.st.pos (         3 ,       $J_Pin1                       ) = -4.93170727117075510E-15 ! Position
   joint.st.pos (         4 ,       $J_Pin1                       ) = 6.77844066922609534E-07 ! Position
   joint.st.pos (         5 ,       $J_Pin1                       ) = 1.73984626751819561E-09 ! Position
   joint.st.pos (         6 ,       $J_Pin1                       ) = -3.57759562033780569E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.par (            5 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven rotation about al
   joint.par (           10 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven rotation about be
   joint.par (           15 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven rotation about ga
   joint.par (           20 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven translation in x
   joint.par (           25 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven translation in y
   joint.par (           30 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! [-] Driven translation in z
   joint.attr.2d.pos.x (   1 ,      $J_Pin1                       ) = 380
   joint.attr.2d.pos.y (   1 ,      $J_Pin1                       ) = -220
   joint.attr.2d.ori (    1 ,       $J_Pin1                       ) = 270
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin1   ) = 460, 460, 450, 440, 430, 405, 405, 405, 380, 380, 380
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin1   ) = -40, -107.3125, -107.3125, -107.3125, -107.3125, -107.3125, -139.75, -183, -183, -193, -203
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin1     ) = 550, 380, 380, 380, 380, 380
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin1     ) = -300, -300, -290, -280, -270, -237

   prim.type (                      $P_Pin1                       ) = 2                       ! Type
   prim.ref (                       $P_Pin1                       ) = $BG_stage_01.$M_Pin1_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin1                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin1                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin1                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin1                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin1                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin1                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin1                       ) = { 800*$SVG_stage_01.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin1                       ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin1                       ) = $SVG_stage_01.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_Pin2                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin2                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin2                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin2                       ) = 8.00000000000000000E+01
   body.attr.2d.pos.y (             $B_Pin2                       ) = -3.00000000000000000E+02
   body.attr.2d.width (             $B_Pin2                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin2                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin2_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin2_BRF                   ) = $BG_stage_01.$B_Pin2    ! Body
   marker.flx.type (                $M_Pin2_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin2_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin2_PL                    ) = $BG_stage_01.$B_Pin2    ! Body

   marker.type (                    $M_Pin2_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_A             ) = $BG_stage_01.$B_Pin2    ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_A             ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin2_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_B             ) = $BG_stage_01.$B_Pin2    ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_B             ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin2                       ) = $BG_stage_01.$M_PLC_Pin2 ! From Marker
   joint.to (                       $J_Pin2                       ) = $BG_stage_01.$M_Pin2_BRF ! To Marker
   joint.type (                     $J_Pin2                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin2                       ) = 6.14574002413703136E-04 ! Position
   joint.st.pos (         2 ,       $J_Pin2                       ) = -5.93820209641561990E-12 ! Position
   joint.st.pos (         3 ,       $J_Pin2                       ) = -4.94179759756141181E-12 ! Position
   joint.st.pos (         4 ,       $J_Pin2                       ) = 6.77841345260959782E-07 ! Position
   joint.st.pos (         5 ,       $J_Pin2                       ) = -1.05886778721994828E-06 ! Position
   joint.st.pos (         6 ,       $J_Pin2                       ) = 1.78990312794994599E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.attr.2d.pos.x (   1 ,      $J_Pin2                       ) = 40
   joint.attr.2d.pos.y (   1 ,      $J_Pin2                       ) = -100
   joint.attr.2d.ori (    1 ,       $J_Pin2                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin2   ) = 450, 450, 288.265625, 288.265625, 288.265625, 237.6875, 170.25, 170.25, 170.25, 160.25, 160.25, 150.25, 57
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin2   ) = 20, 30, 30, 20, 10, 10, 10, 0, -10, -10, -100, -100, -100
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin2     ) = 100, 100, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 3.75, 23
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin2     ) = -270, -260, -260, -255.25390625, -241.015625, -222.03125, -209.375, -192.5, -170, -140, -100, -100

   prim.type (                      $P_Pin2                       ) = 2                       ! Type
   prim.ref (                       $P_Pin2                       ) = $BG_stage_01.$M_Pin2_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin2                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin2                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin2                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin2                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin2                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin2                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin2                       ) = { 800*$SVG_stage_01.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin2                       ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin2                       ) = $SVG_stage_01.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_Pin3                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin3                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin3                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin3                       ) = 8.00000000000000000E+01
   body.attr.2d.pos.y (             $B_Pin3                       ) = 1.50000000000000000E+02
   body.attr.2d.width (             $B_Pin3                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin3                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin3_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin3_BRF                   ) = $BG_stage_01.$B_Pin3    ! Body
   marker.flx.type (                $M_Pin3_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin3_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin3_PL                    ) = $BG_stage_01.$B_Pin3    ! Body

   marker.type (                    $M_Pin3_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_A             ) = $BG_stage_01.$B_Pin3    ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_A             ) = { -382*$SVG_stage_01.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin3_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_B             ) = $BG_stage_01.$B_Pin3    ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_B             ) = { 382*$SVG_stage_01.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin3                       ) = $BG_stage_01.$M_PLC_Pin3 ! From Marker
   joint.to (                       $J_Pin3                       ) = $BG_stage_01.$M_Pin3_BRF ! To Marker
   joint.type (                     $J_Pin3                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin3                       ) = -2.88770253473395798E-04 ! Position
   joint.st.pos (         2 ,       $J_Pin3                       ) = -5.92868243059232692E-12 ! Position
   joint.st.pos (         3 ,       $J_Pin3                       ) = 4.94337647954756948E-12 ! Position
   joint.st.pos (         4 ,       $J_Pin3                       ) = 6.77841312664675894E-07 ! Position
   joint.st.pos (         5 ,       $J_Pin3                       ) = 1.05842487642924086E-06 ! Position
   joint.st.pos (         6 ,       $J_Pin3                       ) = 1.78953603628782777E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.attr.2d.pos.x (   1 ,      $J_Pin3                       ) = 130
   joint.attr.2d.pos.y (   1 ,      $J_Pin3                       ) = 60
   joint.attr.2d.ori (    1 ,       $J_Pin3                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin3   ) = 460, 460, 283.9375, 283.9375, 225.25, 147
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin3   ) = 20, 82.5, 82.5, 60, 60, 60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin3     ) = 110, 110, 113
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin3     ) = 150, 60, 60

   prim.type (                      $P_Pin3                       ) = 2                       ! Type
   prim.ref (                       $P_Pin3                       ) = $BG_stage_01.$M_Pin3_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin3                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin3                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin3                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin3                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin3                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin3                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin3                       ) = { 800*$SVG_stage_01.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin3                       ) = { 400*$SVG_stage_01.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin3                       ) = $SVG_stage_01.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


bodygroup.end (                     $BG_stage_01                  )                           ! $BG_stage_01

bodygroup.begin (                   $BG_stage_02                  )                           ! $BG_stage_02
   body.m (                         $B_PLC                        ) = 2.50000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PLC                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PLC                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PLC                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PLC                        ) = 7.70000000000000000E+02
   body.attr.2d.pos.y (             $B_PLC                        ) = -1.00000000000000000E+02
   body.attr.2d.width (             $B_PLC                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PLC                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PLC_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PLC_BRF                    ) = $BG_stage_02.$B_PLC     ! Body
   marker.flx.type (                $M_PLC_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PLC_Pin1_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin1_ref               ) = $BG_stage_02.$B_PLC     ! Body

   marker.type (                    $M_PLC_Pin2_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin2_ref               ) = $BG_stage_02.$B_PLC     ! Body
   marker.ang (           1 ,       $M_PLC_Pin2_ref               ) = { 120 deg }             ! Angles
   marker.ang (           2 ,       $M_PLC_Pin2_ref               ) = 0.00000000000000000E+00 ! Angles
   marker.ang (           3 ,       $M_PLC_Pin2_ref               ) = 0.00000000000000000E+00 ! Angles

   marker.type (                    $M_PLC_Pin3_ref               ) = 2                       ! Type
   marker.parent (                  $M_PLC_Pin3_ref               ) = $BG_stage_02.$B_PLC     ! Body
   marker.ang (           1 ,       $M_PLC_Pin3_ref               ) = { 240 deg }             ! Angles

   marker.type (                    $M_PLC_Pin1                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1                   ) = $BG_stage_02.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1                   ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1                   ) = 0.00000000000000000E+00 ! Position
   marker.pos (           3 ,       $M_PLC_Pin1                   ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_A         ) = $BG_stage_02.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_A         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_A         ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_A         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin1_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin1_Bearing_B         ) = $BG_stage_02.$M_PLC_Pin1_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin1_Bearing_B         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin1_Bearing_B         ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin1_Bearing_B         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2                   ) = $BG_stage_02.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2                   ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           3 ,       $M_PLC_Pin2                   ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_A         ) = $BG_stage_02.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_A         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_A         ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_A         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin2_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin2_Bearing_B         ) = $BG_stage_02.$M_PLC_Pin2_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin2_Bearing_B         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin2_Bearing_B         ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin2_Bearing_B         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3                   ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3                   ) = $BG_stage_02.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3                   ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3                   ) = 0.00000000000000000E+00 ! Position
   marker.pos (           3 ,       $M_PLC_Pin3                   ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_A         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_A         ) = $BG_stage_02.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_A         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_A         ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_A         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_Pin3_Bearing_B         ) = 1                       ! Type
   marker.ref (                     $M_PLC_Pin3_Bearing_B         ) = $BG_stage_02.$M_PLC_Pin3_ref ! Reference Marker
   marker.parent (                  $M_PLC_Pin3_Bearing_B         ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_Pin3_Bearing_B         ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position
   marker.pos (           3 ,       $M_PLC_Pin3_Bearing_B         ) = $SVG_stage_02.$_a_w     ! Position

   marker.type (                    $M_PLC_IMS_PLC_A              ) = 2                       ! Type
   marker.parent (                  $M_PLC_IMS_PLC_A              ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_IMS_PLC_A              ) = { -0.5*$SVG_stage_02.$_gamma_d } ! Position

   marker.type (                    $M_PLC_IMS_PLC_B              ) = 2                       ! Type
   marker.parent (                  $M_PLC_IMS_PLC_B              ) = $BG_stage_02.$B_PLC     ! Body
   marker.pos (           1 ,       $M_PLC_IMS_PLC_B              ) = { 0.5*$SVG_stage_02.$_gamma_d } ! Position

   joint.from (                     $J_PLC                        ) = $M_ISShaft_PLC          ! From Marker
   joint.to (                       $J_PLC                        ) = $BG_stage_02.$M_PLC_BRF ! To Marker
   joint.type (                     $J_PLC                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PLC                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PLC                        ) = 960
   joint.attr.2d.pos.y (   1 ,      $J_PLC                        ) = -140
   joint.attr.2d.ori (    1 ,       $J_PLC                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PLC    ) = 700, 700, 943
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PLC    ) = -130, -140, -140
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PLC      ) = 820, 830, 830, 833.9294319152832, 845.71772766113281, 861.43545532226563, 871.9139404296875, 885.88525390625, 904.513671875, 929.3515625, 962.46875, 1006.625, 1065.5, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 977
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PLC      ) = -80, -80, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -60, -70, -80, -90, -100, -110, -125, -140, -140

   prim.type (                      $P_PLC                        ) = 2                       ! Type
   prim.ref (                       $P_PLC                        ) = $BG_stage_02.$M_PLC_BRF ! Reference Marker
   prim.ang (             3 ,       $P_PLC                        ) = { -90 deg }             ! Angles
   prim.color.r (         1 ,       $P_PLC                        ) = 1.26000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PLC                        ) = 1.91000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PLC                        ) = 1.28000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PLC                        ) = 1.00000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.transparency (              $P_PLC                        ) = 5.00000000000000000E-01 ! Transparency
   prim.mp.dens.solid (             $P_PLC                        ) = { 7850/2 }              ! Density
   prim.par (             2 ,       $P_PLC                        ) = { 500*$SVG_stage_02.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_PLC                        ) = { 1500*$SVG_stage_02.$_gamma_b mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_PLC                        ) = { 900*$SVG_stage_02.$_gamma_b mm } ! [m] Inner diameter
   prim.par (             5 ,       $P_PLC                        ) = $SVG_stage_02.$_z_ring  ! [-] Number of planes
   prim.par (             6 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_PLC                        ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_PLC                        ) = 0.00000000000000000E+00 ! [rad] Start angle


   body.m (                         $B_Sun                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Sun                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Sun                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Sun                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Sun                        ) = 1.56000000000000000E+03
   body.attr.2d.pos.y (             $B_Sun                        ) = -1.80000000000000000E+02
   body.attr.2d.width (             $B_Sun                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Sun                        ) = 3.00000000000000000E+01

   marker.type (                    $M_Sun_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_Sun_BRF                    ) = $BG_stage_02.$B_Sun     ! Body
   marker.flx.type (                $M_Sun_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_Sun_ref                    ) = 2                       ! Type
   marker.parent (                  $M_Sun_ref                    ) = $BG_stage_02.$B_Sun     ! Body
   marker.ang (           2 ,       $M_Sun_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_Sun                        ) = $M_HSIShaft_IMS_SUN     ! From Marker
   joint.to (                       $J_Sun                        ) = $BG_stage_02.$M_Sun_BRF ! To Marker
   joint.type (                     $J_Sun                        ) = 0                       ! Type
   joint.par (            1 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Sun                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Sun                        ) = 1100
   joint.attr.2d.pos.y (   1 ,      $J_Sun                        ) = -120
   joint.attr.2d.ori (    1 ,       $J_Sun                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Sun    ) = 500, 500, 583.25, 583.25, 583.25, 833, 833, 843, 853, 863, 873, 883, 893, 903, 913, 923, 933, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1033, 1033, 1043, 1053, 1053, 1063, 1073, 1083
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Sun    ) = -60, -80, -80, -70, -60, -60, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -80, -70, -70, -70, -120, -120, -120, -120
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Sun      ) = 1570, 1570, 1147, 1147, 1137, 1127, 1117
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Sun      ) = -150, -110, -110, -120, -120, -120, -120

   prim.type (                      $P_Sun                        ) = 25                      ! Type
   prim.ref (                       $P_Sun                        ) = $BG_stage_02.$M_Sun_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Sun                        ) = 2.55000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Sun                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Sun                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Sun                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Sun                        ) = { 10 deg }              ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Sun                  ) = $SVG_stage_02.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Sun                  ) = $SVG_stage_02.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Sun                  ) = $SVG_stage_02.$_x_sun   ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Sun                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Sun                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Sun            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Sun            ) = $SVG_stage_02.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Sun                  ) = $SVG_stage_02.$_z_sun   ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Sun                  ) = $SVG_stage_02.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Sun            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Sun      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Sun      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Sun            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Sun                        ) = { 200*$SVG_stage_02.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_Sun                        ) = $SVG_stage_02.$_z_sun   ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Sun                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Sun                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Sun            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Sun                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Sun                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Sun                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Sun                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Sun                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Sun            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Sun            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL1                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL1                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL1                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL1                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL1                        ) = 1.37000000000000000E+03
   body.attr.2d.pos.y (             $B_PL1                        ) = -1.60000000000000000E+02
   body.attr.2d.width (             $B_PL1                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PL1                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PL1_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL1_BRF                    ) = $BG_stage_02.$B_PL1     ! Body
   marker.flx.type (                $M_PL1_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL1_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL1_ref                    ) = $BG_stage_02.$B_PL1     ! Body
   marker.ang (           2 ,       $M_PL1_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL1                        ) = $BG_stage_02.$M_Pin1_PL ! From Marker
   joint.to (                       $J_PL1                        ) = $BG_stage_02.$M_PL1_BRF ! To Marker
   joint.type (                     $J_PL1                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL1                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL1                        ) = 1680
   joint.attr.2d.pos.y (   1 ,      $J_PL1                        ) = -190
   joint.attr.2d.ori (    1 ,       $J_PL1                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL1    ) = 1500, 1500, 1663
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL1    ) = -170, -190, -190
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL1      ) = 1410, 1410, 1707, 1707, 1697
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL1      ) = -160, -210, -210, -190, -190

   prim.type (                      $P_PL1                        ) = 25                      ! Type
   prim.ref (                       $P_PL1                        ) = $BG_stage_02.$M_PL1_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL1                        ) = 2.38000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL1                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL1                        ) = 9.20000000000000000E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL1                        ) = 6.60000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL1                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL1                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL1                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL1                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL1                  ) = $SVG_stage_02.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL1                  ) = $SVG_stage_02.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL1                  ) = $SVG_stage_02.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL1                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL1                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL1            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL1            ) = $SVG_stage_02.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL1                  ) = $SVG_stage_02.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL1                  ) = $SVG_stage_02.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL1            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL1      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL1      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL1            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL1                        ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL1                        ) = $SVG_stage_02.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL1                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL1                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL1            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL1                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL1                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL1                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL1                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL1                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL1            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL1            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL2                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL2                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL2                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL2                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL2                        ) = 8.20000000000000000E+02
   body.attr.2d.pos.y (             $B_PL2                        ) = -3.30000000000000000E+02
   body.attr.2d.width (             $B_PL2                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PL2                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PL2_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL2_BRF                    ) = $BG_stage_02.$B_PL2     ! Body
   marker.flx.type (                $M_PL2_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL2_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL2_ref                    ) = $BG_stage_02.$B_PL2     ! Body
   marker.ang (           2 ,       $M_PL2_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL2                        ) = $BG_stage_02.$M_Pin2_PL ! From Marker
   joint.to (                       $J_PL2                        ) = $BG_stage_02.$M_PL2_BRF ! To Marker
   joint.type (                     $J_PL2                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL2                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL2                        ) = 500
   joint.attr.2d.pos.y (   1 ,      $J_PL2                        ) = -210
   joint.attr.2d.ori (    1 ,       $J_PL2                        ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL2    ) = 910, 527, 527, 527, 527, 517
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL2    ) = -350, -350, -340, -330, -210, -210
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL2      ) = 820, 473, 473, 473, 473, 473, 483
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL2      ) = -320, -320, -310, -300, -290, -210, -210

   prim.type (                      $P_PL2                        ) = 25                      ! Type
   prim.ref (                       $P_PL2                        ) = $BG_stage_02.$M_PL2_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL2                        ) = 2.38000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL2                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL2                        ) = 9.20000000000000000E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL2                        ) = 6.60000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL2                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL2                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL2                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL2                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL2                  ) = $SVG_stage_02.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL2                  ) = $SVG_stage_02.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL2                  ) = $SVG_stage_02.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL2                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL2                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL2            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL2            ) = $SVG_stage_02.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL2                  ) = $SVG_stage_02.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL2                  ) = $SVG_stage_02.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL2            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL2      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL2      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL2            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL2                        ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL2                        ) = $SVG_stage_02.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL2                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL2                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL2            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL2                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL2                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL2                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL2                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL2                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL2            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL2            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_PL3                        ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_PL3                        ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_PL3                        ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_PL3                        ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_PL3                        ) = 2.20000000000000000E+02
   body.attr.2d.pos.y (             $B_PL3                        ) = 2.00000000000000000E+01
   body.attr.2d.width (             $B_PL3                        ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_PL3                        ) = 3.00000000000000000E+01

   marker.type (                    $M_PL3_BRF                    ) = 1                       ! Type
   marker.parent (                  $M_PL3_BRF                    ) = $BG_stage_02.$B_PL3     ! Body
   marker.flx.type (                $M_PL3_BRF                    ) = 4                       ! Flexible type

   marker.type (                    $M_PL3_ref                    ) = 2                       ! Type
   marker.parent (                  $M_PL3_ref                    ) = $BG_stage_02.$B_PL3     ! Body
   marker.ang (           2 ,       $M_PL3_ref                    ) = { 90 deg }              ! Angles

   joint.from (                     $J_PL3                        ) = $BG_stage_02.$M_Pin3_PL ! From Marker
   joint.to (                       $J_PL3                        ) = $BG_stage_02.$M_PL3_BRF ! To Marker
   joint.type (                     $J_PL3                        ) = 0                       ! Type
   joint.par (            1 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_PL3                        ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_PL3                        ) = 420
   joint.attr.2d.pos.y (   1 ,      $J_PL3                        ) = 60
   joint.attr.2d.ori (    1 ,       $J_PL3                        ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_PL3    ) = 370, 403
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_PL3    ) = 60, 60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_PL3      ) = 270, 476.25, 476.25, 476.25, 437
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_PL3      ) = 30, 30, 40, 60, 60

   prim.type (                      $P_PL3                        ) = 25                      ! Type
   prim.ref (                       $P_PL3                        ) = $BG_stage_02.$M_PL3_ref ! Reference Marker
   prim.color.r (         1 ,       $P_PL3                        ) = 2.38000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_PL3                        ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_PL3                        ) = 9.20000000000000000E+01 ! Colors (green component)
   prim.color.g (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_PL3                        ) = 6.60000000000000000E+01 ! Colors (blue component)
   prim.color.b (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_PL3                        ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_PL3                        ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_PL3                        ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_PL3                        ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_PL3                  ) = $SVG_stage_02.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_PL3                  ) = $SVG_stage_02.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_PL3                  ) = $SVG_stage_02.$_x_planet ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_PL3                  ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_PL3                  ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_PL3            ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_PL3            ) = $SVG_stage_02.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_PL3                  ) = $SVG_stage_02.$_z_planet ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_PL3                  ) = $SVG_stage_02.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_PL3            ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_PL3      ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_PL3      ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_PL3            ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_PL3                        ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_PL3                        ) = $SVG_stage_02.$_z_planet ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_PL3                        ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_PL3                        ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_PL3            ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_PL3                  ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_PL3                  ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_PL3                        ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_PL3                        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_PL3                  ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_PL3            ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_PL3            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_Ring                       ) = 2.50000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Ring                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Ring                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Ring                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Ring                       ) = 8.70000000000000000E+02
   body.attr.2d.pos.y (             $B_Ring                       ) = -1.10000000000000000E+02
   body.attr.2d.width (             $B_Ring                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Ring                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Ring_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Ring_BRF                   ) = $BG_stage_02.$B_Ring    ! Body
   marker.flx.type (                $M_Ring_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Ring_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Ring_ref                   ) = $BG_stage_02.$B_Ring    ! Body
   marker.ang (           2 ,       $M_Ring_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Ring                       ) = $M_Gearbox_Frame_IMS    ! From Marker
   joint.to (                       $J_Ring                       ) = $BG_stage_02.$M_Ring_BRF ! To Marker
   joint.type (                     $J_Ring                       ) = 0                       ! Type
   joint.par (            1 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Ring                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Ring                       ) = 550
   joint.attr.2d.pos.y (   1 ,      $J_Ring                       ) = -110
   joint.attr.2d.ori (    1 ,       $J_Ring                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Ring   ) = -10, -10, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473, 483, 493, 503, 513, 513, 523, 533
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Ring   ) = 30, 6.2890625, 6.2890625, -34.84375, -34.84375, -34.84375, -34.84375, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -53.125, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -77.5, -110, -110, -110
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Ring     ) = 880, 880, 597, 597, 597, 597, 597, 597, 587, 577, 567
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Ring     ) = -80, -60, -60, -70, -80, -90, -100, -110, -110, -110, -110

   prim.type (                      $P_Ring                       ) = 25                      ! Type
   prim.ref (                       $P_Ring                       ) = $BG_stage_02.$M_Ring_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (red component)
   prim.color.r (         2 ,       $P_Ring                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Ring                       ) = 2.55000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Ring                       ) = 1.27000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Ring                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Ring                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Ring                       ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Ring                       ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Ring                 ) = $SVG_stage_02.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Ring                 ) = $SVG_stage_02.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Ring                 ) = $SVG_stage_02.$_x_ring  ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Ring                 ) = 0.00000000000000000E+00 ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Ring                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Ring           ) = 1.25000000000000000E+00 ! [-] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Ring           ) = $SVG_stage_02.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Ring                 ) = $SVG_stage_02.$_z_ring  ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Ring                 ) = $SVG_stage_02.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Ring           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Ring     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Ring     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Ring           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Ring                       ) = { 400*$SVG_stage_02.$_gamma_d mm } ! [m] Ring Diameter
   prim.par (             3 ,   3 , $P_Ring                       ) = $SVG_stage_02.$_z_ring  ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Ring                       ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Ring                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Ring discretisation per tooth
   prim.par (             4 ,   1 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Ring           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Ring                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Ring                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Ring                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Ring                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Ring                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Ring           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Ring           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_Pin1                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin1                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin1                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin1                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin1                       ) = 1.46000000000000000E+03
   body.attr.2d.pos.y (             $B_Pin1                       ) = -1.70000000000000000E+02
   body.attr.2d.width (             $B_Pin1                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin1                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin1_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin1_BRF                   ) = $BG_stage_02.$B_Pin1    ! Body
   marker.flx.type (                $M_Pin1_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin1_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin1_PL                    ) = $BG_stage_02.$B_Pin1    ! Body

   marker.type (                    $M_Pin1_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_A             ) = $BG_stage_02.$B_Pin1    ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_A             ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin1_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin1_Bearing_B             ) = $BG_stage_02.$B_Pin1    ! Body
   marker.pos (           1 ,       $M_Pin1_Bearing_B             ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin1                       ) = $BG_stage_02.$M_PLC_Pin1 ! From Marker
   joint.to (                       $J_Pin1                       ) = $BG_stage_02.$M_Pin1_BRF ! To Marker
   joint.type (                     $J_Pin1                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin1                       ) = 4.31430183682146595E-04 ! Position
   joint.st.pos (         2 ,       $J_Pin1                       ) = -8.33948741226204652E-10 ! Position
   joint.st.pos (         3 ,       $J_Pin1                       ) = 6.62730229006855287E-12 ! Position
   joint.st.pos (         4 ,       $J_Pin1                       ) = -1.04603964324300128E-05 ! Position
   joint.st.pos (         5 ,       $J_Pin1                       ) = -7.20955344192934746E-08 ! Position
   joint.st.pos (         6 ,       $J_Pin1                       ) = -9.49512076576093691E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin1                       ) = 0.00000000000000000E+00 ! Velocity
   joint.attr.2d.pos.x (   1 ,      $J_Pin1                       ) = 1030
   joint.attr.2d.pos.y (   1 ,      $J_Pin1                       ) = -120
   joint.attr.2d.ori (    1 ,       $J_Pin1                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin1   ) = 810, 810, 1013
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin1   ) = -100, -120, -120
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin1     ) = 1470, 1470, 1077, 1077, 1077, 1067, 1057, 1047
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin1     ) = -140, -100, -100, -110, -120, -120, -120, -120

   prim.type (                      $P_Pin1                       ) = 2                       ! Type
   prim.ref (                       $P_Pin1                       ) = $BG_stage_02.$M_Pin1_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin1                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin1                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin1                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin1                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin1                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin1                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin1                       ) = { 800*$SVG_stage_02.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin1                       ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin1                       ) = $SVG_stage_02.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin1                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin1                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_Pin2                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin2                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin2                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin2                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin2                       ) = 9.10000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin2                       ) = -3.70000000000000000E+02
   body.attr.2d.width (             $B_Pin2                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin2                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin2_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin2_BRF                   ) = $BG_stage_02.$B_Pin2    ! Body
   marker.flx.type (                $M_Pin2_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin2_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin2_PL                    ) = $BG_stage_02.$B_Pin2    ! Body

   marker.type (                    $M_Pin2_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_A             ) = $BG_stage_02.$B_Pin2    ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_A             ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin2_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin2_Bearing_B             ) = $BG_stage_02.$B_Pin2    ! Body
   marker.pos (           1 ,       $M_Pin2_Bearing_B             ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin2                       ) = $BG_stage_02.$M_PLC_Pin2 ! From Marker
   joint.to (                       $J_Pin2                       ) = $BG_stage_02.$M_Pin2_BRF ! To Marker
   joint.type (                     $J_Pin2                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin2                       ) = -7.03342599231684322E-05 ! Position
   joint.st.pos (         2 ,       $J_Pin2                       ) = 1.90800628359329149E-09 ! Position
   joint.st.pos (         3 ,       $J_Pin2                       ) = -4.87942114955628175E-08 ! Position
   joint.st.pos (         4 ,       $J_Pin2                       ) = -1.04551283823390604E-05 ! Position
   joint.st.pos (         5 ,       $J_Pin2                       ) = -1.55833226447968528E-04 ! Position
   joint.st.pos (         6 ,       $J_Pin2                       ) = 4.75866777838158037E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin2                       ) = 0.00000000000000000E+00 ! Velocity
   joint.attr.2d.pos.x (   1 ,      $J_Pin2                       ) = 650
   joint.attr.2d.pos.y (   1 ,      $J_Pin2                       ) = -170
   joint.attr.2d.ori (    1 ,       $J_Pin2                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin2   ) = 780, 780, 667
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin2   ) = -100, -170, -170
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin2     ) = 910, 631.25, 631.25, 631.25, 631.25, 631.25, 621.25, 611.25, 601.25, 591.25, 581.25, 571.25, 561.25, 561.25, 633
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin2     ) = -360, -360, -350, -340, -330, -180, -180, -180, -180, -180, -180, -180, -180, -170, -170

   prim.type (                      $P_Pin2                       ) = 2                       ! Type
   prim.ref (                       $P_Pin2                       ) = $BG_stage_02.$M_Pin2_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin2                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin2                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin2                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin2                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin2                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin2                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin2                       ) = { 800*$SVG_stage_02.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin2                       ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin2                       ) = $SVG_stage_02.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin2                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin2                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


   body.m (                         $B_Pin3                       ) = 1.00000000000000000E+00 ! Mass of the Body
   body.mp (                        $B_Pin3                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pin3                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pin3                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pin3                       ) = 3.20000000000000000E+02
   body.attr.2d.pos.y (             $B_Pin3                       ) = 4.00000000000000000E+01
   body.attr.2d.width (             $B_Pin3                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pin3                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Pin3_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Pin3_BRF                   ) = $BG_stage_02.$B_Pin3    ! Body
   marker.flx.type (                $M_Pin3_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Pin3_PL                    ) = 2                       ! Type
   marker.parent (                  $M_Pin3_PL                    ) = $BG_stage_02.$B_Pin3    ! Body

   marker.type (                    $M_Pin3_Bearing_A             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_A             ) = $BG_stage_02.$B_Pin3    ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_A             ) = { -345*$SVG_stage_02.$_gamma_b mm } ! Position

   marker.type (                    $M_Pin3_Bearing_B             ) = 2                       ! Type
   marker.parent (                  $M_Pin3_Bearing_B             ) = $BG_stage_02.$B_Pin3    ! Body
   marker.pos (           1 ,       $M_Pin3_Bearing_B             ) = { 345*$SVG_stage_02.$_gamma_b mm } ! Position

   joint.from (                     $J_Pin3                       ) = $BG_stage_02.$M_PLC_Pin3 ! From Marker
   joint.to (                       $J_Pin3                       ) = $BG_stage_02.$M_Pin3_BRF ! To Marker
   joint.type (                     $J_Pin3                       ) = 20                      ! Type
   joint.st.pos (         1 ,       $J_Pin3                       ) = 2.91871829963028775E-04 ! Position
   joint.st.pos (         2 ,       $J_Pin3                       ) = 1.90970156957209357E-09 ! Position
   joint.st.pos (         3 ,       $J_Pin3                       ) = 4.88327321208934311E-08 ! Position
   joint.st.pos (         4 ,       $J_Pin3                       ) = -1.04551207395362710E-05 ! Position
   joint.st.pos (         5 ,       $J_Pin3                       ) = 1.55850623150689219E-04 ! Position
   joint.st.pos (         6 ,       $J_Pin3                       ) = 4.79150789278199694E-06 ! Position
   joint.st.vel (         1 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         2 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         3 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         4 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         5 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.st.vel (         6 ,       $J_Pin3                       ) = 0.00000000000000000E+00 ! Velocity
   joint.attr.2d.pos.x (   1 ,      $J_Pin3                       ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_Pin3                       ) = 0
   joint.attr.2d.ori (    1 ,       $J_Pin3                       ) = 180
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pin3   ) = 780, 780, 587, 587, 587, 587, 587, 587, 577
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pin3   ) = -70, -60, -60, -55.78125, -43.125, -26.25, -15, 0, 0
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pin3     ) = 360, 360, 533, 533, 533, 533, 543
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pin3     ) = 40, 30, 30, 26.25, 15, 0, 0

   prim.type (                      $P_Pin3                       ) = 2                       ! Type
   prim.ref (                       $P_Pin3                       ) = $BG_stage_02.$M_Pin3_BRF ! Reference Marker
   prim.ang (             3 ,       $P_Pin3                       ) = { 90 deg }              ! Angles
   prim.color.r (         1 ,       $P_Pin3                       ) = 1.35000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pin3                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pin3                       ) = 2.06000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pin3                       ) = 2.35000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pin3                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,       $P_Pin3                       ) = { 800*$SVG_stage_02.$_gamma_b mm } ! [m] Height
   prim.par (             3 ,       $P_Pin3                       ) = { 380*$SVG_stage_02.$_gamma_d mm } ! [m] Outer diameter
   prim.par (             4 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [m] Inner diameter
   prim.par (             5 ,       $P_Pin3                       ) = $SVG_stage_02.$_z_planet ! [-] Number of planes
   prim.par (             6 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted planes
   prim.par (             7 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Show bottom cap
   prim.par (             8 ,       $P_Pin3                       ) = 1.00000000000000000E+00 ! [-] Show top cap
   prim.par (             9 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [rad] Start angle
   prim.par (            10 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [rad] Delta angle
   prim.par (            11 ,       $P_Pin3                       ) = 0.00000000000000000E+00 ! [-] Close geometry with


bodygroup.end (                     $BG_stage_02                  )                           ! $BG_stage_02

bodygroup.begin (                   $BG_stage_03                  )                           ! $BG_stage_03
   body.m (                         $B_Pinion                     ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Pinion                     ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Pinion                     ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Pinion                     ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Pinion                     ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Pinion                     ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Pinion                     ) = 7.20000000000000000E+02
   body.attr.2d.pos.y (             $B_Pinion                     ) = -3.00000000000000000E+02
   body.attr.2d.width (             $B_Pinion                     ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Pinion                     ) = 3.00000000000000000E+01

   marker.type (                    $M_Pinion_BRF                 ) = 1                       ! Type
   marker.parent (                  $M_Pinion_BRF                 ) = $BG_stage_03.$B_Pinion  ! Body
   marker.flx.type (                $M_Pinion_BRF                 ) = 4                       ! Flexible type

   marker.type (                    $M_Pinion_ref                 ) = 2                       ! Type
   marker.parent (                  $M_Pinion_ref                 ) = $BG_stage_03.$B_Pinion  ! Body
   marker.ang (           2 ,       $M_Pinion_ref                 ) = { 90 deg }              ! Angles

   joint.from (                     $J_Pinion                     ) = $M_HSShaft_BRF          ! From Marker
   joint.to (                       $J_Pinion                     ) = $BG_stage_03.$M_Pinion_BRF ! To Marker
   joint.type (                     $J_Pinion                     ) = 0                       ! Type
   joint.par (            1 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Pinion                     ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Pinion                     ) = 660
   joint.attr.2d.pos.y (   1 ,      $J_Pinion                     ) = -260
   joint.attr.2d.ori (    1 ,       $J_Pinion                     ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Pinion ) = 580, 580, 643
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Pinion ) = -230, -260, -260
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Pinion   ) = 730, 730, 677
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Pinion   ) = -270, -260, -260

   prim.type (                      $P_Pinion                     ) = 25                      ! Type
   prim.ref (                       $P_Pinion                     ) = $BG_stage_03.$M_Pinion_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Pinion                     ) = 2.05000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Pinion                     ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Pinion                     ) = 1.50000000000000000E+02 ! Colors (green component)
   prim.color.g (         2 ,       $P_Pinion                     ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Pinion                     ) = 2.05000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Pinion                     ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Pinion                     ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Pinion                     ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Pinion                     ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Pinion                     ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Pinion                     ) = { -4 deg }              ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Pinion               ) = $SVG_stage_03.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Pinion               ) = $SVG_stage_03.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Pinion               ) = $SVG_stage_03.$_x_pinion ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Pinion               ) = $SVG_stage_03.$_helix   ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Pinion               ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Pinion         ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Pinion         ) = { 380.751*$SVG_stage_03.$_gamma_m_n mm } ! [m] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Pinion         ) = { 319.627*$SVG_stage_03.$_gamma_m_n mm } ! [m] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Pinion         ) = $SVG_stage_03.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Pinion               ) = $SVG_stage_03.$_z_pinion ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Pinion               ) = $SVG_stage_03.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Pinion         ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Pinion         ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Pinion         ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Pinion   ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Pinion   ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Pinion         ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Pinion                     ) = { 200*$SVG_stage_03.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_Pinion                     ) = $SVG_stage_03.$_z_pinion ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Pinion                     ) = 0.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Pinion                     ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Pinion               ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Pinion               ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Pinion         ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Pinion               ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Pinion               ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Pinion                     ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Pinion                     ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Pinion               ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Pinion         ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Pinion         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


   body.m (                         $B_Gear                       ) = 1.00000000000000000E+03 ! Mass of the Body
   body.mp (                        $B_Gear                       ) = 1                       ! 0=manual; 1=auto (based on geometry); 2=mass manual, CG & Inertia auto
   body.I.tens (          1 ,   1 , $B_Gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          2 ,   2 , $B_Gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.tens (          3 ,   3 , $B_Gear                       ) = 1.00000000000000000E+00 ! Moments of inertia
   body.I.kind (                    $B_Gear                       ) = -1                      ! Kind of I-tensor specification: -1=wrt CG; 0=wrt BRF; 1=wrt Marker
   body.attr.2d.pos.x (             $B_Gear                       ) = 9.70000000000000000E+02
   body.attr.2d.pos.y (             $B_Gear                       ) = -8.00000000000000000E+01
   body.attr.2d.width (             $B_Gear                       ) = 5.00000000000000000E+01
   body.attr.2d.height (            $B_Gear                       ) = 3.00000000000000000E+01

   marker.type (                    $M_Gear_BRF                   ) = 1                       ! Type
   marker.parent (                  $M_Gear_BRF                   ) = $BG_stage_03.$B_Gear    ! Body
   marker.flx.type (                $M_Gear_BRF                   ) = 4                       ! Flexible type

   marker.type (                    $M_Gear_ref                   ) = 2                       ! Type
   marker.parent (                  $M_Gear_ref                   ) = $BG_stage_03.$B_Gear    ! Body
   marker.ang (           2 ,       $M_Gear_ref                   ) = { 90 deg }              ! Angles

   joint.from (                     $J_Gear                       ) = $M_HSIShaft_GEAR        ! From Marker
   joint.to (                       $J_Gear                       ) = $BG_stage_03.$M_Gear_BRF ! To Marker
   joint.type (                     $J_Gear                       ) = 0                       ! Type
   joint.par (            1 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about alpha
   joint.par (            2 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about beta
   joint.par (            3 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [rad] Rotation about gamma
   joint.par (            4 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [m] Translation in x
   joint.par (            5 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [m] Translation in y
   joint.par (            6 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [m] Translation in z
   joint.par (            7 ,       $J_Gear                       ) = 0.00000000000000000E+00 ! [-] Rotation sequence
   joint.attr.2d.pos.x (   1 ,      $J_Gear                       ) = 560
   joint.attr.2d.pos.y (   1 ,      $J_Gear                       ) = -60
   joint.attr.2d.ori (    1 ,       $J_Gear                       ) = 0
   joint.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $J_Gear   ) = 520, 530, 530, 543
   joint.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $J_Gear   ) = -50, -50, -60, -60
   joint.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $J_Gear     ) = 970, 577
   joint.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $J_Gear     ) = -60, -60

   prim.type (                      $P_Gear                       ) = 25                      ! Type
   prim.ref (                       $P_Gear                       ) = $BG_stage_03.$M_Gear_ref ! Reference Marker
   prim.color.r (         1 ,       $P_Gear                       ) = 1.28000000000000000E+02 ! Colors (red component)
   prim.color.r (         2 ,       $P_Gear                       ) = 2.55000000000000000E+02 ! Colors (red component)
   prim.color.g (         1 ,       $P_Gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.g (         2 ,       $P_Gear                       ) = 0.00000000000000000E+00 ! Colors (green component)
   prim.color.b (         1 ,       $P_Gear                       ) = 1.28000000000000000E+02 ! Colors (blue component)
   prim.color.b (         2 ,       $P_Gear                       ) = 0.00000000000000000E+00 ! Colors (blue component)
   prim.color.t (         1 ,       $P_Gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.color.t (         2 ,       $P_Gear                       ) = 0.00000000000000000E+00 ! Colors (transparency component)
   prim.mp.dens.solid (             $P_Gear                       ) = 7.85000000000000000E+03 ! Density
   prim.par (             2 ,   1 , $P_Gear                       ) = 3.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   2 , $P_Gear                       ) = 0.00000000000000000E+00 ! [rad] Initial gear angle
   prim.par (             2 ,   3 ,   1 , $P_Gear                 ) = $SVG_stage_03.$_m_n     ! [m] Normal module
   prim.par (             2 ,   3 ,   2 , $P_Gear                 ) = $SVG_stage_03.$_alpha   ! [rad] Normal pressure angle
   prim.par (             2 ,   3 ,   3 , $P_Gear                 ) = $SVG_stage_03.$_x_gear  ! [-] Shift factor
   prim.par (             2 ,   3 ,   4 , $P_Gear                 ) = { -$SVG_stage_03.$_helix } ! [rad] Helix angle
   prim.par (             2 ,   3 ,   5 , $P_Gear                 ) = 0.00000000000000000E+00 ! [rad] Bevel angle
   prim.par (             2 ,   3 ,   6 ,   1 , $P_Gear           ) = 2.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   6 ,   2 , $P_Gear           ) = { 1395.372*$SVG_stage_03.$_gamma_m_n mm } ! [m] Addendum value
   prim.par (             2 ,   3 ,   6 ,   3 , $P_Gear           ) = { 1334.248*$SVG_stage_03.$_gamma_m_n mm } ! [m] Dedendum value
   prim.par (             2 ,   3 ,   7 ,   1 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   3 ,   7 ,   2 , $P_Gear           ) = $SVG_stage_03.$_Norm_Backlash ! [m] Value
   prim.par (             2 ,   3 ,   8 , $P_Gear                 ) = $SVG_stage_03.$_z_gear  ! [-] Number of teeth
   prim.par (             2 ,   3 ,   9 , $P_Gear                 ) = $SVG_stage_03.$_b       ! [m] Flank width
   prim.par (             2 ,   4 ,   1 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Method
   prim.par (             2 ,   4 ,   1 ,   2 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Manufacturing process
   prim.par (             2 ,   4 ,   1 ,   3 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Shaft angle
   prim.par (             2 ,   4 ,   1 ,   5 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (pinion)
   prim.par (             2 ,   4 ,   1 ,   6 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Number of teeth (wheel)
   prim.par (             2 ,   4 ,   1 ,   8 , $P_Gear           ) = 0.00000000000000000E+00 ! [m] Outer pitch diameter of wheel
   prim.par (             2 ,   4 ,   1 ,   9 , $P_Gear           ) = 0.00000000000000000E+00 ! [m] Wheel face width
   prim.par (             2 ,   4 ,   1 ,  11 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Mean spiral angle of wheel
   prim.par (             2 ,   4 ,   1 ,  12 , $P_Gear           ) = 0.00000000000000000E+00 ! [m] Cutter radius
   prim.par (             2 ,   4 ,   2 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,   2 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (drive side)
   prim.par (             2 ,   4 ,   2 ,   3 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Nom. pres. angle (coast side)
   prim.par (             2 ,   4 ,   2 ,   5 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Profile shift coefficient
   prim.par (             2 ,   4 ,   2 ,   6 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Crown gear addendum factor
   prim.par (             2 ,   4 ,   2 ,   7 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Crown gear dedendum factor
   prim.par (             2 ,   4 ,   2 ,   8 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Thickness modification coeff.
   prim.par (             2 ,   4 ,   2 ,  13 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Backlash
   prim.par (             2 ,   4 ,   2 ,  13 ,   1 , $P_Gear     ) = 0.00000000000000000E+00 ! [-] Type
   prim.par (             2 ,   4 ,   2 ,  13 ,   2 , $P_Gear     ) = 0.00000000000000000E+00 ! [m] Value
   prim.par (             2 ,   4 ,   2 ,  14 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Addendum angle of wheel
   prim.par (             2 ,   4 ,   2 ,  15 , $P_Gear           ) = 0.00000000000000000E+00 ! [rad] Dedendum angle of wheel
   prim.par (             3 ,   1 , $P_Gear                       ) = { 500*$SVG_stage_03.$_gamma_d mm } ! [m] Bore Diameter
   prim.par (             3 ,   3 , $P_Gear                       ) = $SVG_stage_03.$_z_gear  ! [-] Number of visible teeth
   prim.par (             3 ,   4 , $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Number of highlighted teeth
   prim.par (             3 ,   5 , $P_Gear                       ) = 2.00000000000000000E+00 ! [-] Tip discretisation
   prim.par (             3 ,   6 , $P_Gear                       ) = 1.50000000000000000E+01 ! [-] Flank discretisation
   prim.par (             3 ,   7 , $P_Gear                       ) = 2.00000000000000000E+00 ! [-] Root discretisation
   prim.par (             3 ,   8 , $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Face discretisation
   prim.par (             3 ,   9 , $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Bore discretisation per tooth
   prim.par (             4 ,   1 , $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Scale factor
   prim.par (             4 ,   2 ,   1 , $P_Gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   3 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   4 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   5 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   6 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   7 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   8 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,   9 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  10 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   2 ,  11 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   1 , $P_Gear                 ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   3 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   4 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   5 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   6 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   7 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   8 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,   9 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  10 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   3 ,  11 ,   1 , $P_Gear           ) = 0.00000000000000000E+00 ! [-] Mode
   prim.par (             4 ,   4 ,   1 , $P_Gear                 ) = 0.00000000000000000E+00 ! [m] Circular mod. amount
   prim.par (             4 ,   4 ,   2 , $P_Gear                 ) = 0.00000000000000000E+00 ! [m] Lead crowning amount
   prim.par (             5 ,   1 , $P_Gear                       ) = 0.00000000000000000E+00 ! [-] Type
   prim.plot.par (        1 ,       $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 , $P_Gear                       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 , $P_Gear                 ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   1 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   2 , $P_Gear           ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   3 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   4 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   5 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   1 ,   6 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   prim.plot.par (        1 ,   1 ,   2 ,   1 , $P_Gear           ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter


bodygroup.end (                     $BG_stage_03                  )                           ! $BG_stage_03

!**********************************************************************
! Force Elements
!**********************************************************************
force.type (                        $F_rotor_load                 ) = 93                      ! Type
force.from (                        $F_rotor_load                 ) = $M_Bed_Plate_Input_Loading ! From Marker
force.to (                          $F_rotor_load                 ) = $M_main_shaft_LSS_Input_Loading ! To Marker
force.disabled (                    $F_rotor_load                 ) = 0                       ! Disabled
force.par (               1 ,       $F_rotor_load                 ) = $UE_Fx                  ! [-] u-Vector Element force x
force.par (               2 ,       $F_rotor_load                 ) = $UE_Fy                  ! [-] u-Vector Element force y
force.par (               3 ,       $F_rotor_load                 ) = $UE_Fz                  ! [-] u-Vector Element force z
force.par (               4 ,       $F_rotor_load                 ) = $UE_Mx                  ! [-] u-Vector Element torque x
force.par (               5 ,       $F_rotor_load                 ) = $UE_My                  ! [-] u-Vector Element torque y
force.par (               6 ,       $F_rotor_load                 ) = $UE_Mz                  ! [-] u-Vector Element torque z
force.attr.2d.pos.x (     1 ,       $F_rotor_load                 ) = -20
force.attr.2d.pos.y (     1 ,       $F_rotor_load                 ) = -20
force.attr.2d.ori (       1 ,       $F_rotor_load                 ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_rotor_load) = 390, 390, 364.125, 364.125, 354.125, 318.25, 103, 103, 103, 93, 83, 73, 63, 53, 43, 33, 33, 33, 23, 13, 3, -7, -17, -27, -37, -37, -47, -47, -37
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_rotor_load) = 10, 16.25, 16.25, 5, 5, 5, 5, -10, -20, -20, -20, -20, -20, -20, -20, -20, -30, -40, -40, -40, -40, -40, -40, -40, -40, -30, -30, -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_rotor_load  ) = -130, -55.625, -55.625, 28.75, 28.75, 28.75, -3
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_rotor_load  ) = -30, -30, -40, -40, -30, -20, -20

force.type (                        $F_generator_torque           ) = 50                      ! Type
force.from (                        $F_generator_torque           ) = $M_HSShaft_BRF          ! From Marker
force.to (                          $F_generator_torque           ) = $M_Gearbox_Frame_Shaft_Gen ! To Marker
force.disabled (                    $F_generator_torque           ) = $SVG_generator.$_use_torque ! Disabled
force.par (               1 ,       $F_generator_torque           ) = $M_HSShaft_BRF          ! [-] Reference Marker for calc.
force.par (               3 ,       $F_generator_torque           ) = null                    ! [-] Expression for Fx
force.par (               4 ,       $F_generator_torque           ) = null                    ! [-] Expression for Fy
force.par (               5 ,       $F_generator_torque           ) = null                    ! [-] Expression for Fz
force.par (               6 ,       $F_generator_torque           ) = $X_gen_torq             ! [-] Expression for Lx
force.par (               7 ,       $F_generator_torque           ) = null                    ! [-] Expression for Ly
force.par (               8 ,       $F_generator_torque           ) = null                    ! [-] Expression for Lz
force.attr.2d.pos.x (     1 ,       $F_generator_torque           ) = 370
force.attr.2d.pos.y (     1 ,       $F_generator_torque           ) = -160
force.attr.2d.ori (       1 ,       $F_generator_torque           ) = 180
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_generator_torque) = 560, 560, 462.6875, 462.6875, 430.25, 387
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_generator_torque) = -200, -137.5, -137.5, -160, -160, -160
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_generator_torque) = 50, 50, 74.65625, 74.65625, 74.65625, 74.65625, 74.65625, 74.65625, 99.3125, 148.625, 247.25, 313, 313, 323, 333, 343, 353
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_generator_torque) = 30, 20, 20, 1.015625, -17.96875, -55.9375, -81.25, -115, -115, -115, -115, -115, -160, -160, -160, -160, -160

force.type (                        $F_generator_torque_PI        ) = 110                     ! Type
force.from (                        $F_generator_torque_PI        ) = $M_HSShaft_BRF          ! From Marker
force.to (                          $F_generator_torque_PI        ) = $M_Gearbox_Frame_Shaft_Gen ! To Marker
force.disabled (                    $F_generator_torque_PI        ) = $SVG_generator.$_use_control ! Disabled
force.par (               1 ,       $F_generator_torque_PI        ) = $C_PI_generator         ! [-] Input Control Element 1
force.par (               2 ,       $F_generator_torque_PI        ) = 1.00000000000000000E+00 ! [-] -> Output Value u1
force.par (               3 ,       $F_generator_torque_PI        ) = null                    ! [-] Input Control Element 2
force.par (               4 ,       $F_generator_torque_PI        ) = 0.00000000000000000E+00 ! [-] -> Output Value u2
force.par (               5 ,       $F_generator_torque_PI        ) = 2.00000000000000000E+00 ! [-] Output type
force.par (               6 ,       $F_generator_torque_PI        ) = 1.00000000000000000E+00 ! [-] Axis of force
force.par (               7 ,       $F_generator_torque_PI        ) = 1.00000000000000000E+00 ! [-] Axis of torque
force.par (               8 ,       $F_generator_torque_PI        ) = 1.00000000000000000E+00 ! [Nm] K: Drive constant L=K*(u1+u2)
force.par (               9 ,       $F_generator_torque_PI        ) = 1.00000000000000000E+00 ! [m⁻¹] P: Drive constant F=P*L

force.type (                        $F_INP_A_bearing              ) = 43                      ! Type
force.from (                        $F_INP_A_bearing              ) = $M_main_shaft_LSS_INP_A ! From Marker
force.to (                          $F_INP_A_bearing              ) = $M_Bed_Plate_Bearing_INP_A ! To Marker
force.par (               1 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_x ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_y ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_z ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_x ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_y ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_z ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_al ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_be ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_INP_A_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_A.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_INP_A_bearing              ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_INP_A_bearing              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_INP_A_bearing              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_INP_A_bearing              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_INP_A_bearing              ) = -20
force.attr.2d.pos.y (     1 ,       $F_INP_A_bearing              ) = -20
force.attr.2d.ori (       1 ,       $F_INP_A_bearing              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_INP_A_bearing) = -130, -37
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_INP_A_bearing) = -20, -20
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_INP_A_bearing) = 380, 380, 362.671875, 362.671875, 362.671875, 310.6875, 102.75, 102.75, 102.75, 92.75, -3
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_INP_A_bearing) = -20, -26.25, -26.25, -15, 0, 0, 0, -10, -20, -20, -20

force.type (                        $F_INP_B_bearing              ) = 43                      ! Type
force.from (                        $F_INP_B_bearing              ) = $M_main_shaft_LSS_INP_B ! From Marker
force.to (                          $F_INP_B_bearing              ) = $M_Bed_Plate_Bearing_INP_B ! To Marker
force.par (               1 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in x
force.par (               2 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in y
force.par (               3 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [N] Nominal force in z
force.par (               4 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
force.par (               5 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
force.par (               6 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
force.par (               7 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_x ! [N/m] Transl. stiffness in x
force.par (               8 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_y ! [N/m] Transl. stiffness in y
force.par (               9 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_z ! [N/m] Transl. stiffness in z
force.par (              10 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
force.par (              11 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
force.par (              12 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
force.par (              13 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_x ! [Ns/m] Transl. damping in x
force.par (              14 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_y ! [Ns/m] Transl. damping in y
force.par (              15 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_z ! [Ns/m] Transl. damping in z
force.par (              16 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_al ! [Nms/rad] Rotat. damping in al
force.par (              17 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_be ! [Nms/rad] Rotat. damping in be
force.par (              18 ,       $F_INP_B_bearing              ) = $SVG_main_shaft_LSS.$SVG_INP_B.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
force.par (              19 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_c(x)
force.par (              20 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_c(y)
force.par (              21 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_c(z)
force.par (              22 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_c(al)
force.par (              23 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_c(be)
force.par (              24 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_c(ga)
force.par (              25 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_d(xd)
force.par (              26 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_d(yd)
force.par (              27 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function F_d(zd)
force.par (              28 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_d(ald)
force.par (              29 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_d(bed)
force.par (              30 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function T_d(gad)
force.par (              31 ,       $F_INP_B_bearing              ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
force.par (              33 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for force in x
force.par (              34 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for force in y
force.par (              35 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for force in z
force.par (              36 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for torque in al
force.par (              37 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for torque in be
force.par (              38 ,       $F_INP_B_bearing              ) = null                    ! [-] Expression for torque in ga
force.par (              39 ,       $F_INP_B_bearing              ) = null                    ! [-] Input Function Set
force.par (              40 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
force.par (              41 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
force.par (              42 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
force.par (              43 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
force.par (              44 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
force.par (              45 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
force.par (              46 ,       $F_INP_B_bearing              ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
force.attr.2d.pos.x (     1 ,       $F_INP_B_bearing              ) = -80
force.attr.2d.pos.y (     1 ,       $F_INP_B_bearing              ) = -50
force.attr.2d.ori (       1 ,       $F_INP_B_bearing              ) = 0
force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_INP_B_bearing) = -140, -140, -97
force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_INP_B_bearing) = -40, -50, -50
force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_INP_B_bearing) = 400, 400, 27, 27, 27, 27, 27, 27, 17, 7, -3, -13, -23, -33, -43, -53, -63
force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_INP_B_bearing) = 10, 15, 15, 0, -10, -20, -30, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50

forcegroup.begin (                  $FEG_stage_01                 )                           ! $FEG_stage_01
   force.type (                     $F_PL1_A                      ) = 43                      ! Type
   force.from (                     $F_PL1_A                      ) = $BG_stage_01.$M_Pin1_Bearing_A ! From Marker
   force.to (                       $F_PL1_A                      ) = $BG_stage_01.$M_PLC_Pin1_Bearing_A ! To Marker
   force.disabled (                 $F_PL1_A                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL1_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL1_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_A                      ) = 440
   force.attr.2d.pos.y (   1 ,      $F_PL1_A                      ) = -250
   force.attr.2d.ori (    1 ,       $F_PL1_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_A  ) = 560, 560, 457
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_A  ) = -280, -250, -250
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_A    ) = 440, 430, 430, 416.984375, 377.9375, 377.9375, 377.9375, 400.25, 413, 413, 413, 413, 423
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_A    ) = -10, -10, -66.25, -66.25, -66.25, -85, -110, -110, -110, -120, -130, -250, -250

   force.type (                     $F_PL1_B                      ) = 43                      ! Type
   force.from (                     $F_PL1_B                      ) = $BG_stage_01.$M_Pin1_Bearing_B ! From Marker
   force.to (                       $F_PL1_B                      ) = $BG_stage_01.$M_PLC_Pin1_Bearing_B ! To Marker
   force.disabled (                 $F_PL1_B                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL1_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL1_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_B                      ) = 500
   force.attr.2d.pos.y (   1 ,      $F_PL1_B                      ) = -280
   force.attr.2d.ori (    1 ,       $F_PL1_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_B  ) = 550, 543.5, 543.5, 517
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_B  ) = -290, -290, -280, -280
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_B    ) = 520, 530, 530, 530, 530, 530, 520, 510, 500, 490, 480, 480, 480, 480, 483
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_B    ) = -20, -20, -30, -40, -50, -120, -120, -120, -120, -120, -120, -130, -160, -280, -280

   force.type (                     $F_PL2_A                      ) = 43                      ! Type
   force.from (                     $F_PL2_A                      ) = $BG_stage_01.$M_Pin2_Bearing_A ! From Marker
   force.to (                       $F_PL2_A                      ) = $BG_stage_01.$M_PLC_Pin2_Bearing_A ! To Marker
   force.disabled (                 $F_PL2_A                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL2_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL2_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_A                      ) = 80
   force.attr.2d.pos.y (   1 ,      $F_PL2_A                      ) = -160
   force.attr.2d.ori (    1 ,       $F_PL2_A                      ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_A  ) = 110, 110, 90, 80, 80, 80
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_A  ) = -270, -264.25, -264.25, -264.25, -254.25, -177
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_A    ) = 440, 430, 430, 424.296875, 407.1875, 338.75, 338.75, 338.75, 338.75, 338.75, 305, 260, 80, 80
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_A    ) = 0, 0, -52.5, -52.5, -52.5, -52.5, -35, -20, -10, 0, 0, 0, 0, -143

   force.type (                     $F_PL2_B                      ) = 43                      ! Type
   force.from (                     $F_PL2_B                      ) = $BG_stage_01.$M_Pin2_Bearing_B ! From Marker
   force.to (                       $F_PL2_B                      ) = $BG_stage_01.$M_PLC_Pin2_Bearing_B ! To Marker
   force.disabled (                 $F_PL2_B                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL2_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL2_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_B                      ) = 110
   force.attr.2d.pos.y (   1 ,      $F_PL2_B                      ) = -220
   force.attr.2d.ori (    1 ,       $F_PL2_B                      ) = 90
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_B  ) = 120, 120, 110, 110
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_B  ) = -270, -254.25, -254.25, -237
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_B    ) = 440, 430, 430, 419.98046875, 409.9609375, 389.921875, 349.84375, 323.125, 323.125, 323.125, 323.125, 287.5, 240, 240, 240, 230, 230, 230, 230, 220, 210, 200, 190, 180, 170, 170, 160, 160, 150, 140, 130, 120, 110, 110
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_B    ) = 10, 10, 30, 30, 30, 30, 30, 30, 20, 10, 5, 5, 5, -10, -30, -30, -40, -50, -60, -60, -60, -60, -60, -60, -60, -50, -50, -88.25, -88.25, -88.25, -88.25, -88.25, -88.25, -203

   force.type (                     $F_PL3_A                      ) = 43                      ! Type
   force.from (                     $F_PL3_A                      ) = $BG_stage_01.$M_Pin3_Bearing_A ! From Marker
   force.to (                       $F_PL3_A                      ) = $BG_stage_01.$M_PLC_Pin3_Bearing_A ! To Marker
   force.disabled (                 $F_PL3_A                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL3_A                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL3_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_A                      ) = 200
   force.attr.2d.pos.y (   1 ,      $F_PL3_A                      ) = 90
   force.attr.2d.ori (    1 ,       $F_PL3_A                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_A  ) = 120, 120, 183
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_A  ) = 150, 90, 90
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_A    ) = 470, 470, 217
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_A    ) = 20, 90, 90

   force.type (                     $F_PL3_B                      ) = 43                      ! Type
   force.from (                     $F_PL3_B                      ) = $BG_stage_01.$M_Pin3_Bearing_B ! From Marker
   force.to (                       $F_PL3_B                      ) = $BG_stage_01.$M_PLC_Pin3_Bearing_B ! To Marker
   force.disabled (                 $F_PL3_B                      ) = 0                       ! Disabled
   force.par (            1 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL3_B                      ) = $SVG_stage_01.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL3_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_B                      ) = 260
   force.attr.2d.pos.y (   1 ,      $F_PL3_B                      ) = 120
   force.attr.2d.ori (    1 ,       $F_PL3_B                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_B  ) = 130, 165.75, 165.75, 243
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_B  ) = 160, 160, 120, 120
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_B    ) = 480, 480, 277
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_B    ) = 20, 120, 120

   force.type (                     $F_PLC_A                      ) = 43                      ! Type
   force.from (                     $F_PLC_A                      ) = $BG_stage_01.$M_PLC_Bearing_PLC_A ! From Marker
   force.to (                       $F_PLC_A                      ) = $M_Gearbox_Frame_LS_PLC_A ! To Marker
   force.par (            1 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PLC_A                      ) = $SVG_stage_01.$SVG_PLC_A.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PLC_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PLC_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PLC_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PLC_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PLC_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PLC_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PLC_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PLC_A                      ) = 230
   force.attr.2d.pos.y (   1 ,      $F_PLC_A                      ) = -140
   force.attr.2d.ori (    1 ,       $F_PLC_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PLC_A  ) = 450, 450, 440, 430, 247
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PLC_A  ) = -40, -140, -140, -140, -140
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PLC_A    ) = 20, 20, 213
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PLC_A    ) = 30, -140, -140

   force.type (                     $F_PLC_B                      ) = 43                      ! Type
   force.from (                     $F_PLC_B                      ) = $BG_stage_01.$M_PLC_Bearing_PLC_B ! From Marker
   force.to (                       $F_PLC_B                      ) = $M_Gearbox_Frame_LS_PLC_B ! To Marker
   force.par (            1 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PLC_B                      ) = $SVG_stage_01.$SVG_PLC_B.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PLC_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PLC_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PLC_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PLC_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PLC_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PLC_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PLC_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PLC_B                      ) = 290
   force.attr.2d.pos.y (   1 ,      $F_PLC_B                      ) = -170
   force.attr.2d.ori (    1 ,       $F_PLC_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PLC_B  ) = 440, 383.875, 383.875, 337.75, 337.75, 307
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PLC_B  ) = -30, -30, -100, -100, -170, -170
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PLC_B    ) = 10, 10, 141.5, 141.5, 141.5, 273
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PLC_B    ) = 30, 8.125, 8.125, -27.5, -170, -170

   forcegroup.begin (               $FEG_mesh                     )                           ! $FEG_stage_01.$FEG_mesh
      force.type (                  $F_Sun_PL1                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL1                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL1                    ) = $BG_stage_01.$M_PL1_ref ! To Marker
      force.disabled (              $F_Sun_PL1                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL1                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL1                    ) = $BG_stage_01.$P_PL1     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL1                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL1                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL1                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL1                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL1                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL1                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL1                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL1                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL1                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL1                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL1                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL1                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL1              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL1        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL1                    ) = 900
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL1                    ) = -20
      force.attr.2d.ori (   1 ,     $F_Sun_PL1                    ) = 0
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = 770, 852.25, 852.25, 852.25, 883
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = 0, 0, -10, -20, -20
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = 970, 949.25, 949.25, 917
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = -10, -10, -20, -20

      force.type (                  $F_Sun_PL2                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL2                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL2                    ) = $BG_stage_01.$M_PL2_ref ! To Marker
      force.disabled (              $F_Sun_PL2                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL2                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL2                    ) = $BG_stage_01.$P_PL2     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL2                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL2                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL2                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL2                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL2                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL2                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL2                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL2                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL2                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL2                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL2                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL2                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL2              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL2        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL2                    ) = -20
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL2                    ) = -220
      force.attr.2d.ori (   1 ,     $F_Sun_PL2                    ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = 720, 710, 710, -3
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = -10, -10, -220, -220
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = -50, -50, -47, -37
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = -290, -220, -220, -220

      force.type (                  $F_Sun_PL3                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL3                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL3                    ) = $BG_stage_01.$M_PL3_ref ! To Marker
      force.disabled (              $F_Sun_PL3                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL3                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL3                    ) = $BG_stage_01.$P_PL3     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL3                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL3                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL3                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL3                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL3                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL3                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL3                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL3                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL3                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL3                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL3                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL3                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL3              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL3        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL3                    ) = -20
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL3                    ) = 190
      force.attr.2d.ori (   1 ,     $F_Sun_PL3                    ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 720, 710, 710, -3
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 0, 0, 190, 190
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = -30, -40, -40, -37
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 250, 250, 190, 190

      force.type (                  $F_PL1_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL1_Ring                   ) = $BG_stage_01.$M_PL1_ref ! From Marker
      force.to (                    $F_PL1_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL1_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL1_Ring                   ) = $BG_stage_01.$P_PL1     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL1_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL1_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL1_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL1_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL1_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL1_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL1_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL1_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL1_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL1_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL1_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL1_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL1_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL1_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL1_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL1_Ring                   ) = 830
      force.attr.2d.pos.y (   1 ,   $F_PL1_Ring                   ) = -20
      force.attr.2d.ori (   1 ,     $F_PL1_Ring                   ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = 970, 875.25, 875.25, 847
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = 0, 0, -20, -20
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = 680, 779.75, 779.75, 813
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = -30, -30, -20, -20

      force.type (                  $F_PL2_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL2_Ring                   ) = $BG_stage_01.$M_PL2_ref ! From Marker
      force.to (                    $F_PL2_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL2_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL2_Ring                   ) = $BG_stage_01.$P_PL2     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL2_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL2_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL2_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL2_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL2_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL2_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL2_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL2_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL2_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL2_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL2_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL2_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL2_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL2_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL2_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL2_Ring                   ) = -20
      force.attr.2d.pos.y (   1 ,   $F_PL2_Ring                   ) = -150
      force.attr.2d.ori (   1 ,     $F_PL2_Ring                   ) = 90
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = 0, 0, -10, -20, -20
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = -290, -197.75, -197.75, -197.75, -167
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = 600, 580.46875, 580.46875, 551.875, 437.5, -20, -20
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = -20, -20, -123, -123, -123, -123, -133

      force.type (                  $F_PL3_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL3_Ring                   ) = $BG_stage_01.$M_PL3_ref ! From Marker
      force.to (                    $F_PL3_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL3_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL3_Ring                   ) = $BG_stage_01.$P_PL3     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL3_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL3_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL3_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL3_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL3_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL3_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL3_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL3_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL3_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL3_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL3_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL3_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL3_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL3_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL3_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL3_Ring                   ) = -20
      force.attr.2d.pos.y (   1 ,   $F_PL3_Ring                   ) = 120
      force.attr.2d.ori (   1 ,     $F_PL3_Ring                   ) = 270
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 0, 0, -10, -20, -20, -20
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 230, 170.25, 170.25, 170.25, 160.25, 137
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 610, 610, -20, -20
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 20, 30, 30, 103

   forcegroup.end (                 $FEG_mesh                     )                           ! $FEG_stage_01.$FEG_mesh
   forcegroup.begin (               $FEG_mesh_linear              )                           ! $FEG_stage_01.$FEG_mesh_linear
      force.type (                  $F_Sun_PL1                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL1                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL1                    ) = $BG_stage_01.$M_PL1_ref ! To Marker
      force.disabled (              $F_Sun_PL1                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL1                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL1                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL1                    ) = $BG_stage_01.$P_PL1     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL1                    ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_Sun_PL2                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL2                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL2                    ) = $BG_stage_01.$M_PL2_ref ! To Marker
      force.disabled (              $F_Sun_PL2                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL2                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL2                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL2                    ) = $BG_stage_01.$P_PL2     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL2                    ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_Sun_PL3                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL3                    ) = $BG_stage_01.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL3                    ) = $BG_stage_01.$M_PL3_ref ! To Marker
      force.disabled (              $F_Sun_PL3                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL3                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL3                    ) = $BG_stage_01.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL3                    ) = $BG_stage_01.$P_PL3     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL3                    ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_PL1_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL1_Ring                   ) = $BG_stage_01.$M_PL1_ref ! From Marker
      force.to (                    $F_PL1_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL1_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL1_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL1_Ring                   ) = $BG_stage_01.$P_PL1     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL1_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL1_Ring                   ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_PL2_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL2_Ring                   ) = $BG_stage_01.$M_PL2_ref ! From Marker
      force.to (                    $F_PL2_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL2_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL2_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL2_Ring                   ) = $BG_stage_01.$P_PL2     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL2_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL2_Ring                   ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_PL3_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL3_Ring                   ) = $BG_stage_01.$M_PL3_ref ! From Marker
      force.to (                    $F_PL3_Ring                   ) = $BG_stage_01.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL3_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL3_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL3_Ring                   ) = $BG_stage_01.$P_PL3     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL3_Ring                   ) = $BG_stage_01.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL3_Ring                   ) = $SVG_stage_01.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode

   forcegroup.end (                 $FEG_mesh_linear              )                           ! $FEG_stage_01.$FEG_mesh_linear
forcegroup.end (                    $FEG_stage_01                 )                           ! $FEG_stage_01

forcegroup.begin (                  $FEG_stage_02                 )                           ! $FEG_stage_02
   force.type (                     $F_PL1_A                      ) = 43                      ! Type
   force.from (                     $F_PL1_A                      ) = $BG_stage_02.$M_Pin1_Bearing_A ! From Marker
   force.to (                       $F_PL1_A                      ) = $BG_stage_02.$M_PLC_Pin1_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL1_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL1_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL1_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL1_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL1_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_A                      ) = 1170
   force.attr.2d.pos.y (   1 ,      $F_PL1_A                      ) = -130
   force.attr.2d.ori (    1 ,       $F_PL1_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_A  ) = 1480, 1480, 1217, 1217, 1207, 1197, 1187
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_A  ) = -140, -120, -120, -130, -130, -130, -130
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_A    ) = 820, 833.86279296875, 833.86279296875, 845.451171875, 891.8046875, 912.40625, 994.8125, 1049.75, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1133, 1143, 1153
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_A    ) = -90, -90, -40, -40, -40, -40, -40, -40, -40, -50, -70, -80, -90, -100, -110, -115, -130, -130, -130, -130

   force.type (                     $F_PL1_B                      ) = 43                      ! Type
   force.from (                     $F_PL1_B                      ) = $BG_stage_02.$M_Pin1_Bearing_B ! From Marker
   force.to (                       $F_PL1_B                      ) = $BG_stage_02.$M_PLC_Pin1_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL1_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL1_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL1_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL1_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL1_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL1_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL1_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL1_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL1_B                      ) = 1240
   force.attr.2d.pos.y (   1 ,      $F_PL1_B                      ) = -140
   force.attr.2d.ori (    1 ,       $F_PL1_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_B  ) = 1460, 1433.714965820313, 1433.714965820313, 1417.429931640625, 1406.5732421875, 1392.09765625, 1372.796875, 1347.0625, 1312.75, 1267, 1267, 1267, 1267, 1257
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_B  ) = -160, -160, -170, -170, -170, -170, -170, -170, -170, -170, -160, -150, -140, -140
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_B    ) = 800, 800, 1193, 1193, 1203, 1213, 1223
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_B    ) = -100, -162.5, -162.5, -140, -140, -140, -140

   force.type (                     $F_PL2_A                      ) = 43                      ! Type
   force.from (                     $F_PL2_A                      ) = $BG_stage_02.$M_Pin2_Bearing_A ! From Marker
   force.to (                       $F_PL2_A                      ) = $BG_stage_02.$M_PLC_Pin2_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL2_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL2_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL2_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL2_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL2_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_A                      ) = 710
   force.attr.2d.pos.y (   1 ,      $F_PL2_A                      ) = -190
   force.attr.2d.ori (    1 ,       $F_PL2_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_A  ) = 920, 920, 757, 757, 747, 737, 727
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_A  ) = -340, -260, -260, -190, -190, -190, -190
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_A    ) = 790, 790, 668.75, 668.75, 693
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_A    ) = -100, -150, -150, -190, -190

   force.type (                     $F_PL2_B                      ) = 43                      ! Type
   force.from (                     $F_PL2_B                      ) = $BG_stage_02.$M_Pin2_Bearing_B ! From Marker
   force.to (                       $F_PL2_B                      ) = $BG_stage_02.$M_PLC_Pin2_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL2_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL2_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL2_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL2_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL2_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL2_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL2_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL2_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL2_B                      ) = 780
   force.attr.2d.pos.y (   1 ,      $F_PL2_B                      ) = -200
   force.attr.2d.ori (    1 ,       $F_PL2_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_B  ) = 940, 940, 930, 797
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_B  ) = -340, -200, -200, -200
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_B    ) = 790, 790, 749.5, 749.5, 749.5, 749.5, 749.5, 749.5, 763
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_B    ) = -70, -64.921875, -64.921875, -79.6875, -99.375, -112.5, -130, -200, -200

   force.type (                     $F_PL3_A                      ) = 43                      ! Type
   force.from (                     $F_PL3_A                      ) = $BG_stage_02.$M_Pin3_Bearing_A ! From Marker
   force.to (                       $F_PL3_A                      ) = $BG_stage_02.$M_PLC_Pin3_Bearing_A ! To Marker
   force.par (            1 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL3_A                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL3_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL3_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL3_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL3_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_A                      ) = 730
   force.attr.2d.pos.y (   1 ,      $F_PL3_A                      ) = 10
   force.attr.2d.ori (    1 ,       $F_PL3_A                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_A  ) = 350, 350, 703, 703, 703, 713
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_A  ) = 40, 30, 30, 20, 10, 10
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_A    ) = 800, 800, 747
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_A    ) = -70, 10, 10

   force.type (                     $F_PL3_B                      ) = 43                      ! Type
   force.from (                     $F_PL3_B                      ) = $BG_stage_02.$M_Pin3_Bearing_B ! From Marker
   force.to (                       $F_PL3_B                      ) = $BG_stage_02.$M_PLC_Pin3_Bearing_B ! To Marker
   force.par (            1 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_PL3_B                      ) = $SVG_stage_02.$SVG_PL_AB.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_PL3_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_PL3_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_PL3_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_PL3_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_PL3_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_PL3_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_PL3_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_PL3_B                      ) = 800
   force.attr.2d.pos.y (   1 ,      $F_PL3_B                      ) = 10
   force.attr.2d.ori (    1 ,       $F_PL3_B                      ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_B  ) = 370, 380, 380, 783
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_B  ) = 50, 50, 10, 10
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_B    ) = 810, 810, 849.75, 849.75, 849.75, 849.75, 849.75, 849.75, 839.75, 827, 817
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_B    ) = -70, -60, -60, -55.078125, -40.3125, -20.625, -7.5, 10, 10, 10, 10

   force.type (                     $F_IMS_PLC_A                  ) = 43                      ! Type
   force.from (                     $F_IMS_PLC_A                  ) = $BG_stage_02.$M_PLC_IMS_PLC_A ! From Marker
   force.to (                       $F_IMS_PLC_A                  ) = $M_Gearbox_Frame_IMS_PLC_A ! To Marker
   force.par (            1 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_PLC_A                  ) = $SVG_stage_02.$SVG_IMS_PLC_A.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_PLC_A                  ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_PLC_A                  ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_PLC_A                  ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_IMS_PLC_A                  ) = 420
   force.attr.2d.pos.y (   1 ,      $F_IMS_PLC_A                  ) = -90
   force.attr.2d.ori (    1 ,       $F_IMS_PLC_A                  ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_A) = 770, 467, 467, 457, 447, 437
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_A) = -80, -80, -90, -90, -90, -90
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_A) = 80, 90, 90, 101.44189453125, 135.767578125, 151.0234375, 212.046875, 212.046875, 212.046875, 212.046875, 222.046875, 266.0625, 324.75, 403
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_A) = 90, 90, 39.375, 39.375, 39.375, 39.375, 39.375, 22.5, 0, -90, -90, -90, -90, -90

   force.type (                     $F_IMS_PLC_B                  ) = 43                      ! Type
   force.from (                     $F_IMS_PLC_B                  ) = $BG_stage_02.$M_PLC_IMS_PLC_B ! From Marker
   force.to (                       $F_IMS_PLC_B                  ) = $M_Gearbox_Frame_IMS_PLC_B ! To Marker
   force.par (            1 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_PLC_B                  ) = $SVG_stage_02.$SVG_IMS_PLC_B.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_PLC_B                  ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_PLC_B                  ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_PLC_B                  ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_IMS_PLC_B                  ) = 490
   force.attr.2d.pos.y (   1 ,      $F_IMS_PLC_B                  ) = -100
   force.attr.2d.ori (    1 ,       $F_IMS_PLC_B                  ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_B) = 770, 764.1875, 764.1875, 716.75, 527, 527, 527, 517, 507
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_B) = -90, -90, -80, -80, -80, -90, -100, -100, -100
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_B) = -3.5527136788005009E-15, -3.5527136788005009E-15, 0, 343, 343, 353, 363, 373, 373, 383, 393, 403, 413, 423, 433, 443, 443, 453, 463, 473
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_IMS_PLC_B) = 30, 8.75, 8.75, 8.75, -25, -25, -25, -25, -70, -70, -70, -70, -70, -70, -70, -70, -100, -100, -100, -100

   forcegroup.begin (               $FEG_mesh                     )                           ! $FEG_stage_02.$FEG_mesh
      force.type (                  $F_Sun_PL1                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL1                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL1                    ) = $BG_stage_02.$M_PL1_ref ! To Marker
      force.disabled (              $F_Sun_PL1                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL1                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL1                    ) = $BG_stage_02.$P_PL1     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL1                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL1                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL1                    ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL1                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL1                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL1                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL1                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL1                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL1                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL1                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL1                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL1                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL1                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL1                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL1                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL1              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL1        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL1                    ) = 1740
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL1                    ) = -190
      force.attr.2d.ori (   1 ,     $F_Sun_PL1                    ) = 0
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = 1610, 1703, 1703, 1703, 1713, 1723
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = -170, -170, -180, -190, -190, -190
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = 1420, 1442.0234375, 1442.0234375, 1454.046875, 1478.09375, 1622.375, 1686.5, 1772, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 1757
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL1) = -140, -140, -130, -130, -130, -130, -130, -130, -130, -140, -150, -160, -170, -180, -190, -190

      force.type (                  $F_Sun_PL2                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL2                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL2                    ) = $BG_stage_02.$M_PL2_ref ! To Marker
      force.disabled (              $F_Sun_PL2                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL2                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL2                    ) = $BG_stage_02.$P_PL2     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL2                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL2                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL2                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL2                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL2                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL2                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL2                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL2                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL2                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL2                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL2                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL2                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL2              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL2        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL2                    ) = 980
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL2                    ) = -250
      force.attr.2d.ori (   1 ,     $F_Sun_PL2                    ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = 1560, 1550, 1550, 997
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = -170, -170, -250, -250
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = 870, 900.75, 900.75, 963
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL2) = -310, -310, -250, -250

      force.type (                  $F_Sun_PL3                    ) = 225                     ! Type
      force.from (                  $F_Sun_PL3                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL3                    ) = $BG_stage_02.$M_PL3_ref ! To Marker
      force.disabled (              $F_Sun_PL3                    ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_Sun_PL3                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_Sun_PL3                    ) = $BG_stage_02.$P_PL3     ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_Sun_PL3                    ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_Sun_PL3                    ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_Sun_PL3                    ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_Sun_PL3                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_Sun_PL3                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_Sun_PL3                    ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_Sun_PL3                    ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_Sun_PL3                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_Sun_PL3                    ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_Sun_PL3                    ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_Sun_PL3                    ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_Sun_PL3                    ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL3              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL3        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_Sun_PL3                    ) = 1070
      force.attr.2d.pos.y (   1 ,   $F_Sun_PL3                    ) = 20
      force.attr.2d.ori (   1 ,     $F_Sun_PL3                    ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 1580, 1580, 1087
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = -150, 20, 20
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 270, 279.78125, 279.78125, 299.5625, 418.25, 893, 893, 903, 913, 923, 933, 943, 953, 963, 973, 983, 993, 1003, 1013, 1023, 1033, 1043, 1053
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Sun_PL3) = 40, 40, 30, 30, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20

      force.type (                  $F_PL1_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL1_Ring                   ) = $BG_stage_02.$M_PL1_ref ! From Marker
      force.to (                    $F_PL1_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL1_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL1_Ring                   ) = $BG_stage_02.$P_PL1     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL1_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL1_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL1_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL1_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL1_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL1_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL1_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL1_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL1_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL1_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL1_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL1_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL1_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL1_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL1_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL1_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL1_Ring                   ) = 1300
      force.attr.2d.pos.y (   1 ,   $F_PL1_Ring                   ) = -150
      force.attr.2d.ori (   1 ,     $F_PL1_Ring                   ) = 180
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = 1370, 1317
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = -150, -150
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = 920, 1263, 1263, 1263, 1263, 1273, 1283
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL1_Ring) = -100, -100, -110, -120, -150, -150, -150

      force.type (                  $F_PL2_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL2_Ring                   ) = $BG_stage_02.$M_PL2_ref ! From Marker
      force.to (                    $F_PL2_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL2_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL2_Ring                   ) = $BG_stage_02.$P_PL2     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL2_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL2_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL2_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL2_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL2_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL2_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL2_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL2_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL2_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL2_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL2_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL2_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL2_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL2_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL2_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL2_Ring                   ) = 850
      force.attr.2d.pos.y (   1 ,   $F_PL2_Ring                   ) = -220
      force.attr.2d.ori (   1 ,     $F_PL2_Ring                   ) = 90
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = 850, 850
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = -300, -237
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = 870, 850, 850
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL2_Ring) = -100, -100, -203

      force.type (                  $F_PL3_Ring                   ) = 225                     ! Type
      force.from (                  $F_PL3_Ring                   ) = $BG_stage_02.$M_PL3_ref ! From Marker
      force.to (                    $F_PL3_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL3_Ring                   ) = $SVG_mesh.$_use_detailed ! Disabled
      force.par (         1 ,       $F_PL3_Ring                   ) = $BG_stage_02.$P_PL3     ! [-] Geometry (Gear 1)
      force.par (         2 ,       $F_PL3_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry (Gear 2)
      force.par (         3 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Basic Output Values
      force.par (         4 ,       $F_PL3_Ring                   ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
      force.par (         6 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Damping model
      force.par (         7 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Friction model
      force.par (         8 ,       $F_PL3_Ring                   ) = 5.00000000000000000E+00 ! [-] Number of slices
      force.par (        10 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear blank factor
      force.par (        11 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
      force.par (        12 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
      force.par (        14 ,       $F_PL3_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 1)
      force.par (        15 ,       $F_PL3_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
      force.par (        16 ,       $F_PL3_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
      force.par (        17 ,       $F_PL3_Ring                   ) = $Mat_Steel              ! [-] Material (Gear 2)
      force.par (        18 ,       $F_PL3_Ring                   ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
      force.par (        19 ,       $F_PL3_Ring                   ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
      force.par (        20 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
      force.par (        21 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
      force.par (        22 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
      force.par (        24 ,       $F_PL3_Ring                   ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
      force.par (        31 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Friction coefficient
      force.par (        32 ,       $F_PL3_Ring                   ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
      force.par (        44 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
      force.par (        50 ,       $F_PL3_Ring                   ) = null                    ! [-] Measured stiffness (plot only)
      force.par (        51 ,       $F_PL3_Ring                   ) = null                    ! [-] Measured TE (plot only)
      force.par (        52 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
      force.par (        53 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
      force.plot.par (    1 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL3_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL3_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.attr.2d.pos.x (   1 ,   $F_PL3_Ring                   ) = 870
      force.attr.2d.pos.y (   1 ,   $F_PL3_Ring                   ) = 10
      force.attr.2d.ori (   1 ,     $F_PL3_Ring                   ) = 0
      force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 260, 260, 277.90625, 277.90625, 295.8125, 403.25, 833, 833, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 833, 823, 823, 833, 843, 853
      force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 20, 15, 15, 30, 30, 30, 30, 20, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 0, 0, 10, 10, 10, 10
      force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = 920, 930, 930, 920, 910, 900, 890, 887
      force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_PL3_Ring) = -90, -90, 10, 10, 10, 10, 10, 10

   forcegroup.end (                 $FEG_mesh                     )                           ! $FEG_stage_02.$FEG_mesh
   forcegroup.begin (               $FEG_mesh_linear              )                           ! $FEG_stage_02.$FEG_mesh_linear
      force.type (                  $F_Sun_PL1                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL1                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL1                    ) = $BG_stage_02.$M_PL1_ref ! To Marker
      force.disabled (              $F_Sun_PL1                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL1                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL1                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL1                    ) = $BG_stage_02.$P_PL1     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL1                    ) = $SVG_stage_02.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL1                    ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL1                    ) = $SVG_mesh.$_full_damping ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL1                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL1                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL1              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL1        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL1        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_Sun_PL2                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL2                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL2                    ) = $BG_stage_02.$M_PL2_ref ! To Marker
      force.disabled (              $F_Sun_PL2                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL2                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL2                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL2                    ) = $BG_stage_02.$P_PL2     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL2                    ) = $SVG_stage_02.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL2                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL2                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL2              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL2        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL2        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_Sun_PL3                    ) = 204                     ! Type
      force.from (                  $F_Sun_PL3                    ) = $BG_stage_02.$M_Sun_ref ! From Marker
      force.to (                    $F_Sun_PL3                    ) = $BG_stage_02.$M_PL3_ref ! To Marker
      force.disabled (              $F_Sun_PL3                    ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_Sun_PL3                    ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_Sun_PL3                    ) = $BG_stage_02.$P_Sun     ! [-] Geometry Gear 1
      force.par (         7 ,       $F_Sun_PL3                    ) = $BG_stage_02.$P_PL3     ! [-] Geometry Gear 2
      force.par (        31 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_k_SP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_Sun_PL3                    ) = $SVG_stage_02.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_Sun_PL3                    ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_Sun_PL3                    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_Sun_PL3              ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_Sun_PL3        ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_Sun_PL3        ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_PL1_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL1_Ring                   ) = $BG_stage_02.$M_PL1_ref ! From Marker
      force.to (                    $F_PL1_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL1_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL1_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL1_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL1_Ring                   ) = $BG_stage_02.$P_PL1     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL1_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL1_Ring                   ) = $SVG_stage_02.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL1_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode

      force.type (                  $F_PL2_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL2_Ring                   ) = $BG_stage_02.$M_PL2_ref ! From Marker
      force.to (                    $F_PL2_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL2_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL2_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL2_Ring                   ) = $BG_stage_02.$P_PL2     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL2_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL2_Ring                   ) = $SVG_stage_02.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL2_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL2_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL2_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL2_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL2_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

      force.type (                  $F_PL3_Ring                   ) = 204                     ! Type
      force.from (                  $F_PL3_Ring                   ) = $BG_stage_02.$M_PL3_ref ! From Marker
      force.to (                    $F_PL3_Ring                   ) = $BG_stage_02.$M_Ring_ref ! To Marker
      force.disabled (              $F_PL3_Ring                   ) = $SVG_mesh.$_use_linear  ! Disabled
      force.par (         2 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Gear type
      force.par (         3 ,       $F_PL3_Ring                   ) = 2.00000000000000000E+00 ! [-] Modeling approach
      force.par (         5 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Geometry input mode
      force.par (         6 ,       $F_PL3_Ring                   ) = $BG_stage_02.$P_PL3     ! [-] Geometry Gear 1 (external)
      force.par (         7 ,       $F_PL3_Ring                   ) = $BG_stage_02.$P_Ring    ! [-] Geometry Gear 2 (internal)
      force.par (        31 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Stiffness method
      force.par (        32 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_k_RP    ! [N/m] Stiffness constant
      force.par (        35 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_mesh_damping ! [Ns/m] Damping constant
      force.par (        36 ,       $F_PL3_Ring                   ) = $SVG_stage_02.$_transition_depth ! [m] Damping transition depth
      force.par (        40 ,       $F_PL3_Ring                   ) = 0.00000000000000000E+00 ! [-] Power loss input mode
      force.plot.par (    1 ,       $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 , $F_PL3_Ring                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 , $F_PL3_Ring             ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   2 , $F_PL3_Ring       ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   3 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   4 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   5 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   6 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   7 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   1 ,   8 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
      force.plot.par (    1 ,   1 ,   2 ,   1 , $F_PL3_Ring       ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

   forcegroup.end (                 $FEG_mesh_linear              )                           ! $FEG_stage_02.$FEG_mesh_linear
forcegroup.end (                    $FEG_stage_02                 )                           ! $FEG_stage_02

forcegroup.begin (                  $FEG_stage_03                 )                           ! $FEG_stage_03
   force.type (                     $F_Pinion_Gear                ) = 225                     ! Type
   force.from (                     $F_Pinion_Gear                ) = $BG_stage_03.$M_Pinion_ref ! From Marker
   force.to (                       $F_Pinion_Gear                ) = $BG_stage_03.$M_Gear_ref ! To Marker
   force.disabled (                 $F_Pinion_Gear                ) = $SVG_mesh.$_use_detailed ! Disabled
   force.par (            1 ,       $F_Pinion_Gear                ) = $BG_stage_03.$P_Pinion  ! [-] Geometry (Gear 1)
   force.par (            2 ,       $F_Pinion_Gear                ) = $BG_stage_03.$P_Gear    ! [-] Geometry (Gear 2)
   force.par (            3 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Basic Output Values
   force.par (            4 ,       $F_Pinion_Gear                ) = 7.00000000000000000E+00 ! [-] Advanced Output Values
   force.par (            6 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Damping model
   force.par (            7 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Friction model
   force.par (            8 ,       $F_Pinion_Gear                ) = 5.00000000000000000E+00 ! [-] Number of slices
   force.par (           10 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Gear blank factor
   force.par (           11 ,       $F_Pinion_Gear                ) = 0.00000000000000000E+00 ! [-] Tooth stiffness method
   force.par (           12 ,       $F_Pinion_Gear                ) = $SVG_stage_03.$_Tooth_Stiff_ratio ! [-] Teeth stiffness ratio
   force.par (           14 ,       $F_Pinion_Gear                ) = $Mat_Steel              ! [-] Material (Gear 1)
   force.par (           15 ,       $F_Pinion_Gear                ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 1)
   force.par (           16 ,       $F_Pinion_Gear                ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 1)
   force.par (           17 ,       $F_Pinion_Gear                ) = $Mat_Steel              ! [-] Material (Gear 2)
   force.par (           18 ,       $F_Pinion_Gear                ) = 2.10000000000000000E+11 ! [N/m²] Young's modulus (Gear 2)
   force.par (           19 ,       $F_Pinion_Gear                ) = 2.99999999999999989E-01 ! [-] Poisson's ratio (Gear 2)
   force.par (           20 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Hertzian scaling factor
   force.par (           21 ,       $F_Pinion_Gear                ) = $SVG_stage_03.$_Tooth_Damping ! [Ns/m] Damping coefficient IN
   force.par (           22 ,       $F_Pinion_Gear                ) = $SVG_stage_03.$_Tooth_Damping ! [Ns/m] Damping coefficient OUT
   force.par (           24 ,       $F_Pinion_Gear                ) = $SVG_mesh.$_full_damping ! [m] Full damping starts at
   force.par (           31 ,       $F_Pinion_Gear                ) = 0.00000000000000000E+00 ! [-] Friction coefficient
   force.par (           32 ,       $F_Pinion_Gear                ) = 1.00000000000000002E-03 ! [m/s] Regularization velocity
   force.par (           44 ,       $F_Pinion_Gear                ) = 0.00000000000000000E+00 ! [-] Tuning parameters (deprecated)
   force.par (           50 ,       $F_Pinion_Gear                ) = null                    ! [-] Measured stiffness (plot only)
   force.par (           51 ,       $F_Pinion_Gear                ) = null                    ! [-] Measured TE (plot only)
   force.par (           52 ,       $F_Pinion_Gear                ) = 0.00000000000000000E+00 ! [-] Contact side (plot only)
   force.par (           53 ,       $F_Pinion_Gear                ) = 0.00000000000000000E+00 ! [-] No. Torques Gear 2 (plot only)
   force.plot.par (       1 ,       $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 , $F_Pinion_Gear                ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 , $F_Pinion_Gear          ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   1 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   2 , $F_Pinion_Gear    ) = 3.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   3 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   4 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   5 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   6 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   7 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   1 ,   8 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.plot.par (       1 ,   1 ,   2 ,   1 , $F_Pinion_Gear    ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
   force.attr.2d.pos.x (   1 ,      $F_Pinion_Gear                ) = 920
   force.attr.2d.pos.y (   1 ,      $F_Pinion_Gear                ) = -220
   force.attr.2d.ori (    1 ,       $F_Pinion_Gear                ) = 0
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_Pinion_Gear) = 770, 872.25, 872.25, 903
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_Pinion_Gear) = -280, -280, -220, -220
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_Pinion_Gear) = 980, 980, 970, 960, 937
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_Pinion_Gear) = -80, -220, -220, -220, -220

   force.type (                     $F_Pinion_Gear_linear         ) = 204                     ! Type
   force.from (                     $F_Pinion_Gear_linear         ) = $BG_stage_03.$M_Pinion_ref ! From Marker
   force.to (                       $F_Pinion_Gear_linear         ) = $BG_stage_03.$M_Gear_ref ! To Marker
   force.disabled (                 $F_Pinion_Gear_linear         ) = $SVG_mesh.$_use_linear  ! Disabled
   force.par (            2 ,       $F_Pinion_Gear_linear         ) = 0.00000000000000000E+00 ! [-] Gear type
   force.par (            3 ,       $F_Pinion_Gear_linear         ) = 2.00000000000000000E+00 ! [-] Modeling approach
   force.par (            5 ,       $F_Pinion_Gear_linear         ) = 1.00000000000000000E+00 ! [-] Geometry input mode
   force.par (            6 ,       $F_Pinion_Gear_linear         ) = $BG_stage_03.$P_Pinion  ! [-] Geometry Gear 1
   force.par (            7 ,       $F_Pinion_Gear_linear         ) = $BG_stage_03.$P_Gear    ! [-] Geometry Gear 2
   force.par (           31 ,       $F_Pinion_Gear_linear         ) = 0.00000000000000000E+00 ! [-] Stiffness method
   force.par (           32 ,       $F_Pinion_Gear_linear         ) = $SVG_stage_03.$_k_mesh  ! [N/m] Stiffness constant
   force.par (           35 ,       $F_Pinion_Gear_linear         ) = $SVG_stage_03.$_mesh_damping ! [Ns/m] Damping constant
   force.par (           36 ,       $F_Pinion_Gear_linear         ) = $SVG_stage_03.$_transition_depth ! [m] Damping transition depth
   force.par (           40 ,       $F_Pinion_Gear_linear         ) = 0.00000000000000000E+00 ! [-] Power loss input mode

   force.type (                     $F_IMS_A                      ) = 43                      ! Type
   force.from (                     $F_IMS_A                      ) = $M_HSIShaft_Bearing_IMS_A ! From Marker
   force.to (                       $F_IMS_A                      ) = $M_Gearbox_Frame_Bearing_IMS_A ! To Marker
   force.par (            1 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_A                      ) = $SVG_stage_03.$SVG_IMS_A.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_A                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_A                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_A                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_A                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_A                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_A                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_A                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_IMS_A                      ) = 190
   force.attr.2d.pos.y (   1 ,      $F_IMS_A                      ) = -40
   force.attr.2d.ori (    1 ,       $F_IMS_A                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_IMS_A  ) = 470, 328.9375, 328.9375, 285.25, 227, 227, 227, 227, 217, 207
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_IMS_A  ) = -50, -50, -70, -70, -70, -60, -50, -40, -40, -40
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_IMS_A    ) = 80, 95.1875, 95.1875, 110.75, 173
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_IMS_A    ) = 50, 50, -40, -40, -40

   force.type (                     $F_IMS_B                      ) = 43                      ! Type
   force.from (                     $F_IMS_B                      ) = $M_HSIShaft_Bearing_IMS_B ! From Marker
   force.to (                       $F_IMS_B                      ) = $M_Gearbox_Frame_Bearing_IMS_B ! To Marker
   force.par (            1 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_B                      ) = $SVG_stage_03.$SVG_IMS_B.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_B                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_B                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_B                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_B                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_B                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_B                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_B                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_IMS_B                      ) = 250
   force.attr.2d.pos.y (   1 ,      $F_IMS_B                      ) = -50
   force.attr.2d.ori (    1 ,       $F_IMS_B                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_IMS_B  ) = 480, 480, 470, 460, 460, 460, 267
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_IMS_B  ) = -60, -70, -70, -70, -60, -50, -50
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_IMS_B    ) = 40, 40, 223, 223, 233
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_IMS_B    ) = 30, 2.5, 2.5, -50, -50

   force.type (                     $F_IMS_C                      ) = 43                      ! Type
   force.from (                     $F_IMS_C                      ) = $M_HSIShaft_Bearing_IMS_C ! From Marker
   force.to (                       $F_IMS_C                      ) = $M_Gearbox_Frame_Bearing_IMS_C ! To Marker
   force.par (            1 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_IMS_C                      ) = $SVG_stage_03.$SVG_IMS_C.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_IMS_C                      ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_IMS_C                      ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_IMS_C                      ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_IMS_C                      ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_IMS_C                      ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_IMS_C                      ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_IMS_C                      ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_IMS_C                      ) = 350
   force.attr.2d.pos.y (   1 ,      $F_IMS_C                      ) = -70
   force.attr.2d.ori (    1 ,       $F_IMS_C                      ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_IMS_C  ) = 490, 490, 480, 470, 460, 455.095703125, 440.3828125, 420.765625, 407.6875, 390.25, 367
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_IMS_C  ) = -60, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_IMS_C    ) = 80, 150.75, 150.75, 150.75, 150.75, 333
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_IMS_C    ) = 80, 80, 70, 60, -70, -70

   force.type (                     $F_HS_A                       ) = 43                      ! Type
   force.from (                     $F_HS_A                       ) = $M_HSShaft_Bearing_HS_A ! From Marker
   force.to (                       $F_HS_A                       ) = $M_Gearbox_Frame_Bearing_HS_A ! To Marker
   force.par (            1 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_A                       ) = $SVG_stage_03.$SVG_HS_A.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_A                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_A                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_A                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_A                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_A                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_A                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_A                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_HS_A                       ) = 50
   force.attr.2d.pos.y (   1 ,      $F_HS_A                       ) = -40
   force.attr.2d.ori (    1 ,       $F_HS_A                       ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_HS_A   ) = 540, 518.609375, 518.609375, 484.4375, 469.25, 469.25, 398.5, 398.5, 398.5, 388.5, 378.5, 227, 227, 217, 207, 197, 187, 177, 167, 167, 167, 157, 147, 137, 127, 117, 107, 97, 87, 77, 67
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_HS_A   ) = -220, -220, -230, -230, -230, -220, -220, -210, -97.5, -97.5, -97.5, -97.5, -60, -60, -60, -60, -60, -60, -60, -50, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_HS_A     ) = 29.999999999999989, 29.999999999999989, 33
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_HS_A     ) = 30, -40, -40

   force.type (                     $F_HS_B                       ) = 43                      ! Type
   force.from (                     $F_HS_B                       ) = $M_HSShaft_Bearing_HS_B ! From Marker
   force.to (                       $F_HS_B                       ) = $M_Gearbox_Frame_Bearing_HS_B ! To Marker
   force.par (            1 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_B                       ) = $SVG_stage_03.$SVG_HS_B.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_B                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_B                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_B                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_B                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_B                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_B                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_B                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_HS_B                       ) = 110
   force.attr.2d.pos.y (   1 ,      $F_HS_B                       ) = -70
   force.attr.2d.ori (    1 ,       $F_HS_B                       ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_HS_B   ) = 540, 530, 530, 525.30828857421875, 511.233154296875, 492.46630859375, 479.955078125, 463.2734375, 463.2734375, 463.2734375, 441.03125, 411.375, 411.375, 411.375, 401.375, 358.5, 358.5, 348.5, 338.5, 328.5, 328.5, 127
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_HS_B   ) = -210, -210, -250, -250, -250, -250, -250, -250, -230, -220, -220, -220, -210, -200, -200, -200, -210, -210, -210, -210, -70, -70
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_HS_B     ) = 80, 90, 90, 93
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_HS_B     ) = 60, 60, -70, -70

   force.type (                     $F_HS_C                       ) = 43                      ! Type
   force.from (                     $F_HS_C                       ) = $M_HSShaft_Bearing_HS_C ! From Marker
   force.to (                       $F_HS_C                       ) = $M_Gearbox_Frame_Bearing_HS_C ! To Marker
   force.par (            1 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in x
   force.par (            2 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in y
   force.par (            3 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [N] Nominal force in z
   force.par (            4 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in al
   force.par (            5 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in be
   force.par (            6 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [Nm] Nominal torque in ga
   force.par (            7 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_x ! [N/m] Transl. stiffness in x
   force.par (            8 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_y ! [N/m] Transl. stiffness in y
   force.par (            9 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_z ! [N/m] Transl. stiffness in z
   force.par (           10 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_al ! [Nm/rad] Rotat. stiffness in al
   force.par (           11 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_be ! [Nm/rad] Rotat. stiffness in be
   force.par (           12 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_c_ga ! [Nm/rad] Rotat. stiffness in ga
   force.par (           13 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_x ! [Ns/m] Transl. damping in x
   force.par (           14 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_y ! [Ns/m] Transl. damping in y
   force.par (           15 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_z ! [Ns/m] Transl. damping in z
   force.par (           16 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_al ! [Nms/rad] Rotat. damping in al
   force.par (           17 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_be ! [Nms/rad] Rotat. damping in be
   force.par (           18 ,       $F_HS_C                       ) = $SVG_stage_03.$SVG_HS_C.$_PL_d_ga ! [Nms/rad] Rotat. damping in ga
   force.par (           19 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(x)
   force.par (           20 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(y)
   force.par (           21 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_c(z)
   force.par (           22 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(al)
   force.par (           23 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(be)
   force.par (           24 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_c(ga)
   force.par (           25 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(xd)
   force.par (           26 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(yd)
   force.par (           27 ,       $F_HS_C                       ) = null                    ! [-] Input Function F_d(zd)
   force.par (           28 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(ald)
   force.par (           29 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(bed)
   force.par (           30 ,       $F_HS_C                       ) = null                    ! [-] Input Function T_d(gad)
   force.par (           31 ,       $F_HS_C                       ) = 2.00000000000000000E+00 ! [-] Mode of angle calculation
   force.par (           33 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in x
   force.par (           34 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in y
   force.par (           35 ,       $F_HS_C                       ) = null                    ! [-] Expression for force in z
   force.par (           36 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in al
   force.par (           37 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in be
   force.par (           38 ,       $F_HS_C                       ) = null                    ! [-] Expression for torque in ga
   force.par (           39 ,       $F_HS_C                       ) = null                    ! [-] Input Function Set
   force.par (           40 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in x
   force.par (           41 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in y
   force.par (           42 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [m] Nominal displacement in z
   force.par (           43 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in al
   force.par (           44 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in be
   force.par (           45 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [rad] Nominal angle in ga
   force.par (           46 ,       $F_HS_C                       ) = 0.00000000000000000E+00 ! [-] Output force in To Marker
   force.attr.2d.pos.x (   1 ,      $F_HS_C                       ) = 180
   force.attr.2d.pos.y (   1 ,      $F_HS_C                       ) = -90
   force.attr.2d.ori (    1 ,       $F_HS_C                       ) = 180
   force.attr.2d.paths.from.x (   1 ,   1 ,   1 ,   1 , $F_HS_C   ) = 570, 570, 393.5, 393.5, 383.5, 197
   force.attr.2d.paths.from.y (   1 ,   1 ,   1 ,   1 , $F_HS_C   ) = -200, -140, -140, -90, -90, -90
   force.attr.2d.paths.to.x (   1 ,   1 ,   1 ,   1 , $F_HS_C     ) = 80, 90, 90, 93.849609375, 105.3984375, 120.796875, 131.0625, 144.75, 163
   force.attr.2d.paths.to.y (   1 ,   1 ,   1 ,   1 , $F_HS_C     ) = 70, 70, -90, -90, -90, -90, -90, -90, -90

forcegroup.end (                    $FEG_stage_03                 )                           ! $FEG_stage_03

!**********************************************************************
! Control Elements
!**********************************************************************
control.type (                      $C_PI_generator               ) = 129                     ! Type
control.st.dyn (          1 ,       $C_PI_generator               ) = 0.00000000000000000E+00 ! Dynamic States
control.st.equi (         1 ,       $C_PI_generator               ) = 0                       ! Equilibrium
control.disabled (                  $C_PI_generator               ) = $SVG_generator.$_use_control ! Disabled
control.par (             7 ,       $C_PI_generator               ) = 1.00000000000000000E+00 ! [-] Number of input channels
control.par (             8 ,       $C_PI_generator               ) = $C_speed_difference     ! [-] Input Element ch. 1
control.par (             9 ,       $C_PI_generator               ) = 1.00000000000000000E+00 ! [-] Output Value ch. 1
control.par (            14 ,       $C_PI_generator               ) = 2.00000000000000000E+00 ! [-] Controller type
control.par (            15 ,       $C_PI_generator               ) = 2.20000000000000000E+03 ! [-] Proportional gain factor
control.par (            16 ,       $C_PI_generator               ) = 1.00000000000000000E+01 ! [s] Integral time constant
control.par (            22 ,       $C_PI_generator               ) = 0.00000000000000000E+00 ! [-] Print converted coefficients

control.type (                      $C_measured_speed             ) = 160                     ! Type
control.disabled (                  $C_measured_speed             ) = $SVG_generator.$_use_control ! Disabled
control.par (             1 ,       $C_measured_speed             ) = 1.00000000000000000E+00 ! [-] Number of Conn./Joint states
control.par (            10 ,       $C_measured_speed             ) = 1.00000000000000000E+00 ! [-]  Ch 1: State type
control.par (            11 ,       $C_measured_speed             ) = $J_HSShaft              ! [-]  Ch 1: Connection/Joint
control.par (            12 ,       $C_measured_speed             ) = 1.00000000000000000E+00 ! [-]  Ch 1: -> Conn./Joint state
control.par (            13 ,       $C_measured_speed             ) = 1.00000000000000000E+00 ! [-]  Ch 1: Gain factor C
control.par (            14 ,       $C_measured_speed             ) = null                    ! [-]  Ch 1: Disturb. Ctrl. Element
control.par (            15 ,       $C_measured_speed             ) = 0.00000000000000000E+00 ! [-]  Ch 1: -> Output Value u

control.type (                      $C_reference_speed            ) = 163                     ! Type
control.disabled (                  $C_reference_speed            ) = $SVG_generator.$_use_control ! Disabled
control.par (             1 ,       $C_reference_speed            ) = 1.00000000000000000E+00 ! [-] Number of u-Vector Elements
control.par (            10 ,       $C_reference_speed            ) = $UE_reference_speed     ! [-]  Ch 1: u-Vector Element

control.type (                      $C_speed_difference           ) = 143                     ! Type
control.disabled (                  $C_speed_difference           ) = $SVG_generator.$_use_control ! Disabled
control.txt (                       $C_speed_difference           ) = 'input in rad/s[br]output in rpm' ! Comment
control.par (             1 ,       $C_speed_difference           ) = $C_measured_speed       ! [-] Input Element ch. 1
control.par (             3 ,       $C_speed_difference           ) = -1.00000000000000000E+00 ! [-] Gain factor C1 for ch. 1
control.par (             4 ,       $C_speed_difference           ) = $C_reference_speed      ! [-] Input Element ch. 2
control.par (             6 ,       $C_speed_difference           ) = 1.00000000000000000E+00 ! [-] Gain factor C2 for ch. 2
control.par (             7 ,       $C_speed_difference           ) = 1.00000000000000000E+00 ! [-] Connection type
control.par (             8 ,       $C_speed_difference           ) = { 30.0/PI }             ! [-] Function parameter P
control.par (             9 ,       $C_speed_difference           ) = 0.00000000000000000E+00 ! [-] Function type
control.par (            13 ,       $C_speed_difference           ) = 0.00000000000000000E+00 ! [-] Constant zero deviation K

!**********************************************************************
! Input Functions
!**********************************************************************
ifctn.file (                        $I_generator_speed            ) = 'GEN_SPD.if2'           ! File or URI
ifctn.scal.x (                      $I_generator_speed            ) = 1.00000000000000000E+00 ! Scaling factor
ifctn.scal.z (                      $I_generator_speed            ) = 1.00000000000000000E+00 ! Scaling factor
ifctn.settings.fromfile (           $I_generator_speed            ) = 1                       ! Inter- and extrapolation settings from file
ifctn.intpol.type (                 $I_generator_speed            ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_generator_speed            ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctn.file (                        $I_Fx                         ) = 'Fx.if2'                ! File or URI
ifctn.scal.z (                      $I_Fx                         ) = $_gamma_load            ! Scaling factor
ifctn.range.handling (              $I_Fx                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_Fx                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_Fx                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_Fx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_Fx                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_Fx                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_Fx                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_Fy                         ) = 'Fy.if2'                ! File or URI
ifctn.scal.z (                      $I_Fy                         ) = $_gamma_load            ! Scaling factor
ifctn.range.handling (              $I_Fy                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_Fy                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_Fy                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_Fy                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_Fy                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_Fy                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_Fy                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_Fz                         ) = 'Fz.if2'                ! File or URI
ifctn.scal.z (                      $I_Fz                         ) = $_gamma_load            ! Scaling factor
ifctn.range.handling (              $I_Fz                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_Fz                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_Fz                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_Fz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_Fz                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_Fz                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_Fz                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_Mx                         ) = 'Mx.if2'                ! File or URI
ifctn.scal.z (                      $I_Mx                         ) = $_gamma_load            ! Scaling factor
ifctn.settings.fromfile (           $I_Mx                         ) = 0                       ! Inter- and extrapolation settings from file
ifctn.intpol.type (                 $I_Mx                         ) = 2                       ! Interpolation type
ifctn.range.handling (              $I_Mx                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_Mx                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_Mx                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_Mx                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_Mx                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_Mx                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_Mx                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_My                         ) = 'My.if2'                ! File or URI
ifctn.scal.z (                      $I_My                         ) = $_gamma_Nm              ! Scaling factor
ifctn.range.handling (              $I_My                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_My                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_My                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_My                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_My                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_My                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_My                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctn.file (                        $I_Mz                         ) = 'Mz.if2'                ! File or URI
ifctn.scal.z (                      $I_Mz                         ) = $_gamma_Nm              ! Scaling factor
ifctn.range.handling (              $I_Mz                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue
ifctn.plot.par (          1 ,       $I_Mz                         ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   1 , $I_Mz                         ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   2 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   3 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   4 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   5 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   6 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   7 , $I_Mz                         ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   8 ,   1 , $I_Mz                   ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,   9 ,   1 , $I_Mz                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
ifctn.plot.par (          1 ,  10 ,   1 , $I_Mz                   ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter

ifctngroup.begin (                  $IFG_bed_plate_motion         )                           ! $IFG_bed_plate_motion
   ifctn.file (                     $I_X                          ) = 'EC4_s01_X.if2'         ! File or URI
   ifctn.range.handling (           $I_X                          ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Y                          ) = 'EC4_s01_Y.if2'         ! File or URI
   ifctn.range.handling (           $I_Y                          ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Z                          ) = 'EC4_s01_Z.if2'         ! File or URI
   ifctn.range.handling (           $I_Z                          ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_X_Rot                      ) = 'EC4_s01_X_rot.if2'     ! File or URI
   ifctn.range.handling (           $I_X_Rot                      ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Y_Rot                      ) = 'EC4_s01_Y_rot.if2'     ! File or URI
   ifctn.range.handling (           $I_Y_Rot                      ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Z_Rot                      ) = 'EC4_s01_Z_rot.if2'     ! File or URI
   ifctn.range.handling (           $I_Z_Rot                      ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_XD                         ) = 'EC4_s01_XD.if2'        ! File or URI
   ifctn.range.handling (           $I_XD                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_YD                         ) = 'EC4_s01_YD.if2'        ! File or URI
   ifctn.range.handling (           $I_YD                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_ZD                         ) = 'EC4_s01_ZD.if2'        ! File or URI
   ifctn.range.handling (           $I_ZD                         ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_X_Rot_D                    ) = 'EC4_s01_X_rotD.if2'    ! File or URI
   ifctn.range.handling (           $I_X_Rot_D                    ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Y_Rot_D                    ) = 'EC4_s01_Y_rotD.if2'    ! File or URI
   ifctn.range.handling (           $I_Y_Rot_D                    ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Z_Rot_D                    ) = 'EC4_s01_Z_rotD.if2'    ! File or URI
   ifctn.range.handling (           $I_Z_Rot_D                    ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_XDD                        ) = 'EC4_s01_XDD.if2'       ! File or URI
   ifctn.range.handling (           $I_XDD                        ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_YDD                        ) = 'EC4_s01_YDD.if2'       ! File or URI
   ifctn.range.handling (           $I_YDD                        ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_ZDD                        ) = 'EC4_s01_ZDD.if2'       ! File or URI
   ifctn.range.handling (           $I_ZDD                        ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_X_Rot_DD                   ) = 'EC4_s01_X_rotDD.if2'   ! File or URI
   ifctn.range.handling (           $I_X_Rot_DD                   ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Y_Rot_DD                   ) = 'EC4_s01_Y_rotDD.if2'   ! File or URI
   ifctn.range.handling (           $I_Y_Rot_DD                   ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

   ifctn.file (                     $I_Z_Rot_DD                   ) = 'EC4_s01_Z_rotDD.if2'   ! File or URI
   ifctn.range.handling (           $I_Z_Rot_DD                   ) = 2                       ! Handling when evaluating outside range: 0=Warning, continue; 1=Error, stop solver; 2=No message, continue

ifctngroup.end (                    $IFG_bed_plate_motion         )                           ! $IFG_bed_plate_motion

!**********************************************************************
! Expressions
!**********************************************************************
express.str (                       $X_omeg_read                  ) = 'WX($M_HSShaft_BRF,0,0)' ! Definition

express.str (                       $X_omeg_input                 ) = 'IFCTNX(0,$I_generator_speed,0,-1)' ! Definition

express.str (                       $X_delta_t                    ) = '0.005'                 ! Definition

express.str (                       $X_omg_error                  ) = '$X_omeg_input-$X_omeg_read' ! Definition

express.str (                       $X_last_int_omg_error         ) = 'if (TIME==0)\n{0}\nelse\n{$X_omg_error*$X_delta_t}' ! Definition

express.str (                       $X_int_omg_error              ) = '$X_last_int_omg_error+$X_omg_error*$X_delta_t' ! Definition

express.str (                       $X_gen_torq                   ) = '$_rated_power/IFCTNX(TIME,$I_generator_speed, 0, -1)' ! Definition

!**********************************************************************
! Excitations
!**********************************************************************
excit.type (                        $E_Fx                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fx                         ) = $I_Fx                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fx                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fx                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fx                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fx                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fx                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_Fx                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fx                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_Fy                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fy                         ) = $I_Fy                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fy                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fy                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fy                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fy                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fy                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_Fy                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fy                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_Fz                         ) = 2                       ! Type
excit.par (               1 ,       $E_Fz                         ) = $I_Fz                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Fz                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Fz                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Fz                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Fz                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Fz                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_Fz                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_Fz                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_Mx                         ) = 2                       ! Type
excit.par (               1 ,       $E_Mx                         ) = $I_Mx                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Mx                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Mx                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Mx                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Mx                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Mx                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_Mx                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_Mx                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_My                         ) = 2                       ! Type
excit.par (               1 ,       $E_My                         ) = $I_My                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_My                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_My                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_My                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_My                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_My                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_My                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_My                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_Mz                         ) = 2                       ! Type
excit.par (               1 ,       $E_Mz                         ) = $I_Mz                   ! [-] Input Function f(t)
excit.par (               2 ,       $E_Mz                         ) = null                    ! [-] Input Function fd(t)
excit.par (               3 ,       $E_Mz                         ) = null                    ! [-] Input Function fdd(t)
excit.par (               4 ,       $E_Mz                         ) = 0.00000000000000000E+00 ! [-] Derivatives fd, fdd mode
excit.par (               5 ,       $E_Mz                         ) = 0.00000000000000000E+00 ! [-] Enforce linear interpolation
excit.par (               6 ,       $E_Mz                         ) = 0.00000000000000000E+00 ! [s] Time offset t0
excit.par (               7 ,       $E_Mz                         ) = 1.00000000000000000E+00 ! [-] Time scaling factor a
excit.par (               8 ,       $E_Mz                         ) = 1.00000000000000000E+00 ! [-] Scaling factor c

excit.type (                        $E_reference_speed            ) = 14                      ! Type
excit.disabled (                    $E_reference_speed            ) = $SVG_generator.$_use_control ! Disabled
excit.par (               1 ,       $E_reference_speed            ) = { dimless($_rotor_speed)*$_GB_ratio*PI/30.0 } ! [-] Constant value
excit.par (               2 ,       $E_reference_speed            ) = 0.00000000000000000E+00 ! [-] Constant value for
excit.plot.par (          1 ,       $E_reference_speed            ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   1 , $E_reference_speed            ) = 1.02400000000000000E+03 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   2 , $E_reference_speed            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   3 , $E_reference_speed            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   4 , $E_reference_speed            ) = 0.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   5 , $E_reference_speed            ) = 1.00000000000000000E+01 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   6 ,   1 , $E_reference_speed      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   7 ,   1 , $E_reference_speed      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter
excit.plot.par (          1 ,   8 ,   1 , $E_reference_speed      ) = 1.00000000000000000E+00 ! [-] Unknown plot parameter

!**********************************************************************
! u-Vector
!**********************************************************************
uele.type (                         $UE_Fx                        ) = 1                       ! Type
uele.excit (                        $UE_Fx                        ) = $E_Fx                   ! Referenced Excitation
uele.index (                        $UE_Fx                        ) = 0                       ! Index

uele.type (                         $UE_Fy                        ) = 1                       ! Type
uele.excit (                        $UE_Fy                        ) = $E_Fy                   ! Referenced Excitation
uele.index (                        $UE_Fy                        ) = 0                       ! Index

uele.type (                         $UE_Fz                        ) = 1                       ! Type
uele.excit (                        $UE_Fz                        ) = $E_Fz                   ! Referenced Excitation
uele.index (                        $UE_Fz                        ) = 0                       ! Index

uele.type (                         $UE_Mx                        ) = 1                       ! Type
uele.excit (                        $UE_Mx                        ) = $E_Mx                   ! Referenced Excitation
uele.index (                        $UE_Mx                        ) = 0                       ! Index

uele.type (                         $UE_My                        ) = 1                       ! Type
uele.excit (                        $UE_My                        ) = $E_My                   ! Referenced Excitation
uele.index (                        $UE_My                        ) = 0                       ! Index

uele.type (                         $UE_Mz                        ) = 1                       ! Type
uele.excit (                        $UE_Mz                        ) = $E_Mz                   ! Referenced Excitation
uele.index (                        $UE_Mz                        ) = 0                       ! Index

uele.type (                         $UE_reference_speed           ) = 1                       ! Type
uele.excit (                        $UE_reference_speed           ) = $E_reference_speed      ! Referenced Excitation

!**********************************************************************
! Materials
!**********************************************************************
material.type (                     $Mat_Steel                    ) = 1                       ! Type
material.par (            2 ,       $Mat_Steel                    ) = 7.85000000000000000E+03 ! [kg/m³] Density
material.par (            3 ,       $Mat_Steel                    ) = 0.00000000000000000E+00 ! [-] Input mode
material.par (            4 ,       $Mat_Steel                    ) = 2.10000000000000000E+11 ! [Pa] Young's modulus
material.par (            5 ,       $Mat_Steel                    ) = 2.99999999999999989E-01 ! [-] Poisson's ratio
material.par (            6 ,       $Mat_Steel                    ) = 8.07692307692307739E+10 ! [Pa] Shear modulus

!**********************************************************************
! Cross Sections
!**********************************************************************
xsection.type (                     $XSc_Shaft_IMS_HS             ) = 2                       ! Type
xsection.par (            1 ,       $XSc_Shaft_IMS_HS             ) = $Mat_Steel              ! [-] Material
xsection.par (            3 ,       $XSc_Shaft_IMS_HS             ) = 5.00000000000000000E-01 ! [m] Outer diameter
xsection.par (            4 ,       $XSc_Shaft_IMS_HS             ) = 2.00000000000000011E-01 ! [m] Inner diameter
xsection.par (            5 ,       $XSc_Shaft_IMS_HS             ) = 3.60000000000000000E+01 ! [-] Number of cross section nodes

                                                                                                                                                            
